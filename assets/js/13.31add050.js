(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{453:function(s,t,a){"use strict";a.r(t);var e=a(2),n=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("Swift 是一门开发 iOS, macOS, watchOS 和 tvOS 应用的新语言。然而，如果你有 C 或者 Objective-C 开发经验的话，你会发现 Swift 的很多内容都是你熟悉的。")]),s._v(" "),t("p",[s._v("Swift 包含了 C 和 Objective-C 上所有基础数据类型，"),t("code",[s._v("Int")]),s._v(" 表示整型值； "),t("code",[s._v("Double")]),s._v(" 和 "),t("code",[s._v("Float")]),s._v(" 表示浮点型值； "),t("code",[s._v("Bool")]),s._v(" 是布尔型值；"),t("code",[s._v("String")]),s._v(" 是文本型数据。 Swift 还提供了三个基本的集合类型，"),t("code",[s._v("Array")]),s._v("、"),t("code",[s._v("Set")]),s._v(" 和 "),t("code",[s._v("Dictionary")]),s._v(" ，详见 "),t("RouterLink",{attrs:{to:"/pages/4b4c78/"}},[s._v("集合类型")]),s._v("。")],1),s._v(" "),t("p",[s._v("就像 C 语言一样，Swift 使用变量来进行存储并通过变量名来关联值。在 Swift 中，广泛的使用着值不可变的变量，它们就是常量，而且比 C 语言的常量更强大。在 Swift 中，如果你要处理的值不需要改变，那使用常量可以让你的代码更加安全并且更清晰地表达你的意图。")]),s._v(" "),t("p",[s._v("除了我们熟悉的类型，Swift 还增加了 Objective-C 中没有的高阶数据类型比如元组（Tuple）。元组可以让你创建或者传递一组数据，比如作为函数的返回值时，你可以用一个元组可以返回多个值。")]),s._v(" "),t("p",[s._v("Swift 还增加了可选（Optional）类型，用于处理值缺失的情况。可选表示 “那儿有一个值，并且它等于 "),t("em",[s._v("x")]),s._v(" ” 或者 “那儿没有值” 。可选有点像在 Objective-C 中使用 "),t("code",[s._v("nil")]),s._v(" ，但是它可以用在任何类型上，不仅仅是类。可选类型比 Objective-C 中的 "),t("code",[s._v("nil")]),s._v(" 指针更加安全也更具表现力，它是 Swift 许多强大特性的重要组成部分。")]),s._v(" "),t("p",[s._v("Swift 是一门"),t("em",[s._v("类型安全")]),s._v("的语言，这意味着 Swift 可以让你清楚地知道值的类型。如果你的代码需要一个 "),t("code",[s._v("String")]),s._v(" ，类型安全会阻止你不小心传入一个 "),t("code",[s._v("Int")]),s._v(" 。同样的，如果你的代码需要一个 "),t("code",[s._v("String")]),s._v("，类型安全会阻止你意外传入一个可选的 "),t("code",[s._v("String")]),s._v(" 。类型安全可以帮助你在开发阶段尽早发现并修正错误。")]),s._v(" "),t("h2",{attrs:{id:"常量和变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常量和变量"}},[s._v("#")]),s._v(" 常量和变量")]),s._v(" "),t("p",[s._v("常量和变量把一个名字（比如 "),t("code",[s._v("maximumNumberOfLoginAttempts")]),s._v(" 或者 "),t("code",[s._v("welcomeMessage")]),s._v(" ）和一个指定类型的值（比如数字 "),t("code",[s._v("10")]),s._v(" 或者字符串 "),t("code",[s._v('"Hello"')]),s._v(" ）关联起来。"),t("em",[s._v("常量")]),s._v("的值一旦设定就不能改变，而"),t("em",[s._v("变量")]),s._v("的值可以随意更改。")]),s._v(" "),t("h3",{attrs:{id:"声明常量和变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#声明常量和变量"}},[s._v("#")]),s._v(" 声明常量和变量")]),s._v(" "),t("p",[s._v("常量和变量必须在使用前声明，用 "),t("code",[s._v("let")]),s._v(" 来声明常量，用 "),t("code",[s._v("var")]),s._v(" 来声明变量。下面的例子展示了如何用常量和变量来记录用户尝试登录的次数：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" maximumNumberOfLoginAttempts "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" currentLoginAttempt "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("这两行代码可以被理解为：")]),s._v(" "),t("p",[s._v("“声明一个名字是 "),t("code",[s._v("maximumNumberOfLoginAttempts")]),s._v(" 的新常量，并给它一个值 "),t("code",[s._v("10")]),s._v(" 。然后，声明一个名字是 "),t("code",[s._v("currentLoginAttempt")]),s._v(" 的变量并将它的值初始化为 "),t("code",[s._v("0")]),s._v(" 。”")]),s._v(" "),t("p",[s._v("在这个例子中，允许的最大尝试登录次数被声明为一个常量，因为这个值不会改变。当前尝试登录次数被声明为一个变量，因为每次尝试登录失败的时候都需要增加这个值。")]),s._v(" "),t("p",[s._v("你可以在一行中声明多个常量或者多个变量，用逗号隔开：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" z "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("blockquote",[t("p",[s._v("注意")]),s._v(" "),t("p",[s._v("如果你的代码中有不需要改变的值，请使用 "),t("code",[s._v("let")]),s._v(" 关键字将它声明为常量。只将需要改变的值声明为变量。")])]),s._v(" "),t("h3",{attrs:{id:"类型注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型注解"}},[s._v("#")]),s._v(" 类型注解")]),s._v(" "),t("p",[s._v("当你声明常量或者变量的时候可以加上"),t("em",[s._v("类型注解（type annotation）")]),s._v(" ，说明常量或者变量中要存储的值的类型。如果要添加类型注解，需要在常量或者变量名后面加上一个冒号和空格，然后加上类型名称。")]),s._v(" "),t("p",[s._v("这个例子给 "),t("code",[s._v("welcomeMessage")]),s._v(" 变量添加了类型注解，表示这个变量可以存储 "),t("code",[s._v("String")]),s._v(" 类型的值：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" welcomeMessage"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("声明中的冒号代表着*“是...类型”*，所以这行代码可以被理解为：")]),s._v(" "),t("p",[s._v("“声明一个类型为 "),t("code",[s._v("String")]),s._v(" ，名字为 "),t("code",[s._v("welcomeMessage")]),s._v(" 的变量。”")]),s._v(" "),t("p",[s._v("“类型为 "),t("code",[s._v("String")]),s._v(" ”的意思是“可以存储任意 "),t("code",[s._v("String")]),s._v(" 类型的值。”")]),s._v(" "),t("p",[t("code",[s._v("welcomeMessage")]),s._v(" 变量现在可以被设置成任意字符串：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[s._v("welcomeMessage "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello"')])]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("你可以在一行中定义多个同样类型的变量，用逗号分割，并在最后一个变量名之后添加类型注解：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" red"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" green"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" blue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Double")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("blockquote",[t("p",[s._v("注意")]),s._v(" "),t("p",[s._v("一般来说你很少需要写类型注解。如果你在声明常量或者变量的时候赋了一个初始值，Swift 可以推断出这个常量或者变量的类型，请参考 "),t("a",{attrs:{href:"#%E7%B1%BB%E5%9E%8B%E5%AE%89%E5%85%A8%E5%92%8C%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD"}},[s._v("类型安全和类型推断")]),s._v("。在上面的例子中，没有给 "),t("code",[s._v("welcomeMessage")]),s._v(" 赋初始值，所以变量 "),t("code",[s._v("welcomeMessage")]),s._v(" 的类型是通过一个类型注解指定的，而不是通过初始值推断的。")])]),s._v(" "),t("h3",{attrs:{id:"常量和变量的命名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常量和变量的命名"}},[s._v("#")]),s._v(" 常量和变量的命名")]),s._v(" "),t("p",[s._v("常量和变量名可以包含任何字符，包括 Unicode 字符：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" π "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.14159")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" 你好 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"你好世界"')])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" 🐶🐮 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"dogcow"')])]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("常量与变量名不能包含数学符号，箭头，保留的（或者非法的）Unicode 码位，连线与制表符。也不能以数字开头，但是可以在常量与变量名的其他地方包含数字。")]),s._v(" "),t("p",[s._v("一旦你将常量或者变量声明为确定的类型，你就不能使用相同的名字再次进行声明，或者改变其存储的值的类型。同时，你也不能将常量与变量进行互转。")]),s._v(" "),t("blockquote",[t("p",[s._v("注意")]),s._v(" "),t("p",[s._v("如果你需要使用与 Swift 保留关键字相同的名称作为常量或者变量名，你可以使用反引号（`）将关键字包围的方式将其作为名字使用。无论如何，你应当避免使用关键字作为常量或变量名，除非你别无选择。")])]),s._v(" "),t("p",[s._v("你可以更改现有的变量值为其他同类型的值，在下面的例子中，"),t("code",[s._v("friendlyWelcome")]),s._v(" 的值从 "),t("code",[s._v('"Hello!"')]),s._v(" 改为了 "),t("code",[s._v('"Bonjour!"')]),s._v(":")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" friendlyWelcome "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello!"')])]),s._v("\nfriendlyWelcome "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Bonjour!"')])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// friendlyWelcome 现在是 "Bonjour!"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("与变量不同，常量的值一旦被确定就不能更改了。尝试这样做会导致编译时报错：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" languageName "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Swift"')])]),s._v("\nlanguageName "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Swift++"')])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这会报编译时错误 - languageName 不可改变")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h3",{attrs:{id:"输出常量和变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#输出常量和变量"}},[s._v("#")]),s._v(" 输出常量和变量")]),s._v(" "),t("p",[s._v("你可以用 "),t("code",[s._v("print(_:separator:terminator:)")]),s._v(" 函数来输出当前常量或变量的值:")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("friendlyWelcome"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出“Bonjour!”")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[t("code",[s._v("print(_:separator:terminator:)")]),s._v(" 是一个用来输出一个或多个值到适当输出区的全局函数。如果你用 Xcode，"),t("code",[s._v("print(_:separator:terminator:)")]),s._v(" 将会输出内容到“console”面板上。"),t("code",[s._v("separator")]),s._v(" 和 "),t("code",[s._v("terminator")]),s._v(" 参数具有默认值，因此你调用这个函数的时候可以忽略它们。默认情况下，该函数通过添加换行符来结束当前行。如果不想换行，可以传递一个空字符串给 "),t("code",[s._v("terminator")]),s._v(" 参数--例如，"),t("code",[s._v('print(someValue, terminator:"")')]),s._v(" 。关于参数默认值的更多信息，请参考 "),t("RouterLink",{attrs:{to:"/pages/b69d99/#默认参数值"}},[s._v("默认参数值")]),s._v("。")],1),s._v(" "),t("p",[s._v("Swift 用"),t("em",[s._v("字符串插值（string interpolation）")]),s._v(" 的方式把常量名或者变量名当做占位符加入到长字符串中，Swift 会用当前常量或变量的值替换这些占位符。将常量或变量名放入圆括号中，并在开括号前使用反斜杠将其转义：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"The current value of friendlyWelcome is ')]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("friendlyWelcome")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出“The current value of friendlyWelcome is Bonjour!”")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("blockquote",[t("p",[s._v("注意")]),s._v(" "),t("p",[s._v("字符串插值所有可用的选项，请参考 "),t("RouterLink",{attrs:{to:"/pages/2850e8/#字符串插值"}},[s._v("字符串插值")]),s._v("。")],1)]),s._v(" "),t("h2",{attrs:{id:"注释"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[s._v("#")]),s._v(" 注释")]),s._v(" "),t("p",[s._v("请将你的代码中的非执行文本注释成提示或者笔记以方便你将来阅读。Swift 的编译器将会在编译代码时自动忽略掉注释部分。")]),s._v(" "),t("p",[s._v("Swift 中的注释与 C 语言的注释非常相似。单行注释以双正斜杠（"),t("code",[s._v("//")]),s._v("）作为起始标记:")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这是一个注释")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("你也可以进行多行注释，其起始标记为单个正斜杠后跟随一个星号（"),t("code",[s._v("/*")]),s._v("），终止标记为一个星号后跟随单个正斜杠（"),t("code",[s._v("*/")]),s._v("）:")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 这也是一个注释，\n但是是多行的 */")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("与 C 语言多行注释不同，Swift 的多行注释可以嵌套在其它的多行注释之中。你可以先生成一个多行注释块，然后在这个注释块之中再嵌套成第二个多行注释。终止注释时先插入第二个注释块的终止标记，然后再插入第一个注释块的终止标记：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 这是第一个多行注释的开头\n/* 这是第二个被嵌套的多行注释 */\n这是第一个多行注释的结尾 */")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("通过运用嵌套多行注释，你可以快速方便的注释掉一大段代码，即使这段代码之中已经含有了多行注释块。")]),s._v(" "),t("h2",{attrs:{id:"分号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分号"}},[s._v("#")]),s._v(" 分号")]),s._v(" "),t("p",[s._v("与其他大部分编程语言不同，Swift 并不强制要求你在每条语句的结尾处使用分号（"),t("code",[s._v(";")]),s._v("），当然，你也可以按照你自己的习惯添加分号。有一种情况下必须要用分号，即你打算在同一行内写多条独立的语句：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" cat "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"🐱"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cat"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出“🐱”")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h2",{attrs:{id:"整数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#整数"}},[s._v("#")]),s._v(" 整数")]),s._v(" "),t("p",[s._v("整数就是没有小数部分的数字，比如 "),t("code",[s._v("42")]),s._v(" 和 "),t("code",[s._v("-23")]),s._v(" 。整数可以是 "),t("code",[s._v("有符号")]),s._v("（正、负、零）或者 "),t("code",[s._v("无符号")]),s._v("（正、零）。")]),s._v(" "),t("p",[s._v("Swift 提供了8、16、32和64位的有符号和无符号整数类型。这些整数类型和 C 语言的命名方式很像，比如8位无符号整数类型是 "),t("code",[s._v("UInt8")]),s._v("，32位有符号整数类型是 "),t("code",[s._v("Int32")]),s._v(" 。就像 Swift 的其他类型一样，整数类型采用大写命名法。")]),s._v(" "),t("h3",{attrs:{id:"整数范围"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#整数范围"}},[s._v("#")]),s._v(" 整数范围")]),s._v(" "),t("p",[s._v("你可以访问不同整数类型的 "),t("code",[s._v("min")]),s._v(" 和 "),t("code",[s._v("max")]),s._v(" 属性来获取对应类型的最小值和最大值：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" minValue "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("UInt8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("min  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// minValue 为 0，是 UInt8 类型")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" maxValue "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("UInt8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("max  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// maxValue 为 255，是 UInt8 类型")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[t("code",[s._v("min")]),s._v(" 和 "),t("code",[s._v("max")]),s._v(" 所传回值的类型，正是其所对的整数类型（如上例 UInt8, 所传回的类型是 UInt8），可用在表达式中相同类型值旁。")]),s._v(" "),t("h3",{attrs:{id:"int"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#int"}},[s._v("#")]),s._v(" Int")]),s._v(" "),t("p",[s._v("一般来说，你不需要专门指定整数的长度。Swift 提供了一个特殊的整数类型 "),t("code",[s._v("Int")]),s._v("，长度与当前平台的原生字长相同：")]),s._v(" "),t("ul",[t("li",[s._v("在32位平台上，"),t("code",[s._v("Int")]),s._v(" 和 "),t("code",[s._v("Int32")]),s._v(" 长度相同。")]),s._v(" "),t("li",[s._v("在64位平台上，"),t("code",[s._v("Int")]),s._v(" 和 "),t("code",[s._v("Int64")]),s._v(" 长度相同。")])]),s._v(" "),t("p",[s._v("除非你需要特定长度的整数，一般来说使用 "),t("code",[s._v("Int")]),s._v(" 就够了。这可以提高代码一致性和可复用性。即使是在32位平台上，"),t("code",[s._v("Int")]),s._v(" 可以存储的整数范围也可以达到 "),t("code",[s._v("-2,147,483,648")]),s._v(" ~ "),t("code",[s._v("2,147,483,647")]),s._v("，大多数时候这已经足够大了。")]),s._v(" "),t("h3",{attrs:{id:"uint"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#uint"}},[s._v("#")]),s._v(" UInt")]),s._v(" "),t("p",[s._v("Swift 也提供了一个特殊的无符号类型 "),t("code",[s._v("UInt")]),s._v("，长度与当前平台的原生字长相同：")]),s._v(" "),t("ul",[t("li",[s._v("在32位平台上，"),t("code",[s._v("UInt")]),s._v(" 和 "),t("code",[s._v("UInt32")]),s._v(" 长度相同。")]),s._v(" "),t("li",[s._v("在64位平台上，"),t("code",[s._v("UInt")]),s._v(" 和 "),t("code",[s._v("UInt64")]),s._v(" 长度相同。")])]),s._v(" "),t("blockquote",[t("p",[s._v("注意")]),s._v(" "),t("p",[s._v("尽量不要使用 "),t("code",[s._v("UInt")]),s._v("，除非你真的需要存储一个和当前平台原生字长相同的无符号整数。除了这种情况，最好使用 "),t("code",[s._v("Int")]),s._v("，即使你要存储的值已知是非负的。统一使用 "),t("code",[s._v("Int")]),s._v(" 可以提高代码的可复用性，避免不同类型数字之间的转换，并且匹配数字的类型推断，请参考 "),t("a",{attrs:{href:"#%E7%B1%BB%E5%9E%8B%E5%AE%89%E5%85%A8%E5%92%8C%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD"}},[s._v("类型安全和类型推断")]),s._v("。")])]),s._v(" "),t("h2",{attrs:{id:"浮点数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浮点数"}},[s._v("#")]),s._v(" 浮点数")]),s._v(" "),t("p",[s._v("浮点数是有小数部分的数字，比如 "),t("code",[s._v("3.14159")]),s._v("、"),t("code",[s._v("0.1")]),s._v(" 和 "),t("code",[s._v("-273.15")]),s._v("。")]),s._v(" "),t("p",[s._v("浮点类型比整数类型表示的范围更大，可以存储比 "),t("code",[s._v("Int")]),s._v(" 类型更大或者更小的数字。Swift 提供了两种有符号浮点数类型：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("Double")]),s._v(" 表示64位浮点数。当你需要存储很大或者很高精度的浮点数时请使用此类型。")]),s._v(" "),t("li",[t("code",[s._v("Float")]),s._v(" 表示32位浮点数。精度要求不高的话可以使用此类型。")])]),s._v(" "),t("blockquote",[t("p",[s._v("注意")]),s._v(" "),t("p",[t("code",[s._v("Double")]),s._v(" 精确度很高，至少有 15 位小数，而 "),t("code",[s._v("Float")]),s._v(" 只有 6 位小数。选择哪个类型取决于你的代码需要处理的值的范围，在两种类型都匹配的情况下，将优先选择 "),t("code",[s._v("Double")]),s._v("。")])]),s._v(" "),t("h2",{attrs:{id:"类型安全和类型推断"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型安全和类型推断"}},[s._v("#")]),s._v(" 类型安全和类型推断")]),s._v(" "),t("p",[s._v("Swift 是一个"),t("em",[s._v("类型安全（type safe）")]),s._v(" 的语言。类型安全的语言可以让你清楚地知道代码要处理的值的类型。如果你的代码需要一个 "),t("code",[s._v("String")]),s._v("，你绝对不可能不小心传进去一个 "),t("code",[s._v("Int")]),s._v("。")]),s._v(" "),t("p",[s._v("由于 Swift 是类型安全的，所以它会在编译你的代码时进行"),t("em",[s._v("类型检查（type checks）")]),s._v(" ，并把不匹配的类型标记为错误。这可以让你在开发的时候尽早发现并修复错误。")]),s._v(" "),t("p",[s._v("当你要处理不同类型的值时，类型检查可以帮你避免错误。然而，这并不是说你每次声明常量和变量的时候都需要显式指定类型。如果你没有显式指定类型，Swift 会使用"),t("em",[s._v("类型推断（type inference）")]),s._v(" 来选择合适的类型。有了类型推断，编译器可以在编译代码的时候自动推断出表达式的类型。原理很简单，只要检查你赋的值即可。")]),s._v(" "),t("p",[s._v("因为有类型推断，和 C 或者 Objective-C 比起来 Swift 很少需要声明类型。常量和变量虽然需要明确类型，但是大部分工作并不需要你自己来完成。")]),s._v(" "),t("p",[s._v("当你声明常量或者变量并赋初值的时候类型推断非常有用。当你在声明常量或者变量的时候赋给它们一个字面量（literal value 或 literal）即可触发类型推断。（字面量就是会直接出现在你代码中的值，比如 "),t("code",[s._v("42")]),s._v(" 和 "),t("code",[s._v("3.14159")]),s._v(" 。）")]),s._v(" "),t("p",[s._v("例如，如果你给一个新常量赋值 "),t("code",[s._v("42")]),s._v(" 并且没有标明类型，Swift 可以推断出常量类型是 "),t("code",[s._v("Int")]),s._v(" ，因为你给它赋的初始值看起来像一个整数：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" meaningOfLife "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// meaningOfLife 会被推测为 Int 类型")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("同理，如果你没有给浮点字面量标明类型，Swift 会推断你想要的是 "),t("code",[s._v("Double")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" pi "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.14159")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// pi 会被推测为 Double 类型")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("当推断浮点数的类型时，Swift 总是会选择 "),t("code",[s._v("Double")]),s._v(" 而不是 "),t("code",[s._v("Float")]),s._v("。")]),s._v(" "),t("p",[s._v("如果表达式中同时出现了整数和浮点数，会被推断为 "),t("code",[s._v("Double")]),s._v(" 类型：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" anotherPi "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.14159")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// anotherPi 会被推测为 Double 类型")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("原始值 "),t("code",[s._v("3")]),s._v(" 没有显式声明类型，而表达式中出现了一个浮点字面量，所以表达式会被推断为 "),t("code",[s._v("Double")]),s._v(" 类型。")]),s._v(" "),t("h2",{attrs:{id:"数值型字面量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数值型字面量"}},[s._v("#")]),s._v(" 数值型字面量")]),s._v(" "),t("p",[s._v("整数字面量可以被写作：")]),s._v(" "),t("ul",[t("li",[s._v("一个"),t("em",[s._v("十进制")]),s._v("数，没有前缀")]),s._v(" "),t("li",[s._v("一个"),t("em",[s._v("二进制")]),s._v("数，前缀是 "),t("code",[s._v("0b")])]),s._v(" "),t("li",[s._v("一个"),t("em",[s._v("八进制")]),s._v("数，前缀是 "),t("code",[s._v("0o")])]),s._v(" "),t("li",[s._v("一个"),t("em",[s._v("十六进制")]),s._v("数，前缀是 "),t("code",[s._v("0x")])])]),s._v(" "),t("p",[s._v("下面的所有整数字面量的十进制值都是 "),t("code",[s._v("17")]),s._v(":")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" decimalInteger "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" binaryInteger "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0b10001")]),s._v("       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 二进制的17")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" octalInteger "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0o21")]),s._v("           "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 八进制的17")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" hexadecimalInteger "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0x11")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 十六进制的17")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("浮点字面量可以是十进制（没有前缀）或者是十六进制（前缀是 "),t("code",[s._v("0x")]),s._v(" ）。小数点两边必须有至少一个十进制数字（或者是十六进制的数字）。十进制浮点数也可以有一个可选的指数（exponent)，通过大写或者小写的 "),t("code",[s._v("e")]),s._v(" 来指定；十六进制浮点数必须有一个指数，通过大写或者小写的 "),t("code",[s._v("p")]),s._v(" 来指定。")]),s._v(" "),t("p",[s._v("如果一个十进制数的指数为 "),t("code",[s._v("exp")]),s._v("，那这个数相当于基数和10^exp 的乘积：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("1.25e2")]),s._v(" 表示 1.25 × 10^2，等于 "),t("code",[s._v("125.0")]),s._v("。")]),s._v(" "),t("li",[t("code",[s._v("1.25e-2")]),s._v(" 表示 1.25 × 10^-2，等于 "),t("code",[s._v("0.0125")]),s._v("。")])]),s._v(" "),t("p",[s._v("如果一个十六进制数的指数为 "),t("code",[s._v("exp")]),s._v("，那这个数相当于基数和2^exp 的乘积：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("0xFp2")]),s._v(" 表示 15 × 2^2，等于 "),t("code",[s._v("60.0")]),s._v("。")]),s._v(" "),t("li",[t("code",[s._v("0xFp-2")]),s._v(" 表示 15 × 2^-2，等于 "),t("code",[s._v("3.75")]),s._v("。")])]),s._v(" "),t("p",[s._v("下面的这些浮点字面量都等于十进制的 "),t("code",[s._v("12.1875")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" decimalDouble "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("12.1875")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" exponentDouble "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.21875e1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" hexadecimalDouble "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0xC.3p0")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("数值类字面量可以包括额外的格式来增强可读性。整数和浮点数都可以添加额外的零并且包含下划线，并不会影响字面量：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" paddedDouble "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("000123.456")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" oneMillion "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1_000_000")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" justOverOneMillion "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1_000_000.000_000_1")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h2",{attrs:{id:"数值型类型转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数值型类型转换"}},[s._v("#")]),s._v(" 数值型类型转换")]),s._v(" "),t("p",[s._v("通常来讲，即使代码中的整数常量和变量已知非负，也请使用 "),t("code",[s._v("Int")]),s._v(" 类型。总是使用默认的整数类型可以保证你的整数常量和变量可以直接被复用并且可以匹配整数类字面量的类型推断。")]),s._v(" "),t("p",[s._v("只有在必要的时候才使用其他整数类型，比如要处理外部的长度明确的数据或者为了优化性能、内存占用等等。使用显式指定长度的类型可以及时发现值溢出并且可以暗示正在处理特殊数据。")]),s._v(" "),t("h3",{attrs:{id:"整数转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#整数转换"}},[s._v("#")]),s._v(" 整数转换")]),s._v(" "),t("p",[s._v("不同整数类型的变量和常量可以存储不同范围的数字。"),t("code",[s._v("Int8")]),s._v(" 类型的常量或者变量可以存储的数字范围是 "),t("code",[s._v("-128")]),s._v("~"),t("code",[s._v("127")]),s._v("，而 "),t("code",[s._v("UInt8")]),s._v(" 类型的常量或者变量能存储的数字范围是 "),t("code",[s._v("0")]),s._v("~"),t("code",[s._v("255")]),s._v("。如果数字超出了常量或者变量可存储的范围，编译的时候会报错：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" cannotBeNegative"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("UInt8")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// UInt8 类型不能存储负数，所以会报错")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" tooBig"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Int8")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Int8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("max "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Int8 类型不能存储超过最大值的数，所以会报错")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("由于每种整数类型都可以存储不同范围的值，所以你必须根据不同情况选择性使用数值型类型转换。这种选择性使用的方式，可以预防隐式转换的错误并让你的代码中的类型转换意图变得清晰。")]),s._v(" "),t("p",[s._v("要将一种数字类型转换成另一种，你要用当前值来初始化一个期望类型的新数字，这个数字的类型就是你的目标类型。在下面的例子中，常量 "),t("code",[s._v("twoThousand")]),s._v(" 是 "),t("code",[s._v("UInt16")]),s._v(" 类型，然而常量 "),t("code",[s._v("one")]),s._v(" 是 "),t("code",[s._v("UInt8")]),s._v(" 类型。它们不能直接相加，因为它们类型不同。所以要调用 "),t("code",[s._v("UInt16(one)")]),s._v(" 来创建一个新的 "),t("code",[s._v("UInt16")]),s._v(" 数字并用 "),t("code",[s._v("one")]),s._v(" 的值来初始化，然后使用这个新数字来计算：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" twoThousand"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("UInt16")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2_000")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" one"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("UInt8")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" twoThousandAndOne "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" twoThousand "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("UInt16")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("one"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("现在两个数字的类型都是 "),t("code",[s._v("UInt16")]),s._v("，可以进行相加。目标常量 "),t("code",[s._v("twoThousandAndOne")]),s._v(" 的类型被推断为 "),t("code",[s._v("UInt16")]),s._v("，因为它是两个 "),t("code",[s._v("UInt16")]),s._v(" 值的和。")]),s._v(" "),t("p",[t("code",[s._v("SomeType(ofInitialValue)")]),s._v(" 是调用 Swift 构造器并传入一个初始值的默认方法。在语言内部，"),t("code",[s._v("UInt16")]),s._v(" 有一个构造器，可以接受一个 "),t("code",[s._v("UInt8")]),s._v(" 类型的值，所以这个构造器可以用现有的 "),t("code",[s._v("UInt8")]),s._v(" 来创建一个新的 "),t("code",[s._v("UInt16")]),s._v("。注意，你并不能传入任意类型的值，只能传入 "),t("code",[s._v("UInt16")]),s._v(" 内部有对应构造器的值。不过你可以扩展现有的类型来让它可以接收其他类型的值（包括自定义类型），请参考 "),t("RouterLink",{attrs:{to:"/pages/297d1c/"}},[s._v("扩展")]),s._v("。")],1),s._v(" "),t("h3",{attrs:{id:"整数和浮点数转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#整数和浮点数转换"}},[s._v("#")]),s._v(" 整数和浮点数转换")]),s._v(" "),t("p",[s._v("整数和浮点数的转换必须显式指定类型：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" three "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" pointOneFourOneFiveNine "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.14159")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" pi "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Double")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("three"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" pointOneFourOneFiveNine\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// pi 等于 3.14159，所以被推测为 Double 类型")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("这个例子中，常量 "),t("code",[s._v("three")]),s._v(" 的值被用来创建一个 "),t("code",[s._v("Double")]),s._v(" 类型的值，所以加号两边的数类型须相同。如果不进行转换，两者无法相加。")]),s._v(" "),t("p",[s._v("浮点数到整数的反向转换同样行，整数类型可以用 "),t("code",[s._v("Double")]),s._v(" 或者 "),t("code",[s._v("Float")]),s._v(" 类型来初始化：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" integerPi "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pi"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// integerPi 等于 3，所以被推测为 Int 类型")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("当用这种方式来初始化一个新的整数值时，浮点值会被截断。也就是说 "),t("code",[s._v("4.75")]),s._v(" 会变成 "),t("code",[s._v("4")]),s._v("，"),t("code",[s._v("-3.9")]),s._v(" 会变成 "),t("code",[s._v("-3")]),s._v("。")]),s._v(" "),t("blockquote",[t("p",[s._v("注意")]),s._v(" "),t("p",[s._v("结合数字类常量和变量不同于结合数字类字面量。字面量 "),t("code",[s._v("3")]),s._v(" 可以直接和字面量 "),t("code",[s._v("0.14159")]),s._v(" 相加，因为数字字面量本身没有明确的类型。它们的类型只在编译器需要求值的时候被推测。")])]),s._v(" "),t("h2",{attrs:{id:"类型别名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型别名"}},[s._v("#")]),s._v(" 类型别名")]),s._v(" "),t("p",[t("em",[s._v("类型别名（type aliases）")]),s._v(" 就是给现有类型定义另一个名字。你可以使用 "),t("code",[s._v("typealias")]),s._v(" 关键字来定义类型别名。")]),s._v(" "),t("p",[s._v("当你想要给现有类型起一个更有意义的名字时，类型别名非常有用。假设你正在处理特定长度的外部资源的数据：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typealias")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AudioSample")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("UInt16")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("定义了一个类型别名之后，你可以在任何使用原始名的地方使用别名：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" maxAmplitudeFound "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AudioSample")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("min\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// maxAmplitudeFound 现在是 0")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("本例中，"),t("code",[s._v("AudioSample")]),s._v(" 被定义为 "),t("code",[s._v("UInt16")]),s._v(" 的一个别名。因为它是别名，"),t("code",[s._v("AudioSample.min")]),s._v(" 实际上是 "),t("code",[s._v("UInt16.min")]),s._v("，所以会给 "),t("code",[s._v("maxAmplitudeFound")]),s._v(" 赋一个初值 "),t("code",[s._v("0")]),s._v("。")]),s._v(" "),t("h2",{attrs:{id:"布尔值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#布尔值"}},[s._v("#")]),s._v(" 布尔值")]),s._v(" "),t("p",[s._v("Swift 有一个基本的"),t("em",[s._v("布尔（Boolean）类型")]),s._v("，叫做 "),t("code",[s._v("Bool")]),s._v("。布尔值指"),t("em",[s._v("逻辑")]),s._v("上的值，因为它们只能是真或者假。Swift 有两个布尔常量，"),t("code",[s._v("true")]),s._v(" 和 "),t("code",[s._v("false")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" orangesAreOrange "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" turnipsAreDelicious "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[t("code",[s._v("orangesAreOrange")]),s._v(" 和 "),t("code",[s._v("turnipsAreDelicious")]),s._v(" 的类型会被推断为 "),t("code",[s._v("Bool")]),s._v("，因为它们的初值是布尔字面量。就像之前提到的 "),t("code",[s._v("Int")]),s._v(" 和 "),t("code",[s._v("Double")]),s._v(" 一样，如果你创建变量的时候给它们赋值 "),t("code",[s._v("true")]),s._v(" 或者 "),t("code",[s._v("false")]),s._v("，那你不需要将常量或者变量声明为 "),t("code",[s._v("Bool")]),s._v(" 类型。初始化常量或者变量的时候如果所赋的值类型已知，就可以触发类型推断，这让 Swift 代码更加简洁并且可读性更高。")]),s._v(" "),t("p",[s._v("当你编写条件语句比如 "),t("code",[s._v("if")]),s._v(" 语句的时候，布尔值非常有用：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" turnipsAreDelicious "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Mmm, tasty turnips!"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Eww, turnips are horrible."')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出“Eww, turnips are horrible.”")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("条件语句，例如 "),t("code",[s._v("if")]),s._v("，请参考 #"),t("RouterLink",{attrs:{to:"/pages/544cb0/"}},[s._v("控制流")]),s._v("。")],1),s._v(" "),t("p",[s._v("如果你在需要使用 "),t("code",[s._v("Bool")]),s._v(" 类型的地方使用了非布尔值，Swift 的类型安全机制会报错。下面的例子会报告一个编译时错误：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这个例子不会通过编译，会报错")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("然而，下面的例子是合法的：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这个例子会编译成功")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[t("code",[s._v("i == 1")]),s._v(" 的比较结果是 "),t("code",[s._v("Bool")]),s._v(" 类型，所以第二个例子可以通过类型检查。类似 "),t("code",[s._v("i == 1")]),s._v(" 这样的比较，请参考 "),t("RouterLink",{attrs:{to:"/pages/279dd7/"}},[s._v("基本运算符")]),s._v("。")],1),s._v(" "),t("p",[s._v("和 Swift 中的其他类型安全的例子一样，这个方法可以避免错误并保证这块代码的意图总是清晰的。")]),s._v(" "),t("h2",{attrs:{id:"元组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#元组"}},[s._v("#")]),s._v(" 元组")]),s._v(" "),t("p",[t("em",[s._v("元组（tuples）")]),s._v(" 把多个值组合成一个复合值。元组内的值可以是任意类型，并不要求是相同类型。")]),s._v(" "),t("p",[s._v("下面这个例子中，"),t("code",[s._v('(404, "Not Found")')]),s._v(" 是一个描述 "),t("em",[s._v("HTTP 状态码（HTTP status code）")]),s._v(" 的元组。HTTP 状态码是当你请求网页的时候 web 服务器返回的一个特殊值。如果你请求的网页不存在就会返回一个 "),t("code",[s._v("404 Not Found")]),s._v(" 状态码。")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" http404Error "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("404")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Not Found"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// http404Error 的类型是 (Int, String)，值是 (404, "Not Found")')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[t("code",[s._v('(404, "Not Found")')]),s._v(" 元组把一个 "),t("code",[s._v("Int")]),s._v(" 值和一个 "),t("code",[s._v("String")]),s._v(" 值组合起来表示 HTTP 状态码的两个部分：一个数字和一个人类可读的描述。这个元组可以被描述为“一个类型为 "),t("code",[s._v("(Int, String)")]),s._v(" 的元组”。")]),s._v(" "),t("p",[s._v("你可以把任意顺序的类型组合成一个元组，这个元组可以包含所有类型。只要你想，你可以创建一个类型为 "),t("code",[s._v("(Int, Int, Int)")]),s._v(" 或者 "),t("code",[s._v("(String, Bool)")]),s._v(" 或者其他任何你想要的组合的元组。")]),s._v(" "),t("p",[s._v("你可以将一个元组的内容分解（decompose）成单独的常量和变量，然后你就可以正常使用它们了：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("statusCode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" statusMessage"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" http404Error\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"The status code is ')]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("statusCode")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出“The status code is 404”")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"The status message is ')]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("statusMessage")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出“The status message is Not Found”")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("如果你只需要一部分元组值，分解的时候可以把要忽略的部分用下划线（"),t("code",[s._v("_")]),s._v("）标记：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("justTheStatusCode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token omit keyword"}},[s._v("_")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" http404Error\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"The status code is ')]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("justTheStatusCode")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出“The status code is 404”")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("此外，你还可以通过下标来访问元组中的单个元素，下标从零开始：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"The status code is ')]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("http404Error"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")])]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出“The status code is 404”")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"The status message is ')]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("http404Error"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")])]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出“The status message is Not Found”")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("你可以在定义元组的时候给单个元素命名：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" http200Status "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("statusCode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" description"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"OK"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("给元组中的元素命名后，你可以通过名字来获取这些元素的值：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"The status code is ')]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("http200Status"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("statusCode")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出“The status code is 200”")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"The status message is ')]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("http200Status"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("description")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出“The status message is OK”")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("作为函数返回值时，元组非常有用。一个用来获取网页的函数可能会返回一个 "),t("code",[s._v("(Int, String)")]),s._v(" 元组来描述是否获取成功。和只能返回一个类型的值比较起来，一个包含两个不同类型值的元组可以让函数的返回信息更有用。请参考 "),t("RouterLink",{attrs:{to:"/pages/b69d99/#函数参数与返回值"}},[s._v("函数参数与返回值")]),s._v("。")],1),s._v(" "),t("blockquote",[t("p",[s._v("注意")]),s._v(" "),t("p",[s._v("当遇到一些相关值的简单分组时，元组是很有用的。元组不适合用来创建复杂的数据结构。如果你的数据结构比较复杂，不要使用元组，用类或结构体去建模。欲获得更多信息，请参考 "),t("RouterLink",{attrs:{to:"/pages/0641bb/"}},[s._v("类和结构体")]),s._v("。")],1)]),s._v(" "),t("h2",{attrs:{id:"可选类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可选类型"}},[s._v("#")]),s._v(" 可选类型")]),s._v(" "),t("p",[s._v("使用"),t("em",[s._v("可选类型（optionals）")]),s._v(" 来处理值可能缺失的情况。可选类型表示两种可能： 或者有值， 你可以解析可选类型访问这个值， 或者根本没有值。")]),s._v(" "),t("blockquote",[t("p",[s._v("注意")]),s._v(" "),t("p",[s._v("C 和 Objective-C 中并没有可选类型这个概念。最接近的是 Objective-C 中的一个特性，一个方法要不返回一个对象要不返回 "),t("code",[s._v("nil")]),s._v("，"),t("code",[s._v("nil")]),s._v(" 表示“缺少一个合法的对象”。然而，这只对对象起作用——对于结构体，基本的 C 类型或者枚举类型不起作用。对于这些类型，Objective-C 方法一般会返回一个特殊值（比如 "),t("code",[s._v("NSNotFound")]),s._v("）来暗示值缺失。这种方法假设方法的调用者知道并记得对特殊值进行判断。然而，Swift 的可选类型可以让你暗示"),t("em",[s._v("任意类型")]),s._v("的值缺失，并不需要一个特殊值。")])]),s._v(" "),t("p",[s._v("来看一个例子。Swift 的 "),t("code",[s._v("Int")]),s._v(" 类型有一种构造器，作用是将一个 "),t("code",[s._v("String")]),s._v(" 值转换成一个 "),t("code",[s._v("Int")]),s._v(" 值。然而，并不是所有的字符串都可以转换成一个整数。字符串 "),t("code",[s._v('"123"')]),s._v(" 可以被转换成数字 "),t("code",[s._v("123")]),s._v(" ，但是字符串 "),t("code",[s._v('"hello, world"')]),s._v(" 不行。")]),s._v(" "),t("p",[s._v("下面的例子使用这种构造器来尝试将一个 "),t("code",[s._v("String")]),s._v(" 转换成 "),t("code",[s._v("Int")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" possibleNumber "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"123"')])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" convertedNumber "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("possibleNumber"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// convertedNumber 被推测为类型 "Int?"， 或者类型 "optional Int"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("因为该构造器可能会失败，所以它返回一个"),t("em",[s._v("可选类型")]),s._v("（optional）"),t("code",[s._v("Int")]),s._v("，而不是一个 "),t("code",[s._v("Int")]),s._v("。一个可选的 "),t("code",[s._v("Int")]),s._v(" 被写作 "),t("code",[s._v("Int?")]),s._v(" 而不是 "),t("code",[s._v("Int")]),s._v("。问号暗示包含的值是可选类型，也就是说可能包含 "),t("code",[s._v("Int")]),s._v(" 值也可能"),t("em",[s._v("不包含值")]),s._v("。（不能包含其他任何值比如 "),t("code",[s._v("Bool")]),s._v(" 值或者 "),t("code",[s._v("String")]),s._v(" 值。只能是 "),t("code",[s._v("Int")]),s._v(" 或者什么都没有。）")]),s._v(" "),t("h3",{attrs:{id:"nil"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nil"}},[s._v("#")]),s._v(" nil")]),s._v(" "),t("p",[s._v("你可以给可选变量赋值为 "),t("code",[s._v("nil")]),s._v(" 来表示它没有值：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" serverResponseCode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Int")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("404")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// serverResponseCode 包含一个可选的 Int 值 404")]),s._v("\nserverResponseCode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token nil constant"}},[s._v("nil")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// serverResponseCode 现在不包含值")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("blockquote",[t("p",[s._v("注意")]),s._v(" "),t("p",[t("code",[s._v("nil")]),s._v(" 不能用于非可选的常量和变量。如果你的代码中有常量或者变量需要处理值缺失的情况，请把它们声明成对应的可选类型。")])]),s._v(" "),t("p",[s._v("如果你声明一个可选常量或者变量但是没有赋值，它们会自动被设置为 "),t("code",[s._v("nil")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" surveyAnswer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// surveyAnswer 被自动设置为 nil")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("blockquote",[t("p",[s._v("注意")]),s._v(" "),t("p",[s._v("Swift 的 "),t("code",[s._v("nil")]),s._v(" 和 Objective-C 中的 "),t("code",[s._v("nil")]),s._v(" 并不一样。在 Objective-C 中，"),t("code",[s._v("nil")]),s._v(" 是一个指向不存在对象的指针。在 Swift 中，"),t("code",[s._v("nil")]),s._v(" 不是指针——它是一个确定的值，用来表示值缺失。任何类型的可选状态都可以被设置为 "),t("code",[s._v("nil")]),s._v("，不只是对象类型。")])]),s._v(" "),t("h3",{attrs:{id:"if-语句以及强制解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#if-语句以及强制解析"}},[s._v("#")]),s._v(" if 语句以及强制解析")]),s._v(" "),t("p",[s._v("你可以使用 "),t("code",[s._v("if")]),s._v(" 语句和 "),t("code",[s._v("nil")]),s._v(" 比较来判断一个可选值是否包含值。你可以使用“相等”("),t("code",[s._v("==")]),s._v(")或“不等”("),t("code",[s._v("!=")]),s._v(")来执行比较。")]),s._v(" "),t("p",[s._v("如果可选类型有值，它将不等于 "),t("code",[s._v("nil")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" convertedNumber "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token nil constant"}},[s._v("nil")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"convertedNumber contains some integer value."')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出“convertedNumber contains some integer value.”")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("当你确定可选类型确实包含值之后，你可以在可选的名字后面加一个感叹号（"),t("code",[s._v("!")]),s._v("）来获取值。这个惊叹号表示“我知道这个可选有值，请使用它。”这被称为可选值的"),t("em",[s._v("强制解析（forced unwrapping）")]),s._v(" ：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" convertedNumber "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token nil constant"}},[s._v("nil")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"convertedNumber has an integer value of ')]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("convertedNumber"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")])]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('."')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出“convertedNumber has an integer value of 123.”")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("更多关于 "),t("code",[s._v("if")]),s._v(" 语句的内容，请参考 #"),t("RouterLink",{attrs:{to:"/pages/544cb0/"}},[s._v("控制流")]),s._v("。")],1),s._v(" "),t("blockquote",[t("p",[s._v("注意")]),s._v(" "),t("p",[s._v("使用 "),t("code",[s._v("!")]),s._v(" 来获取一个不存在的可选值会导致运行时错误。使用 "),t("code",[s._v("!")]),s._v(" 来强制解析值之前，一定要确定可选包含一个非 "),t("code",[s._v("nil")]),s._v(" 的值。")])]),s._v(" "),t("h3",{attrs:{id:"可选绑定"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可选绑定"}},[s._v("#")]),s._v(" 可选绑定")]),s._v(" "),t("p",[s._v("使用"),t("em",[s._v("可选绑定（optional binding）")]),s._v(" 来判断可选类型是否包含值，如果包含就把值赋给一个临时常量或者变量。可选绑定可以用在 "),t("code",[s._v("if")]),s._v(" 和 "),t("code",[s._v("while")]),s._v(" 语句中，这条语句不仅可以用来判断可选类型中是否有值，同时可以将可选类型中的值赋给一个常量或者变量。"),t("code",[s._v("if")]),s._v(" 和 "),t("code",[s._v("while")]),s._v(" 语句，请参考 #"),t("RouterLink",{attrs:{to:"/pages/544cb0/"}},[s._v("控制流")]),s._v("。")],1),s._v(" "),t("p",[s._v("像下面这样在 "),t("code",[s._v("if")]),s._v(" 语句中写一个可选绑定：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" constantName "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" someOptional "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    statements\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("你可以像上面这样使用可选绑定来重写 在 "),t("a",{attrs:{href:"#%E5%8F%AF%E9%80%89%E7%B1%BB%E5%9E%8B"}},[s._v("可选类型")]),s._v(" 举出的 "),t("code",[s._v("possibleNumber")]),s._v(" 例子：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" actualNumber "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("possibleNumber"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"\\'")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("possibleNumber")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\\' has an integer value of ")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("actualNumber")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"\\'")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("possibleNumber")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\\' could not be converted to an integer\"")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出“'123' has an integer value of 123”")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("这段代码可以被理解为：")]),s._v(" "),t("p",[s._v("“如果 "),t("code",[s._v("Int(possibleNumber)")]),s._v(" 返回的可选 "),t("code",[s._v("Int")]),s._v(" 包含一个值，创建一个叫做 "),t("code",[s._v("actualNumber")]),s._v(" 的新常量并将可选包含的值赋给它。”")]),s._v(" "),t("p",[s._v("如果转换成功，"),t("code",[s._v("actualNumber")]),s._v(" 常量可以在 "),t("code",[s._v("if")]),s._v(" 语句的第一个分支中使用。它已经被可选类型 "),t("em",[s._v("包含的")]),s._v(" 值初始化过，所以不需要再使用 "),t("code",[s._v("!")]),s._v(" 后缀来获取它的值。在这个例子中，"),t("code",[s._v("actualNumber")]),s._v(" 只被用来输出转换结果。")]),s._v(" "),t("p",[s._v("你可以在可选绑定中使用常量和变量。如果你想在 "),t("code",[s._v("if")]),s._v(" 语句的第一个分支中操作 "),t("code",[s._v("actualNumber")]),s._v(" 的值，你可以改成 "),t("code",[s._v("if var actualNumber")]),s._v("，这样可选类型包含的值就会被赋给一个变量而非常量。")]),s._v(" "),t("p",[s._v("你可以包含多个可选绑定或多个布尔条件在一个 "),t("code",[s._v("if")]),s._v(" 语句中，只要使用逗号分开就行。只要有任意一个可选绑定的值为 "),t("code",[s._v("nil")]),s._v("，或者任意一个布尔条件为 "),t("code",[s._v("false")]),s._v("，则整个 "),t("code",[s._v("if")]),s._v(" 条件判断为 "),t("code",[s._v("false")]),s._v("。下面的两个 "),t("code",[s._v("if")]),s._v(" 语句是等价的：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" firstNumber "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"4"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" secondNumber "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"42"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" firstNumber "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" secondNumber "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" secondNumber "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"')]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("firstNumber")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v(" < ")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("secondNumber")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v(' < 100"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出“4 < 42 < 100”")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" firstNumber "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"4"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" secondNumber "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"42"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" firstNumber "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" secondNumber "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" secondNumber "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"')]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("firstNumber")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v(" < ")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("secondNumber")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v(' < 100"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出“4 < 42 < 100”")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("blockquote",[t("p",[s._v("注意")]),s._v(" "),t("p",[s._v("在 "),t("code",[s._v("if")]),s._v(" 条件语句中使用常量和变量来创建一个可选绑定，仅在 "),t("code",[s._v("if")]),s._v(" 语句的句中（"),t("code",[s._v("body")]),s._v("）中才能获取到值。相反，在 "),t("code",[s._v("guard")]),s._v(" 语句中使用常量和变量来创建一个可选绑定，仅在 "),t("code",[s._v("guard")]),s._v(" 语句外且在语句后才能获取到值，请参考 "),t("RouterLink",{attrs:{to:"/pages/544cb0/#提前退出"}},[s._v("提前退出")]),s._v("。")],1)]),s._v(" "),t("h3",{attrs:{id:"隐式解析可选类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#隐式解析可选类型"}},[s._v("#")]),s._v(" 隐式解析可选类型")]),s._v(" "),t("p",[s._v("如上所述，可选类型暗示了常量或者变量可以“没有值”。可选可以通过 "),t("code",[s._v("if")]),s._v(" 语句来判断是否有值，如果有值的话可以通过可选绑定来解析值。")]),s._v(" "),t("p",[s._v("有时候在程序架构中，第一次被赋值之后，可以确定一个可选类型"),t("em",[s._v("总会")]),s._v("有值。在这种情况下，每次都要判断和解析可选值是非常低效的，因为可以确定它总会有值。")]),s._v(" "),t("p",[s._v("这种类型的可选状态被定义为隐式解析可选类型（implicitly unwrapped optionals）。把想要用作可选的类型的后面的问号（"),t("code",[s._v("String?")]),s._v("）改成感叹号（"),t("code",[s._v("String!")]),s._v("）来声明一个隐式解析可选类型。与其在使用时把感叹号放在可选类型的名称的后面，你可以在定义它时，直接把感叹号放在可选类型的后面。")]),s._v(" "),t("p",[s._v("当可选类型被第一次赋值之后就可以确定之后一直有值的时候，隐式解析可选类型非常有用。隐式解析可选类型主要被用在 Swift 中类的构造过程中，请参考 "),t("RouterLink",{attrs:{to:"/pages/51a2dd/#无主引用和隐式解析可选属性"}},[s._v("无主引用和隐式解析可选属性")]),s._v("。")],1),s._v(" "),t("p",[s._v("一个隐式解析可选类型其实就是一个普通的可选类型，但是可以被当做非可选类型来使用，并不需要每次都使用解析来获取可选值。下面的例子展示了可选类型 "),t("code",[s._v("String")]),s._v(" 和隐式解析可选类型 "),t("code",[s._v("String")]),s._v(" 之间的区别：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" possibleString"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"An optional string."')])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" forcedString"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" possibleString"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 需要感叹号来获取值")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" assumedString"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"An implicitly unwrapped optional string."')])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" implicitString"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" assumedString  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 不需要感叹号")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("你可以把隐式解析可选类型当做一个可以自动解析的可选类型。当你使用一个隐式解析可选值时，Swift 首先会把它当作普通的可选值；如果它不能被当成可选类型使用，Swift 会强制解析可选值。在以上的代码中，可选值 "),t("code",[s._v("assumedString")]),s._v(" 在把自己的值赋给 "),t("code",[s._v("implicitString")]),s._v(" 之前会被强制解析，原因是 "),t("code",[s._v("implicitString")]),s._v(" 本身的类型是非可选类型的 "),t("code",[s._v("String")]),s._v("。在下面的代码中，"),t("code",[s._v("optionalString")]),s._v(" 并没有显式的数据类型。那么根据类型推断，它就是一个普通的可选类型。")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" optionalString "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" assumedString\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// optionalString 的类型是 "String?"，assumedString 也没有被强制解析。')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("如果你在隐式解析可选类型没有值的时候尝试取值，会触发运行时错误。和你在没有值的普通可选类型后面加一个感叹号一样。")]),s._v(" "),t("p",[s._v("你可以把隐式解析可选类型当做普通可选类型来判断它是否包含值：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" assumedString "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token nil constant"}},[s._v("nil")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("assumedString"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出“An implicitly unwrapped optional string.”")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("你也可以在可选绑定中使用隐式解析可选类型来检查并解析它的值：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" definiteString "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" assumedString "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("definiteString"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出“An implicitly unwrapped optional string.”")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("blockquote",[t("p",[s._v("注意")]),s._v(" "),t("p",[s._v("如果一个变量之后可能变成 "),t("code",[s._v("nil")]),s._v(" 的话请不要使用隐式解析可选类型。如果你需要在变量的生命周期中判断是否是 "),t("code",[s._v("nil")]),s._v(" 的话，请使用普通可选类型。")])]),s._v(" "),t("h2",{attrs:{id:"错误处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#错误处理"}},[s._v("#")]),s._v(" 错误处理")]),s._v(" "),t("p",[s._v("你可以使用 "),t("em",[s._v("错误处理（error handling）")]),s._v(" 来应对程序执行中可能会遇到的错误条件。")]),s._v(" "),t("p",[s._v("相对于可选中运用值的存在与缺失来表达函数的成功与失败，错误处理可以推断失败的原因，并传播至程序的其他部分。")]),s._v(" "),t("p",[s._v("当一个函数遇到错误条件，它能报错。调用函数的地方能抛出错误消息并合理处理。")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("canThrowAnError")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这个函数有可能抛出错误")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("一个函数可以通过在声明中添加 "),t("code",[s._v("throws")]),s._v(" 关键词来抛出错误消息。当你的函数能抛出错误消息时，你应该在表达式中前置 "),t("code",[s._v("try")]),s._v(" 关键词。")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("canThrowAnError")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 没有错误消息抛出")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 有一个错误消息抛出")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("一个 "),t("code",[s._v("do")]),s._v(" 语句创建了一个新的包含作用域，使得错误能被传播到一个或多个 "),t("code",[s._v("catch")]),s._v(" 从句。")]),s._v(" "),t("p",[s._v("这里有一个错误处理如何用来应对不同错误条件的例子。")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("makeASandwich")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("makeASandwich")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("eatASandwich")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SandwichError")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("outOfCleanDishes "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("washDishes")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SandwichError")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("missingIngredients")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" ingredients"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("buyGroceries")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ingredients"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("在此例中，"),t("code",[s._v("makeASandwich()")]),s._v("（做一个三明治）函数会抛出一个错误消息如果没有干净的盘子或者某个原料缺失。因为 "),t("code",[s._v("makeASandwich()")]),s._v(" 抛出错误，函数调用被包裹在 "),t("code",[s._v("try")]),s._v(" 表达式中。将函数包裹在一个 "),t("code",[s._v("do")]),s._v(" 语句中，任何被抛出的错误会被传播到提供的 "),t("code",[s._v("catch")]),s._v(" 从句中。")]),s._v(" "),t("p",[s._v("如果没有错误被抛出，"),t("code",[s._v("eatASandwich()")]),s._v(" 函数会被调用。如果一个匹配 "),t("code",[s._v("SandwichError.outOfCleanDishes")]),s._v(" 的错误被抛出，"),t("code",[s._v("washDishes()")]),s._v(" 函数会被调用。如果一个匹配 "),t("code",[s._v("SandwichError.missingIngredients")]),s._v(" 的错误被抛出，"),t("code",[s._v("buyGroceries(_:)")]),s._v(" 函数会被调用，并且使用 "),t("code",[s._v("catch")]),s._v(" 所捕捉到的关联值 "),t("code",[s._v("[String]")]),s._v(" 作为参数。")]),s._v(" "),t("p",[s._v("抛出，捕捉，以及传播错误会在 "),t("RouterLink",{attrs:{to:"/pages/cc5b2d/"}},[s._v("错误处理")]),s._v(" 章节详细说明。")],1),s._v(" "),t("h2",{attrs:{id:"断言和先决条件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#断言和先决条件"}},[s._v("#")]),s._v(" 断言和先决条件")]),s._v(" "),t("p",[s._v("断言和先决条件是在运行时所做的检查。你可以用他们来检查在执行后续代码之前是否一个必要的条件已经被满足了。如果断言或者先决条件中的布尔条件评估的结果为 true（真），则代码像往常一样继续执行。如果布尔条件评估结果为 false（假），程序的当前状态是无效的，则代码执行结束，应用程序中止。")]),s._v(" "),t("p",[s._v("你使用断言和先决条件来表达你所做的假设和你在编码时候的期望。你可以将这些包含在你的代码中。断言帮助你在开发阶段找到错误和不正确的假设，先决条件帮助你在生产环境中探测到存在的问题。")]),s._v(" "),t("p",[s._v("除了在运行时验证你的期望值，断言和先决条件也变成了一个在你的代码中的有用的文档形式。和在上面讨论过的 "),t("RouterLink",{attrs:{to:"/pages/cc5b2d/"}},[s._v("错误处理")]),s._v(" 不同，断言和先决条件并不是用来处理可以恢复的或者可预期的错误。因为一个断言失败表明了程序正处于一个无效的状态，没有办法去捕获一个失败的断言。")],1),s._v(" "),t("p",[s._v("使用断言和先决条件不是一个能够避免出现程序出现无效状态的编码方法。然而，如果一个无效状态程序产生了，断言和先决条件可以强制检查你的数据和程序状态，使得你的程序可预测的中止（译者：不是系统强制的，被动的中止），并帮助使这个问题更容易调试。一旦探测到无效的状态，执行则被中止，防止无效的状态导致的进一步对于系统的伤害。")]),s._v(" "),t("p",[s._v("断言和先决条件的不同点是，他们什么时候进行状态检测：断言仅在调试环境运行，而先决条件则在调试环境和生产环境中运行。在生产环境中，断言的条件将不会进行评估。这个意味着你可以使用很多断言在你的开发阶段，但是这些断言在生产环境中不会产生任何影响。")]),s._v(" "),t("h3",{attrs:{id:"使用断言进行调试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用断言进行调试"}},[s._v("#")]),s._v(" 使用断言进行调试")]),s._v(" "),t("p",[s._v("你可以调用 Swift 标准库的 "),t("code",[s._v("assert(_:_:file:line:)")]),s._v(" 函数来写一个断言。向这个函数传入一个结果为 "),t("code",[s._v("true")]),s._v(" 或者 "),t("code",[s._v("false")]),s._v(" 的表达式以及一条信息，当表达式的结果为 "),t("code",[s._v("false")]),s._v(" 的时候这条信息会被显示：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("assert")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"A person\'s age cannot be less than zero"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 因为 age < 0，所以断言会触发")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("在这个例子中，只有 "),t("code",[s._v("age >= 0")]),s._v(" 为 "),t("code",[s._v("true")]),s._v(" 时，即 "),t("code",[s._v("age")]),s._v(" 的值非负的时候，代码才会继续执行。如果 "),t("code",[s._v("age")]),s._v(" 的值是负数，就像代码中那样，"),t("code",[s._v("age >= 0")]),s._v(" 为 "),t("code",[s._v("false")]),s._v("，断言被触发，终止应用。")]),s._v(" "),t("p",[s._v("如果不需要断言信息，可以就像这样忽略掉：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("assert")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("如果代码已经检查了条件，你可以使用 "),t("code",[s._v("assertionFailure(_:file:line:)")]),s._v(" 函数来表明断言失败了，例如：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"You can ride the roller-coaster or the ferris wheel."')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"You can ride the ferris wheel."')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("assertionFailure")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"A person's age can't be less than zero.\"")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h3",{attrs:{id:"强制执行先决条件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#强制执行先决条件"}},[s._v("#")]),s._v(" 强制执行先决条件")]),s._v(" "),t("p",[s._v("当一个条件可能为假，但是继续执行代码要求条件必须为真的时候，需要使用先决条件。例如使用先决条件来检查是否下标越界，或者来检查是否将一个正确的参数传给函数。")]),s._v(" "),t("p",[s._v("你可以使用全局 "),t("code",[s._v("precondition(_:_:file:line:)")]),s._v(" 函数来写一个先决条件。向这个函数传入一个结果为 "),t("code",[s._v("true")]),s._v(" 或者 "),t("code",[s._v("false")]),s._v(" 的表达式以及一条信息，当表达式的结果为 "),t("code",[s._v("false")]),s._v(" 的时候这条信息会被显示：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在一个下标的实现里...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("precondition")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("index "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Index must be greater than zero."')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("你可以调用 "),t("code",[s._v("preconditionFailure(_:file:line:)")]),s._v(" 方法来表明出现了一个错误，例如，switch 进入了 default 分支，但是所有的有效值应该被任意一个其他分支（非 default 分支）处理。")]),s._v(" "),t("blockquote",[t("p",[s._v("注意")]),s._v(" "),t("p",[s._v("如果你使用 unchecked 模式（-Ounchecked）编译代码，先决条件将不会进行检查。编译器假设所有的先决条件总是为 true（真），他将优化你的代码。然而，"),t("code",[s._v("fatalError(_:file:line:)")]),s._v(" 函数总是中断执行，无论你怎么进行优化设定。")]),s._v(" "),t("p",[s._v("你能使用 "),t("code",[s._v("fatalError(_:file:line:)")]),s._v(' 函数在设计原型和早期开发阶段，这个阶段只有方法的声明，但是没有具体实现，你可以在方法体中写上 fatalError("Unimplemented")作为具体实现。因为 fatalError 不会像断言和先决条件那样被优化掉，所以你可以确保当代码执行到一个没有被实现的方法时，程序会被中断。')])])])}),[],!1,null,null,null);t.default=n.exports}}]);