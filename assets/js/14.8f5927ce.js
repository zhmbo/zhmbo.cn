(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{425:function(s,t,a){"use strict";a.r(t);var e=a(2),n=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[t("em",[s._v("运算符")]),s._v("是检查、改变、合并值的特殊符号或短语。例如，加号（"),t("code",[s._v("+")]),s._v("）将两个数相加（如 "),t("code",[s._v("let i = 1 + 2")]),s._v("）。更复杂的运算例子包括逻辑与运算符 "),t("code",[s._v("&&")]),s._v("（如 "),t("code",[s._v("if enteredDoorCode && passedRetinaScan")]),s._v("）。")]),s._v(" "),t("p",[s._v("Swift 所支持运算符你可能在别的语言比如 C 语言里已经认识了，同时为了减少常见编码错误对它们做了部分改进。如：赋值符（"),t("code",[s._v("=")]),s._v("）不再有返回值，这样就消除了手误将判等运算符（"),t("code",[s._v("==")]),s._v("）写成赋值符导致代码错误的缺陷。算术运算符（"),t("code",[s._v("+")]),s._v("，"),t("code",[s._v("-")]),s._v("，"),t("code",[s._v("*")]),s._v("，"),t("code",[s._v("/")]),s._v("，"),t("code",[s._v("%")]),s._v(" 等）的结果会被检测并禁止值溢出，以此来避免保存变量时由于变量大于或小于其类型所能承载的范围时导致的异常结果。当然允许你使用 Swift 的溢出运算符来实现溢出。详情参见 "),t("RouterLink",{attrs:{to:"/pages/9854b9/#溢出运算符"}},[s._v("溢出运算符")]),s._v("。")],1),s._v(" "),t("p",[s._v("Swift 还提供了 C 语言没有的区间运算符，例如 "),t("code",[s._v("a..<b")]),s._v(" 或 "),t("code",[s._v("a...b")]),s._v("，这方便我们表达一个区间内的数值。")]),s._v(" "),t("p",[s._v("本章节只描述了 Swift 中的基本运算符，"),t("RouterLink",{attrs:{to:"/pages/9854b9/"}},[s._v("高级运算符")]),s._v(" 这章会包含 Swift 中的高级运算符，及如何自定义运算符，及如何进行自定义类型的运算符重载。")],1),s._v(" "),t("h2",{attrs:{id:"术语"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#术语"}},[s._v("#")]),s._v(" 术语")]),s._v(" "),t("p",[s._v("运算符分为一元、二元和三元运算符:")]),s._v(" "),t("ul",[t("li",[t("em",[s._v("一元")]),s._v("运算符对单一操作对象操作（如 "),t("code",[s._v("-a")]),s._v("）。一元运算符分前置运算符和后置运算符，"),t("em",[s._v("前置运算符")]),s._v("需紧跟在操作对象之前（如 "),t("code",[s._v("!b")]),s._v("），"),t("em",[s._v("后置运算符")]),s._v("需紧跟在操作对象之后（如 "),t("code",[s._v("c!")]),s._v("）。")]),s._v(" "),t("li",[t("em",[s._v("二元")]),s._v("运算符操作两个操作对象（如 "),t("code",[s._v("2 + 3")]),s._v("），是"),t("em",[s._v("中置")]),s._v("的，因为它们出现在两个操作对象之间。")]),s._v(" "),t("li",[t("em",[s._v("三元")]),s._v("运算符操作三个操作对象，和 C 语言一样，Swift 只有一个三元运算符，就是三目运算符（"),t("code",[s._v("a ? b : c")]),s._v("）。")])]),s._v(" "),t("p",[s._v("受运算符影响的值叫"),t("em",[s._v("操作数")]),s._v("，在表达式 "),t("code",[s._v("1 + 2")]),s._v(" 中，加号 "),t("code",[s._v("+")]),s._v(" 是二元运算符，它的两个操作数是值 "),t("code",[s._v("1")]),s._v(" 和 "),t("code",[s._v("2")]),s._v("。")]),s._v(" "),t("h2",{attrs:{id:"赋值运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#赋值运算符"}},[s._v("#")]),s._v(" 赋值运算符")]),s._v(" "),t("p",[t("em",[s._v("赋值运算符")]),s._v("（"),t("code",[s._v("a = b")]),s._v("），表示用 "),t("code",[s._v("b")]),s._v(" 的值来初始化或更新 "),t("code",[s._v("a")]),s._v(" 的值：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// a 现在等于 10")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("如果赋值的右边是一个多元组，它的元素可以马上被分解成多个常量或变量：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 现在 x 等于 1，y 等于 2")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("与 C 语言和 Objective-C 不同，Swift 的赋值操作并不返回任何值。所以下面语句是无效的：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" y "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 此句错误，因为 x = y 并不返回任何值")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("通过将 "),t("code",[s._v("if x = y")]),s._v(" 标记为无效语句，Swift 能帮你避免把 （"),t("code",[s._v("==")]),s._v("）错写成（"),t("code",[s._v("=")]),s._v("）这类错误的出现。")]),s._v(" "),t("h2",{attrs:{id:"算术运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#算术运算符"}},[s._v("#")]),s._v(" 算术运算符")]),s._v(" "),t("p",[s._v("Swift 中所有数值类型都支持了基本的四则"),t("em",[s._v("算术运算符")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("加法（"),t("code",[s._v("+")]),s._v("）")]),s._v(" "),t("li",[s._v("减法（"),t("code",[s._v("-")]),s._v("）")]),s._v(" "),t("li",[s._v("乘法（"),t("code",[s._v("*")]),s._v("）")]),s._v(" "),t("li",[s._v("除法（"),t("code",[s._v("/")]),s._v("）")])]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等于 3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等于 2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等于 6")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.5")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等于 4.0")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("与 C 语言和 Objective-C 不同的是，Swift 默认情况下不允许在数值运算中出现溢出情况。但是你可以使用 Swift 的溢出运算符来实现溢出运算（如 "),t("code",[s._v("a &+ b")]),s._v("）。详情参见 "),t("RouterLink",{attrs:{to:"/pages/9854b9/#溢出运算符"}},[s._v("溢出运算符")]),s._v("。")],1),s._v(" "),t("p",[s._v("加法运算符也可用于 "),t("code",[s._v("String")]),s._v(" 的拼接：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello, "')])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"world"')])]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// 等于 "hello, world"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"求余运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#求余运算符"}},[s._v("#")]),s._v(" 求余运算符")]),s._v(" "),t("p",[t("em",[s._v("求余运算符")]),s._v("（"),t("code",[s._v("a % b")]),s._v("）是计算 "),t("code",[s._v("b")]),s._v(" 的多少倍刚刚好可以容入 "),t("code",[s._v("a")]),s._v("，返回多出来的那部分（余数）。")]),s._v(" "),t("blockquote",[t("p",[s._v("注意")]),s._v(" "),t("p",[s._v("求余运算符（"),t("code",[s._v("%")]),s._v("）在其他语言也叫"),t("em",[s._v("取模运算符")]),s._v("。但是严格说来，我们看该运算符对负数的操作结果，「求余」比「取模」更合适些。")])]),s._v(" "),t("p",[s._v("我们来谈谈取余是怎么回事，计算 "),t("code",[s._v("9 % 4")]),s._v("，你先计算出 "),t("code",[s._v("4")]),s._v(" 的多少倍会刚好可以容入 "),t("code",[s._v("9")]),s._v(" 中：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/zhmbo/static@master/img/20201111153351.png",alt:"img"}})]),s._v(" "),t("p",[s._v("你可以在 "),t("code",[s._v("9")]),s._v(" 中放入两个 "),t("code",[s._v("4")]),s._v("，那余数是 1（用橙色标出）。")]),s._v(" "),t("p",[s._v("在 Swift 中可以表达为：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等于 1")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("为了得到 "),t("code",[s._v("a % b")]),s._v(" 的结果，"),t("code",[s._v("%")]),s._v(" 计算了以下等式，并输出 "),t("code",[s._v("余数")]),s._v("作为结果：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b × 倍数"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" 余数\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("当 "),t("code",[s._v("倍数")]),s._v("取最大值的时候，就会刚好可以容入 "),t("code",[s._v("a")]),s._v(" 中。")]),s._v(" "),t("p",[s._v("把 "),t("code",[s._v("9")]),s._v(" 和 "),t("code",[s._v("4")]),s._v(" 代入等式中，我们得 "),t("code",[s._v("1")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" × "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("同样的方法，我们来计算 "),t("code",[s._v("-9 % 4")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等于 -1")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("把 "),t("code",[s._v("-9")]),s._v(" 和 "),t("code",[s._v("4")]),s._v(" 代入等式，"),t("code",[s._v("-2")]),s._v(" 是取到的最大整数：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" × "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("余数是 "),t("code",[s._v("-1")]),s._v("。")]),s._v(" "),t("p",[s._v("在对负数 "),t("code",[s._v("b")]),s._v(" 求余时，"),t("code",[s._v("b")]),s._v(" 的符号会被忽略。这意味着 "),t("code",[s._v("a % b")]),s._v(" 和 "),t("code",[s._v("a % -b")]),s._v(" 的结果是相同的。")]),s._v(" "),t("h3",{attrs:{id:"一元负号运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一元负号运算符"}},[s._v("#")]),s._v(" 一元负号运算符")]),s._v(" "),t("p",[s._v("数值的正负号可以使用前缀 "),t("code",[s._v("-")]),s._v("（即"),t("em",[s._v("一元负号符")]),s._v("）来切换：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" three "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" minusThree "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("three       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// minusThree 等于 -3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" plusThree "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("minusThree   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// plusThree 等于 3, 或 "负负3"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("一元负号符（"),t("code",[s._v("-")]),s._v("）写在操作数之前，中间没有空格。")]),s._v(" "),t("h3",{attrs:{id:"一元正号运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一元正号运算符"}},[s._v("#")]),s._v(" 一元正号运算符")]),s._v(" "),t("p",[t("em",[s._v("一元正号符")]),s._v("（"),t("code",[s._v("+")]),s._v("）不做任何改变地返回操作数的值：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" minusSix "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" alsoMinusSix "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("minusSix  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// alsoMinusSix 等于 -6")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("虽然一元正号符什么都不会改变，但当你在使用一元负号来表达负数时，你可以使用一元正号来表达正数，如此你的代码会具有对称美。")]),s._v(" "),t("h2",{attrs:{id:"组合赋值运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组合赋值运算符"}},[s._v("#")]),s._v(" 组合赋值运算符")]),s._v(" "),t("p",[s._v("如同 C 语言，Swift 也提供把其他运算符和赋值运算（"),t("code",[s._v("=")]),s._v("）组合的"),t("em",[s._v("组合赋值运算符")]),s._v("，组合加运算（"),t("code",[s._v("+=")]),s._v("）是其中一个例子：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// a 现在是 3")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("表达式 "),t("code",[s._v("a += 2")]),s._v(" 是 "),t("code",[s._v("a = a + 2")]),s._v(" 的简写，一个组合加运算就是把加法运算和赋值运算组合成进一个运算符里，同时完成两个运算任务。")]),s._v(" "),t("blockquote",[t("p",[s._v("注意")]),s._v(" "),t("p",[s._v("复合赋值运算没有返回值，"),t("code",[s._v("let b = a += 2")]),s._v(" 这类代码是错误。这不同于上面提到的自增和自减运算符。")])]),s._v(" "),t("p",[s._v("更多 Swift 标准库运算符的信息，请看 "),t("a",{attrs:{href:"https://developer.apple.com/documentation/swift/operator_declarations",target:"_blank",rel:"noopener noreferrer"}},[s._v("运算符声明"),t("OutboundLink")],1),s._v("。 ‌")]),s._v(" "),t("h2",{attrs:{id:"比较运算符（comparison-operators）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#比较运算符（comparison-operators）"}},[s._v("#")]),s._v(" 比较运算符（Comparison Operators）")]),s._v(" "),t("p",[s._v("Swift 支持以下的比较运算符：")]),s._v(" "),t("ul",[t("li",[s._v("等于（"),t("code",[s._v("a == b")]),s._v("）")]),s._v(" "),t("li",[s._v("不等于（"),t("code",[s._v("a != b")]),s._v("）")]),s._v(" "),t("li",[s._v("大于（"),t("code",[s._v("a > b")]),s._v("）")]),s._v(" "),t("li",[s._v("小于（"),t("code",[s._v("a < b")]),s._v("）")]),s._v(" "),t("li",[s._v("大于等于（"),t("code",[s._v("a >= b")]),s._v("）")]),s._v(" "),t("li",[s._v("小于等于（"),t("code",[s._v("a <= b")]),s._v("）")])]),s._v(" "),t("blockquote",[t("p",[s._v("注意")]),s._v(" "),t("p",[s._v("Swift 也提供恒等（"),t("code",[s._v("===")]),s._v("）和不恒等（"),t("code",[s._v("!==")]),s._v("）这两个比较符来判断两个对象是否引用同一个对象实例。更多细节在 "),t("RouterLink",{attrs:{to:"/pages/0641bb/"}},[s._v("类和结构体")]),s._v(" 章节的 "),t("strong",[s._v("Identity Operators")]),s._v(" 部分。")],1)]),s._v(" "),t("p",[s._v("每个比较运算都返回了一个标识表达式是否成立的布尔值：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true, 因为 1 等于 1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true, 因为 2 不等于 1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true, 因为 2 大于 1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true, 因为 1 小于2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true, 因为 1 大于等于 1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false, 因为 2 并不小于等于 1")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("比较运算多用于条件语句，如 "),t("code",[s._v("if")]),s._v(" 条件：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"world"')])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"world"')])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello, world"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"I'm sorry ")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("name")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v(", but I don't recognize you\"")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// 输出“hello, world", 因为 `name` 就是等于 "world”')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("关于 "),t("code",[s._v("if")]),s._v(" 语句，请看 "),t("RouterLink",{attrs:{to:"/pages/544cb0/"}},[s._v("控制流")]),s._v("。")],1),s._v(" "),t("p",[s._v("如果两个元组的元素相同，且长度相同的话，元组就可以被比较。比较元组大小会按照从左到右、逐值比较的方式，直到发现有两个值不等时停止。如果所有的值都相等，那么这一对元组我们就称它们是相等的。例如：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"zebra"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"apple"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true，因为 1 小于 2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"apple"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"bird"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true，因为 3 等于 3，但是 apple 小于 bird")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"dog"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"dog"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true，因为 4 等于 4，dog 等于 dog")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("在上面的例子中，你可以看到，在第一行中从左到右的比较行为。因为 "),t("code",[s._v("1")]),s._v(" 小于 "),t("code",[s._v("2")]),s._v("，所以 "),t("code",[s._v('(1, "zebra")')]),s._v(" 小于 "),t("code",[s._v('(2, "apple")')]),s._v("，不管元组剩下的值如何。所以 "),t("code",[s._v('"zebra"')]),s._v(" 大于 "),t("code",[s._v('"apple"')]),s._v(" 对结果没有任何影响，因为元组的比较结果已经被第一个元素决定了。不过，当元组的第一个元素相同时候，第二个元素将会用作比较-第二行和第三行代码就发生了这样的比较。")]),s._v(" "),t("p",[s._v("当元组中的元素都可以被比较时，你也可以使用这些运算符来比较它们的大小。例如，像下面展示的代码，你可以比较两个类型为 "),t("code",[s._v("(String, Int)")]),s._v(" 的元组，因为 "),t("code",[s._v("Int")]),s._v(" 和 "),t("code",[s._v("String")]),s._v(" 类型的值可以比较。相反，"),t("code",[s._v("Bool")]),s._v(" 不能被比较，也意味着存有布尔类型的元组不能被比较。")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"blue"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"purple"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 正常，比较的结果为 true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"blue"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"purple"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 错误，因为 < 不能比较布尔类型")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("blockquote",[t("p",[s._v("注意")]),s._v(" "),t("p",[s._v("Swift 标准库只能比较七个以内元素的元组比较函数。如果你的元组元素超过七个时，你需要自己实现比较运算符。")])]),s._v(" "),t("h2",{attrs:{id:"三元运算符（ternary-conditional-operator）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三元运算符（ternary-conditional-operator）"}},[s._v("#")]),s._v(" 三元运算符（Ternary Conditional Operator）")]),s._v(" "),t("p",[t("em",[s._v("三元运算符")]),s._v("的特殊在于它是有三个操作数的运算符，它的形式是 "),t("code",[s._v("问题 ? 答案 1 : 答案 2")]),s._v("。它简洁地表达根据 "),t("code",[s._v("问题")]),s._v("成立与否作出二选一的操作。如果 "),t("code",[s._v("问题")]),s._v(" 成立，返回 "),t("code",[s._v("答案 1")]),s._v(" 的结果；反之返回 "),t("code",[s._v("答案 2")]),s._v(" 的结果。")]),s._v(" "),t("p",[s._v("三元运算符是以下代码的缩写形式：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" question "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    answer1\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    answer2\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("这里有个计算表格行高的例子。如果有表头，那行高应比内容高度要高出 50 点；如果没有表头，只需高出 20 点：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" contentHeight "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("40")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" hasHeader "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" rowHeight "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" contentHeight "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("hasHeader "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// rowHeight 现在是 90")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("上面的写法比下面的代码更简洁：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" contentHeight "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("40")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" hasHeader "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" rowHeight "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" contentHeight\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" hasHeader "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    rowHeight "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" rowHeight "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    rowHeight "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" rowHeight "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// rowHeight 现在是 90")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("第一段代码例子使用了三元运算，所以一行代码就能让我们得到正确答案。这比第二段代码简洁得多，无需将 "),t("code",[s._v("rowHeight")]),s._v(" 定义成变量，因为它的值无需在 "),t("code",[s._v("if")]),s._v(" 语句中改变。")]),s._v(" "),t("p",[s._v("三元运算为二选一场景提供了一个非常便捷的表达形式。不过需要注意的是，滥用三元运算符会降低代码可读性。所以我们应避免在一个复合语句中使用多个三元运算符。")]),s._v(" "),t("h2",{attrs:{id:"空合运算符（nil-coalescing-operator）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#空合运算符（nil-coalescing-operator）"}},[s._v("#")]),s._v(" 空合运算符（Nil Coalescing Operator）")]),s._v(" "),t("p",[t("em",[s._v("空合运算符")]),s._v("（"),t("code",[s._v("a ?? b")]),s._v("）将对可选类型 "),t("code",[s._v("a")]),s._v(" 进行空判断，如果 "),t("code",[s._v("a")]),s._v(" 包含一个值就进行解包，否则就返回一个默认值 "),t("code",[s._v("b")]),s._v("。表达式 "),t("code",[s._v("a")]),s._v(" 必须是 Optional 类型。默认值 "),t("code",[s._v("b")]),s._v(" 的类型必须要和 "),t("code",[s._v("a")]),s._v(" 存储值的类型保持一致。")]),s._v(" "),t("p",[s._v("空合运算符是对以下代码的简短表达方法：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token nil constant"}},[s._v("nil")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" b\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("上述代码使用了三元运算符。当可选类型 "),t("code",[s._v("a")]),s._v(" 的值不为空时，进行强制解包（"),t("code",[s._v("a!")]),s._v("），访问 "),t("code",[s._v("a")]),s._v(" 中的值；反之返回默认值 "),t("code",[s._v("b")]),s._v("。无疑空合运算符（"),t("code",[s._v("??")]),s._v("）提供了一种更为优雅的方式去封装条件判断和解包两种行为，显得简洁以及更具可读性。")]),s._v(" "),t("blockquote",[t("p",[s._v("注意")]),s._v(" "),t("p",[s._v("如果 "),t("code",[s._v("a")]),s._v(" 为非空值（"),t("code",[s._v("non-nil")]),s._v("），那么值 "),t("code",[s._v("b")]),s._v(" 将不会被计算。这也就是所谓的"),t("em",[s._v("短路求值")]),s._v("。")])]),s._v(" "),t("p",[s._v("下文例子采用空合运算符，实现了在默认颜色名和可选自定义颜色名之间抉择：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" defaultColorName "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"red"')])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" userDefinedColorName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//默认值为 nil")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" colorNameToUse "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" userDefinedColorName "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("??")]),s._v(" defaultColorName\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// userDefinedColorName 的值为空，所以 colorNameToUse 的值为 "red"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[t("code",[s._v("userDefinedColorName")]),s._v(" 变量被定义为一个可选的 "),t("code",[s._v("String")]),s._v(" 类型，默认值为 "),t("code",[s._v("nil")]),s._v("。由于 "),t("code",[s._v("userDefinedColorName")]),s._v(" 是一个可选类型，我们可以使用空合运算符去判断其值。在上一个例子中，通过空合运算符为一个名为 "),t("code",[s._v("colorNameToUse")]),s._v(" 的变量赋予一个字符串类型初始值。 由于 "),t("code",[s._v("userDefinedColorName")]),s._v(" 值为空，因此表达式 "),t("code",[s._v("userDefinedColorName ?? defaultColorName")]),s._v(" 返回 "),t("code",[s._v("defaultColorName")]),s._v(" 的值，即 "),t("code",[s._v("red")]),s._v("。")]),s._v(" "),t("p",[s._v("如果你分配一个非空值（"),t("code",[s._v("non-nil")]),s._v("）给 "),t("code",[s._v("userDefinedColorName")]),s._v("，再次执行空合运算，运算结果为封包在 "),t("code",[s._v("userDefinedColorName")]),s._v(" 中的值，而非默认值。")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[s._v("userDefinedColorName "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"green"')])]),s._v("\ncolorNameToUse "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" userDefinedColorName "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("??")]),s._v(" defaultColorName\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// userDefinedColorName 非空，因此 colorNameToUse 的值为 "green"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h2",{attrs:{id:"区间运算符（range-operators）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#区间运算符（range-operators）"}},[s._v("#")]),s._v(" 区间运算符（Range Operators）")]),s._v(" "),t("p",[s._v("Swift 提供了几种方便表达一个区间的值的"),t("em",[s._v("区间运算符")]),s._v("。")]),s._v(" "),t("h3",{attrs:{id:"闭区间运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#闭区间运算符"}},[s._v("#")]),s._v(" 闭区间运算符")]),s._v(" "),t("p",[t("em",[s._v("闭区间运算符")]),s._v("（"),t("code",[s._v("a...b")]),s._v("）定义一个包含从 "),t("code",[s._v("a")]),s._v(" 到 "),t("code",[s._v("b")]),s._v("（包括 "),t("code",[s._v("a")]),s._v(" 和 "),t("code",[s._v("b")]),s._v("）的所有值的区间。"),t("code",[s._v("a")]),s._v(" 的值不能超过 "),t("code",[s._v("b")]),s._v("。")]),s._v(" "),t("p",[s._v("闭区间运算符在迭代一个区间的所有值时是非常有用的，如在 "),t("code",[s._v("for-in")]),s._v(" 循环中：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" index "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"')]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("index")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v(" * 5 = ")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("index "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")])]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1 * 5 = 5")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2 * 5 = 10")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3 * 5 = 15")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 4 * 5 = 20")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 5 * 5 = 25")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("关于 "),t("code",[s._v("for-in")]),s._v(" 循环，请看 "),t("RouterLink",{attrs:{to:"/pages/544cb0/"}},[s._v("控制流")]),s._v("。")],1),s._v(" "),t("h3",{attrs:{id:"半开区间运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#半开区间运算符"}},[s._v("#")]),s._v(" 半开区间运算符")]),s._v(" "),t("p",[t("em",[s._v("半开区间运算符")]),s._v("（"),t("code",[s._v("a..<b")]),s._v("）定义一个从 "),t("code",[s._v("a")]),s._v(" 到 "),t("code",[s._v("b")]),s._v(" 但不包括 "),t("code",[s._v("b")]),s._v(" 的区间。 之所以称为"),t("em",[s._v("半开区间")]),s._v("，是因为该区间包含第一个值而不包括最后的值。")]),s._v(" "),t("p",[s._v("半开区间的实用性在于当你使用一个从 0 开始的列表（如数组）时，非常方便地从0数到列表的长度。")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" names "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Anna"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Alex"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Brian"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Jack"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" count "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" names"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("count\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("..<")]),s._v("count "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"第 ')]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")])]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v(" 个人叫 ")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("names"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")])]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 第 1 个人叫 Anna")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 第 2 个人叫 Alex")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 第 3 个人叫 Brian")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 第 4 个人叫 Jack")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("数组有 4 个元素，但 "),t("code",[s._v("0..<count")]),s._v(" 只数到3（最后一个元素的下标），因为它是半开区间。关于数组，请查阅 "),t("RouterLink",{attrs:{to:"/pages/4b4c78/#数组（arrays）"}},[s._v("数组")]),s._v("。")],1),s._v(" "),t("h3",{attrs:{id:"单侧区间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单侧区间"}},[s._v("#")]),s._v(" 单侧区间")]),s._v(" "),t("p",[s._v("闭区间操作符有另一个表达形式，可以表达往一侧无限延伸的区间 —— 例如，一个包含了数组从索引 2 到结尾的所有值的区间。在这些情况下，你可以省略掉区间操作符一侧的值。这种区间叫做单侧区间，因为操作符只有一侧有值。例如：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" names"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Brian")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Jack")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" names"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Anna")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Alex")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Brian")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("半开区间操作符也有单侧表达形式，附带上它的最终值。就像你使用区间去包含一个值，最终值并不会落在区间内。例如：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" names"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("..<")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Anna")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Alex")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("单侧区间不止可以在下标里使用，也可以在别的情境下使用。你不能遍历省略了初始值的单侧区间，因为遍历的开端并不明显。你可以遍历一个省略最终值的单侧区间；然而，由于这种区间无限延伸的特性，请保证你在循环里有一个结束循环的分支。你也可以查看一个单侧区间是否包含某个特定的值，就像下面展示的那样。")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" range "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\nrange"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("contains")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\nrange"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("contains")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\nrange"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("contains")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h2",{attrs:{id:"逻辑运算符（logical-operators）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算符（logical-operators）"}},[s._v("#")]),s._v(" 逻辑运算符（Logical Operators）")]),s._v(" "),t("p",[t("em",[s._v("逻辑运算符")]),s._v("的操作对象是逻辑布尔值。Swift 支持基于 C 语言的三个标准逻辑运算。")]),s._v(" "),t("ul",[t("li",[s._v("逻辑非（"),t("code",[s._v("!a")]),s._v("）")]),s._v(" "),t("li",[s._v("逻辑与（"),t("code",[s._v("a && b")]),s._v("）")]),s._v(" "),t("li",[s._v("逻辑或（"),t("code",[s._v("a || b")]),s._v("）")])]),s._v(" "),t("h3",{attrs:{id:"逻辑非运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#逻辑非运算符"}},[s._v("#")]),s._v(" 逻辑非运算符")]),s._v(" "),t("p",[t("em",[s._v("逻辑非运算符")]),s._v("（"),t("code",[s._v("!a")]),s._v("）对一个布尔值取反，使得 "),t("code",[s._v("true")]),s._v(" 变 "),t("code",[s._v("false")]),s._v("，"),t("code",[s._v("false")]),s._v(" 变 "),t("code",[s._v("true")]),s._v("。")]),s._v(" "),t("p",[s._v("它是一个前置运算符，需紧跟在操作数之前，且不加空格。读作 "),t("code",[s._v("非 a")]),s._v(" ，例子如下：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" allowedEntry "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("allowedEntry "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ACCESS DENIED"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出“ACCESS DENIED”")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[t("code",[s._v("if !allowedEntry")]),s._v(" 语句可以读作「如果非 allowedEntry」，接下一行代码只有在「非 allowedEntry」为 "),t("code",[s._v("true")]),s._v("，即 "),t("code",[s._v("allowEntry")]),s._v(" 为 "),t("code",[s._v("false")]),s._v(" 时被执行。")]),s._v(" "),t("p",[s._v("在示例代码中，小心地选择布尔常量或变量有助于代码的可读性，并且避免使用双重逻辑非运算，或混乱的逻辑语句。")]),s._v(" "),t("h3",{attrs:{id:"逻辑与运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#逻辑与运算符"}},[s._v("#")]),s._v(" 逻辑与运算符")]),s._v(" "),t("p",[t("em",[s._v("逻辑与运算符")]),s._v("（"),t("code",[s._v("a && b")]),s._v("）表达了只有 "),t("code",[s._v("a")]),s._v(" 和 "),t("code",[s._v("b")]),s._v(" 的值都为 "),t("code",[s._v("true")]),s._v(" 时，整个表达式的值才会是 "),t("code",[s._v("true")]),s._v("。")]),s._v(" "),t("p",[s._v("只要任意一个值为 "),t("code",[s._v("false")]),s._v("，整个表达式的值就为 "),t("code",[s._v("false")]),s._v("。事实上，如果第一个值为 "),t("code",[s._v("false")]),s._v("，那么是不去计算第二个值的，因为它已经不可能影响整个表达式的结果了。这被称做"),t("em",[s._v("短路计算（short-circuit evaluation）")]),s._v(" 。")]),s._v(" "),t("p",[s._v("以下例子，只有两个 "),t("code",[s._v("Bool")]),s._v(" 值都为 "),t("code",[s._v("true")]),s._v(" 的时候才允许进入 if：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" enteredDoorCode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" passedRetinaScan "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" enteredDoorCode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" passedRetinaScan "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Welcome!"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ACCESS DENIED"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出“ACCESS DENIED”")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("h3",{attrs:{id:"逻辑或运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#逻辑或运算符"}},[s._v("#")]),s._v(" 逻辑或运算符")]),s._v(" "),t("p",[s._v("逻辑或运算符（"),t("code",[s._v("a || b")]),s._v("）是一个由两个连续的 "),t("code",[s._v("|")]),s._v(" 组成的中置运算符。它表示了两个逻辑表达式的其中一个为 "),t("code",[s._v("true")]),s._v("，整个表达式就为 "),t("code",[s._v("true")]),s._v("。")]),s._v(" "),t("p",[s._v("同逻辑与运算符类似，逻辑或也是「短路计算」的，当左端的表达式为 "),t("code",[s._v("true")]),s._v(" 时，将不计算右边的表达式了，因为它不可能改变整个表达式的值了。")]),s._v(" "),t("p",[s._v("以下示例代码中，第一个布尔值（"),t("code",[s._v("hasDoorKey")]),s._v("）为 "),t("code",[s._v("false")]),s._v("，但第二个值（"),t("code",[s._v("knowsOverridePassword")]),s._v("）为 "),t("code",[s._v("true")]),s._v("，所以整个表达是 "),t("code",[s._v("true")]),s._v("，于是允许进入：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" hasDoorKey "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" knowsOverridePassword "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" hasDoorKey "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" knowsOverridePassword "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Welcome!"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ACCESS DENIED"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出“Welcome!”")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("h3",{attrs:{id:"逻辑运算符组合计算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算符组合计算"}},[s._v("#")]),s._v(" 逻辑运算符组合计算")]),s._v(" "),t("p",[s._v("我们可以组合多个逻辑运算符来表达一个复合逻辑：")]),s._v(" "),t("div",{staticClass:"language-swiftswift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('if enteredDoorCode && passedRetinaScan || hasDoorKey || knowsOverridePassword {\n    print("Welcome!")\n} else {\n    print("ACCESS DENIED")\n}\n// 输出“Welcome!”\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("这个例子使用了含多个 "),t("code",[s._v("&&")]),s._v(" 和 "),t("code",[s._v("||")]),s._v(" 的复合逻辑。但无论怎样，"),t("code",[s._v("&&")]),s._v(" 和 "),t("code",[s._v("||")]),s._v(" 始终只能操作两个值。所以这实际是三个简单逻辑连续操作的结果。我们来解读一下：")]),s._v(" "),t("p",[s._v("如果我们输入了正确的密码并通过了视网膜扫描，或者我们有一把有效的钥匙，又或者我们知道紧急情况下重置的密码，我们就能把门打开进入。")]),s._v(" "),t("p",[s._v("前两种情况，我们都不满足，所以前两个简单逻辑的结果是 "),t("code",[s._v("false")]),s._v("，但是我们是知道紧急情况下重置的密码的，所以整个复杂表达式的值还是 "),t("code",[s._v("true")]),s._v("。")]),s._v(" "),t("blockquote",[t("p",[s._v("注意")]),s._v(" "),t("p",[s._v("Swift 逻辑操作符 "),t("code",[s._v("&&")]),s._v(" 和 "),t("code",[s._v("||")]),s._v(" 是左结合的，这意味着拥有多元逻辑操作符的复合表达式优先计算最左边的子表达式。")])]),s._v(" "),t("h3",{attrs:{id:"使用括号来明确优先级"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用括号来明确优先级"}},[s._v("#")]),s._v(" 使用括号来明确优先级")]),s._v(" "),t("p",[s._v("为了一个复杂表达式更容易读懂，在合适的地方使用括号来明确优先级是很有效的，虽然它并非必要的。在上个关于门的权限的例子中，我们给第一个部分加个括号，使它看起来逻辑更明确：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("enteredDoorCode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" passedRetinaScan"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" hasDoorKey "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" knowsOverridePassword "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Welcome!"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ACCESS DENIED"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出“Welcome!”")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("这括号使得前两个值被看成整个逻辑表达中独立的一个部分。虽然有括号和没括号的输出结果是一样的，但对于读代码的人来说有括号的代码更清晰。可读性比简洁性更重要，请在可以让你代码变清晰的地方加个括号吧！")])])}),[],!1,null,null,null);t.default=n.exports}}]);