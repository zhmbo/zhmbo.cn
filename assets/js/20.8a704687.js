(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{423:function(s,t,a){"use strict";a.r(t);var n=a(2),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[t("em",[s._v("枚举")]),s._v("为一组相关的值定义了一个共同的类型，使你可以在你的代码中以类型安全的方式来使用这些值。")]),s._v(" "),t("p",[s._v("如果你熟悉 C 语言，你会知道在 C 语言中，枚举会为一组整型值分配相关联的名称。Swift 中的枚举更加灵活，不必给每一个枚举成员提供一个值。如果给枚举成员提供一个值（称为原始值），则该值的类型可以是字符串、字符，或是一个整型值或浮点数。")]),s._v(" "),t("p",[s._v("此外，枚举成员可以指定"),t("em",[s._v("任意")]),s._v("类型的关联值存储到枚举成员中，就像其他语言中的联合体（unions）和变体（variants）。你可以在一个枚举中定义一组相关的枚举成员，每一个枚举成员都可以有适当类型的关联值。")]),s._v(" "),t("p",[s._v("在 Swift 中，枚举类型是一等（first-class）类型。它们采用了很多在传统上只被类（class）所支持的特性，例如计算属性（computed properties），用于提供枚举值的附加信息，实例方法（instance methods），用于提供和枚举值相关联的功能。枚举也可以定义构造函数（initializers）来提供一个初始值；可以在原始实现的基础上扩展它们的功能；还可以遵循协议（protocols）来提供标准的功能。")]),s._v(" "),t("p",[s._v("想了解更多相关信息，请参见 "),t("RouterLink",{attrs:{to:"/pages/ce0459/"}},[s._v("属性")]),s._v("，"),t("RouterLink",{attrs:{to:"/pages/efc653/"}},[s._v("方法")]),s._v("，"),t("RouterLink",{attrs:{to:"/pages/1b072a/"}},[s._v("构造过程")]),s._v("，"),t("RouterLink",{attrs:{to:"/pages/297d1c/"}},[s._v("扩展")]),s._v(" 和 "),t("RouterLink",{attrs:{to:"/pages/82f958/"}},[s._v("协议")]),s._v("。")],1),s._v(" "),t("h2",{attrs:{id:"枚举语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#枚举语法"}},[s._v("#")]),s._v(" 枚举语法")]),s._v(" "),t("p",[s._v("使用 "),t("code",[s._v("enum")]),s._v(" 关键词来创建枚举并且把它们的整个定义放在一对大括号内：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SomeEnumeration")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 枚举定义放在这里")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("下面是用枚举表示指南针四个方向的例子：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CompassPoint")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" north\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" south\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" east\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" west\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("枚举中定义的值（如 "),t("code",[s._v("north")]),s._v("，"),t("code",[s._v("south")]),s._v("，"),t("code",[s._v("east")]),s._v(" 和 "),t("code",[s._v("west")]),s._v("）是这个枚举的"),t("em",[s._v("成员值")]),s._v("（或"),t("em",[s._v("成员")]),s._v("）。你可以使用 "),t("code",[s._v("case")]),s._v(" 关键字来定义一个新的枚举成员值。")]),s._v(" "),t("blockquote",[t("p",[s._v("注意")]),s._v(" "),t("p",[s._v("与 C 和 Objective-C 不同，Swift 的枚举成员在被创建时不会被赋予一个默认的整型值。在上面的 "),t("code",[s._v("CompassPoint")]),s._v(" 例子中，"),t("code",[s._v("north")]),s._v("，"),t("code",[s._v("south")]),s._v("，"),t("code",[s._v("east")]),s._v(" 和 "),t("code",[s._v("west")]),s._v(" 不会被隐式地赋值为 "),t("code",[s._v("0")]),s._v("，"),t("code",[s._v("1")]),s._v("，"),t("code",[s._v("2")]),s._v(" 和 "),t("code",[s._v("3")]),s._v("。相反，这些枚举成员本身就是完备的值，这些值的类型是已经明确定义好的 "),t("code",[s._v("CompassPoint")]),s._v(" 类型。")])]),s._v(" "),t("p",[s._v("多个成员值可以出现在同一行上，用逗号隔开：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Planet")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" mercury"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" venus"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" earth"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" mars"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" jupiter"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" saturn"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" uranus"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" neptune\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("每个枚举定义了一个全新的类型。像 Swift 中其他类型一样，它们的名字（例如 "),t("code",[s._v("CompassPoint")]),s._v(" 和 "),t("code",[s._v("Planet")]),s._v("）以一个大写字母开头。给枚举类型起一个单数名字而不是复数名字，以便于：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" directionToHead "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CompassPoint")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("west\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("code",[s._v("directionToHead")]),s._v(" 的类型可以在它被 "),t("code",[s._v("CompassPoint")]),s._v(" 的某个值初始化时推断出来。一旦 "),t("code",[s._v("directionToHead")]),s._v(" 被声明为 "),t("code",[s._v("CompassPoint")]),s._v(" 类型，你可以使用更简短的点语法将其设置为另一个 "),t("code",[s._v("CompassPoint")]),s._v(" 的值：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[s._v("directionToHead "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("east\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("当 "),t("code",[s._v("directionToHead")]),s._v(" 的类型已知时，再次为其赋值可以省略枚举类型名。在使用具有显式类型的枚举值时，这种写法让代码具有更好的可读性。")]),s._v(" "),t("h2",{attrs:{id:"使用-switch-语句匹配枚举值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-switch-语句匹配枚举值"}},[s._v("#")]),s._v(" 使用 Switch 语句匹配枚举值")]),s._v(" "),t("p",[s._v("你可以使用 "),t("code",[s._v("switch")]),s._v(" 语句匹配单个枚举值：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[s._v("directionToHead "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("south\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("switch")]),s._v(" directionToHead "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("north"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Lots of planets have a north"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("south"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Watch out for penguins"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("east"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Where the sun rises"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("west"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Where the skies are blue"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 打印“Watch out for penguins”")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[s._v("你可以这样理解这段代码：")]),s._v(" "),t("p",[s._v("“判断 "),t("code",[s._v("directionToHead")]),s._v(" 的值。当它等于 "),t("code",[s._v(".north")]),s._v("，打印 "),t("code",[s._v("“Lots of planets have a north”")]),s._v("。当它等于 "),t("code",[s._v(".south")]),s._v("，打印 "),t("code",[s._v("“Watch out for penguins”")]),s._v("。”")]),s._v(" "),t("p",[s._v("……以此类推。")]),s._v(" "),t("p",[s._v("正如在 "),t("RouterLink",{attrs:{to:"/pages/544cb0/"}},[s._v("控制流")]),s._v(" 中介绍的那样，在判断一个枚举类型的值时，"),t("code",[s._v("switch")]),s._v(" 语句必须穷举所有情况。如果忽略了 "),t("code",[s._v(".west")]),s._v(" 这种情况，上面那段代码将无法通过编译，因为它没有考虑到 "),t("code",[s._v("CompassPoint")]),s._v(" 的全部成员。强制穷举确保了枚举成员不会被意外遗漏。")],1),s._v(" "),t("p",[s._v("当不需要匹配每个枚举成员的时候，你可以提供一个 "),t("code",[s._v("default")]),s._v(" 分支来涵盖所有未明确处理的枚举成员：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" somePlanet "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Planet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("earth\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("switch")]),s._v(" somePlanet "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("earth"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Mostly harmless"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Not a safe place for humans"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 打印“Mostly harmless”")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("h2",{attrs:{id:"枚举成员的遍历"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#枚举成员的遍历"}},[s._v("#")]),s._v(" 枚举成员的遍历")]),s._v(" "),t("p",[s._v("在一些情况下，你会需要得到一个包含枚举所有成员的集合。可以通过如下代码实现：")]),s._v(" "),t("p",[s._v("令枚举遵循 "),t("code",[s._v("CaseIterable")]),s._v(" 协议。Swift 会生成一个 "),t("code",[s._v("allCases")]),s._v(" 属性，用于表示一个包含枚举所有成员的集合。下面是一个例子：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Beverage")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CaseIterable")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" coffee"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" tea"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" juice\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" numberOfChoices "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Beverage")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("allCases"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("count\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"')]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("numberOfChoices")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v(' beverages available"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 打印“3 beverages available”")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("在前面的例子中，通过 "),t("code",[s._v("Beverage.allCases")]),s._v(" 可以访问到包含 "),t("code",[s._v("Beverage")]),s._v(" 枚举所有成员的集合。"),t("code",[s._v("allCases")]),s._v(" 的使用方法和其它一般集合一样——集合中的元素是枚举类型的实例，所以在上面的情况中，这些元素是 "),t("code",[s._v("Beverage")]),s._v(" 值。在前面的例子中，统计了总共有多少个枚举成员。而在下面的例子中，则使用 "),t("code",[s._v("for")]),s._v(" 循环来遍历所有枚举成员。")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" beverage "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Beverage")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("allCases "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("beverage"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// coffee")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// tea")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// juice")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("在前面的例子中，使用的语法表明这个枚举遵循 "),t("a",{attrs:{href:"https://developer.apple.com/documentation/swift/caseiterable",target:"_blank",rel:"noopener noreferrer"}},[s._v("CaseIterable"),t("OutboundLink")],1),s._v(" 协议。想了解 protocols 相关信息，请参见 "),t("RouterLink",{attrs:{to:"/pages/82f958/"}},[s._v("协议")]),s._v("。")],1),s._v(" "),t("h2",{attrs:{id:"关联值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关联值"}},[s._v("#")]),s._v(" 关联值")]),s._v(" "),t("p",[s._v("枚举语法那一小节的例子演示了如何定义和分类枚举的成员。你可以为 "),t("code",[s._v("Planet.earth")]),s._v(" 设置一个常量或者变量，并在赋值之后查看这个值。然而，有时候把其他类型的值和成员值一起存储起来会很有用。这额外的信息称为"),t("em",[s._v("关联值")]),s._v("，并且你每次在代码中使用该枚举成员时，还可以修改这个关联值。")]),s._v(" "),t("p",[s._v("你可以定义 Swift 枚举来存储任意类型的关联值，如果需要的话，每个枚举成员的关联值类型可以各不相同。枚举的这种特性跟其他语言中的可识别联合（discriminated unions），标签联合（tagged unions），或者变体（variants）相似。")]),s._v(" "),t("p",[s._v("例如，假设一个库存跟踪系统需要利用两种不同类型的条形码来跟踪商品。有些商品上标有使用 "),t("code",[s._v("0")]),s._v(" 到 "),t("code",[s._v("9")]),s._v(" 的数字的 UPC 格式的一维条形码。每一个条形码都有一个代表数字系统的数字，该数字后接五位代表厂商代码的数字，接下来是五位代表“产品代码”的数字。最后一个数字是检查位，用来验证代码是否被正确扫描：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/zhmbo/static@master/img/20201110184253.png",alt:"img"}})]),s._v(" "),t("p",[s._v("其他商品上标有 QR 码格式的二维码，它可以使用任何 ISO 8859-1 字符，并且可以编码一个最多拥有 2,953 个字符的字符串：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/zhmbo/static@master/img/20201110184225.png",alt:"img"}})]),s._v(" "),t("p",[s._v("这便于库存跟踪系统用包含四个整型值的元组存储 UPC 码，以及用任意长度的字符串储存 QR 码。")]),s._v(" "),t("p",[s._v("在 Swift 中，使用如下方式定义表示两种商品条形码的枚举：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Barcode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("upc")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("qrCode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("以上代码可以这么理解：")]),s._v(" "),t("p",[s._v("“定义一个名为 "),t("code",[s._v("Barcode")]),s._v(" 的枚举类型，它的一个成员值是具有 "),t("code",[s._v("(Int，Int，Int，Int)")]),s._v(" 类型关联值的 "),t("code",[s._v("upc")]),s._v("，另一个成员值是具有 "),t("code",[s._v("String")]),s._v(" 类型关联值的 "),t("code",[s._v("qrCode")]),s._v("。”")]),s._v(" "),t("p",[s._v("这个定义不提供任何 "),t("code",[s._v("Int")]),s._v(" 或 "),t("code",[s._v("String")]),s._v(" 类型的关联值，它只是定义了，当 "),t("code",[s._v("Barcode")]),s._v(" 常量和变量等于 "),t("code",[s._v("Barcode.upc")]),s._v(" 或 "),t("code",[s._v("Barcode.qrCode")]),s._v(" 时，可以存储的关联值的类型。")]),s._v(" "),t("p",[s._v("然后你可以使用任意一种条形码类型创建新的条形码，例如：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" productBarcode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Barcode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("upc")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("85909")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("51226")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("上面的例子创建了一个名为 "),t("code",[s._v("productBarcode")]),s._v(" 的变量，并将 "),t("code",[s._v("Barcode.upc")]),s._v(" 赋值给它，关联的元组值为 "),t("code",[s._v("(8, 85909, 51226, 3)")]),s._v("。")]),s._v(" "),t("p",[s._v("同一个商品可以被分配一个不同类型的条形码，例如：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[s._v("productBarcode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("qrCode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ABCDEFGHIJKLMNOP"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这时，原始的 "),t("code",[s._v("Barcode.upc")]),s._v(" 和其整数关联值被新的 "),t("code",[s._v("Barcode.qrCode")]),s._v(" 和其字符串关联值所替代。"),t("code",[s._v("Barcode")]),s._v(" 类型的常量和变量可以存储一个 "),t("code",[s._v(".upc")]),s._v(" 或者一个 "),t("code",[s._v(".qrCode")]),s._v("（连同它们的关联值），但是在同一时间只能存储这两个值中的一个。")]),s._v(" "),t("p",[s._v("你可以使用一个 switch 语句来检查不同的条形码类型，和之前使用 Switch 语句来匹配枚举值的例子一样。然而，这一次，关联值可以被提取出来作为 switch 语句的一部分。你可以在 "),t("code",[s._v("switch")]),s._v(" 的 case 分支代码中提取每个关联值作为一个常量（用 "),t("code",[s._v("let")]),s._v(" 前缀）或者作为一个变量（用 "),t("code",[s._v("var")]),s._v(" 前缀）来使用：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("switch")]),s._v(" productBarcode "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("upc")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" numberSystem"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" manufacturer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" product"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" check"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"UPC: ')]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("numberSystem")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v(", ")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("manufacturer")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v(", ")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("product")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v(", ")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("check")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('."')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("qrCode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" productCode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"QR code: ')]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("productCode")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('."')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 打印“QR code: ABCDEFGHIJKLMNOP.”")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("如果一个枚举成员的所有关联值都被提取为常量，或者都被提取为变量，为了简洁，你可以只在成员名称前标注一个 "),t("code",[s._v("let")]),s._v(" 或者 "),t("code",[s._v("var")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("switch")]),s._v(" productBarcode "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("upc")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("numberSystem"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" manufacturer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" product"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" check"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"UPC: ')]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("numberSystem")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v(", ")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("manufacturer")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v(", ")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("product")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v(", ")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("check")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('."')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("qrCode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("productCode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"QR code: ')]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("productCode")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('."')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 打印“QR code: ABCDEFGHIJKLMNOP.”")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h2",{attrs:{id:"原始值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原始值"}},[s._v("#")]),s._v(" 原始值")]),s._v(" "),t("p",[s._v("在 "),t("a",{attrs:{href:"#%E5%85%B3%E8%81%94%E5%80%BC"}},[s._v("关联值")]),s._v(" 小节的条形码例子中，演示了如何声明存储不同类型关联值的枚举成员。作为关联值的替代选择，枚举成员可以被默认值（称为"),t("em",[s._v("原始值")]),s._v("）预填充，这些原始值的类型必须相同。")]),s._v(" "),t("p",[s._v("这是一个使用 ASCII 码作为原始值的枚举：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ASCIIControlCharacter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Character")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" tab "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\\t"')])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" lineFeed "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\\n"')])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" carriageReturn "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\\r"')])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("枚举类型 "),t("code",[s._v("ASCIIControlCharacter")]),s._v(" 的原始值类型被定义为 "),t("code",[s._v("Character")]),s._v("，并设置了一些比较常见的 ASCII 控制字符。"),t("code",[s._v("Character")]),s._v(" 的描述详见 "),t("RouterLink",{attrs:{to:"/pages/2850e8/"}},[s._v("字符串和字符")]),s._v(" 部分。")],1),s._v(" "),t("p",[s._v("原始值可以是字符串、字符，或者任意整型值或浮点型值。每个原始值在枚举声明中必须是唯一的。")]),s._v(" "),t("blockquote",[t("p",[s._v("注意")]),s._v(" "),t("p",[s._v("原始值和关联值是不同的。原始值是在定义枚举时被预先填充的值，像上述三个 ASCII 码。对于一个特定的枚举成员，它的原始值始终不变。关联值是创建一个基于枚举成员的常量或变量时才设置的值，枚举成员的关联值可以变化。")])]),s._v(" "),t("h3",{attrs:{id:"原始值的隐式赋值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原始值的隐式赋值"}},[s._v("#")]),s._v(" 原始值的隐式赋值")]),s._v(" "),t("p",[s._v("在使用原始值为整数或者字符串类型的枚举时，不需要显式地为每一个枚举成员设置原始值，Swift 将会自动为你赋值。")]),s._v(" "),t("p",[s._v("例如，当使用整数作为原始值时，隐式赋值的值依次递增 "),t("code",[s._v("1")]),s._v("。如果第一个枚举成员没有设置原始值，其原始值将为 "),t("code",[s._v("0")]),s._v("。")]),s._v(" "),t("p",[s._v("下面的枚举是对之前 "),t("code",[s._v("Planet")]),s._v(" 这个枚举的一个细化，利用整型的原始值来表示每个行星在太阳系中的顺序：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Planet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" mercury "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" venus"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" earth"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" mars"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" jupiter"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" saturn"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" uranus"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" neptune\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("在上面的例子中，"),t("code",[s._v("Plant.mercury")]),s._v(" 的显式原始值为 "),t("code",[s._v("1")]),s._v("，"),t("code",[s._v("Planet.venus")]),s._v(" 的隐式原始值为 "),t("code",[s._v("2")]),s._v("，依次类推。")]),s._v(" "),t("p",[s._v("当使用字符串作为枚举类型的原始值时，每个枚举成员的隐式原始值为该枚举成员的名称。")]),s._v(" "),t("p",[s._v("下面的例子是 "),t("code",[s._v("CompassPoint")]),s._v(" 枚举的细化，使用字符串类型的原始值来表示各个方向的名称：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CompassPoint")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" north"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" south"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" east"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" west\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("上面例子中，"),t("code",[s._v("CompassPoint.south")]),s._v(" 拥有隐式原始值 "),t("code",[s._v("south")]),s._v("，依次类推。")]),s._v(" "),t("p",[s._v("使用枚举成员的 "),t("code",[s._v("rawValue")]),s._v(" 属性可以访问该枚举成员的原始值：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" earthsOrder "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Planet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("earth"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rawValue\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// earthsOrder 值为 3")]),s._v("\n\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" sunsetDirection "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CompassPoint")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("west"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rawValue\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// sunsetDirection 值为 "west"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h3",{attrs:{id:"使用原始值初始化枚举实例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用原始值初始化枚举实例"}},[s._v("#")]),s._v(" 使用原始值初始化枚举实例")]),s._v(" "),t("p",[s._v("如果在定义枚举类型的时候使用了原始值，那么将会自动获得一个初始化方法，这个方法接收一个叫做 "),t("code",[s._v("rawValue")]),s._v(" 的参数，参数类型即为原始值类型，返回值则是枚举成员或 "),t("code",[s._v("nil")]),s._v("。你可以使用这个初始化方法来创建一个新的枚举实例。")]),s._v(" "),t("p",[s._v("这个例子利用原始值 "),t("code",[s._v("7")]),s._v(" 创建了枚举成员 "),t("code",[s._v("Uranus")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" possiblePlanet "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Planet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("rawValue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// possiblePlanet 类型为 Planet? 值为 Planet.uranus")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("然而，并非所有 "),t("code",[s._v("Int")]),s._v(" 值都可以找到一个匹配的行星。因此，原始值构造器总是返回一个"),t("em",[s._v("可选")]),s._v("的枚举成员。在上面的例子中，"),t("code",[s._v("possiblePlanet")]),s._v(" 是 "),t("code",[s._v("Planet?")]),s._v(" 类型，或者说“可选的 "),t("code",[s._v("Planet")]),s._v("”。")]),s._v(" "),t("blockquote",[t("p",[s._v("注意")]),s._v(" "),t("p",[s._v("原始值构造器是一个可失败构造器，因为并不是每一个原始值都有与之对应的枚举成员。更多信息请参见 "),t("RouterLink",{attrs:{to:"/pages/756349/#可失败构造器"}},[s._v("可失败构造器")]),s._v("。")],1)]),s._v(" "),t("p",[s._v("如果你试图寻找一个位置为 "),t("code",[s._v("11")]),s._v(" 的行星，通过原始值构造器返回的可选 "),t("code",[s._v("Planet")]),s._v(" 值将是 "),t("code",[s._v("nil")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" positionToFind "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" somePlanet "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Planet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("rawValue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" positionToFind"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("switch")]),s._v(" somePlanet "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("earth"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Mostly harmless"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Not a safe place for humans"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"There isn't a planet at position ")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("positionToFind")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 打印“There isn't a planet at position 11”")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[s._v("这个例子使用了可选绑定（optional binding），试图通过原始值 "),t("code",[s._v("11")]),s._v(" 来访问一个行星。"),t("code",[s._v("if let somePlanet = Planet(rawValue: 11)")]),s._v(" 语句创建了一个可选 "),t("code",[s._v("Planet")]),s._v("，如果可选 "),t("code",[s._v("Planet")]),s._v(" 的值存在，就会赋值给 "),t("code",[s._v("somePlanet")]),s._v("。在这个例子中，无法检索到位置为 "),t("code",[s._v("11")]),s._v(" 的行星，所以 "),t("code",[s._v("else")]),s._v(" 分支被执行。")]),s._v(" "),t("h2",{attrs:{id:"递归枚举"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#递归枚举"}},[s._v("#")]),s._v(" 递归枚举")]),s._v(" "),t("p",[t("em",[s._v("递归枚举")]),s._v("是一种枚举类型，它有一个或多个枚举成员使用该枚举类型的实例作为关联值。使用递归枚举时，编译器会插入一个间接层。你可以在枚举成员前加上 "),t("code",[s._v("indirect")]),s._v(" 来表示该成员可递归。")]),s._v(" "),t("p",[s._v("例如，下面的例子中，枚举类型存储了简单的算术表达式：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArithmeticExpression")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("number")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("indirect")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("addition")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArithmeticExpression")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArithmeticExpression")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("indirect")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("multiplication")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArithmeticExpression")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArithmeticExpression")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("你也可以在枚举类型开头加上 "),t("code",[s._v("indirect")]),s._v(" 关键字来表明它的所有成员都是可递归的：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("indirect")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArithmeticExpression")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("number")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("addition")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArithmeticExpression")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArithmeticExpression")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("multiplication")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArithmeticExpression")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArithmeticExpression")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("上面定义的枚举类型可以存储三种算术表达式：纯数字、两个表达式相加、两个表达式相乘。枚举成员 "),t("code",[s._v("addition")]),s._v(" 和 "),t("code",[s._v("multiplication")]),s._v(" 的关联值也是算术表达式——这些关联值使得嵌套表达式成为可能。例如，表达式 "),t("code",[s._v("(5 + 4) * 2")]),s._v("，乘号右边是一个数字，左边则是另一个表达式。因为数据是嵌套的，因而用来存储数据的枚举类型也需要支持这种嵌套——这意味着枚举类型需要支持递归。下面的代码展示了使用 "),t("code",[s._v("ArithmeticExpression")]),s._v(" 这个递归枚举创建表达式 "),t("code",[s._v("(5 + 4) * 2")])]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" five "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArithmeticExpression")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("number")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" four "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArithmeticExpression")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("number")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" sum "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArithmeticExpression")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("addition")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("five"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" four"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" product "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArithmeticExpression")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("multiplication")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sum"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArithmeticExpression")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("number")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("要操作具有递归性质的数据结构，使用递归函数是一种直截了当的方式。例如，下面是一个对算术表达式求值的函数：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("evaluate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token omit keyword"}},[s._v("_")]),s._v(" expression"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArithmeticExpression")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("switch")]),s._v(" expression "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("number")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" value\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("addition")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("left")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("right")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("evaluate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("left")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("evaluate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("right")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("multiplication")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("left")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("right")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("evaluate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("left")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("evaluate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("right")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("evaluate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("product"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 打印“18”")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("该函数如果遇到纯数字，就直接返回该数字的值。如果遇到的是加法或乘法运算，则分别计算左边表达式和右边表达式的值，然后相加或相乘。")])])}),[],!1,null,null,null);t.default=e.exports}}]);