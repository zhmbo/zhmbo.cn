(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{437:function(t,s,a){"use strict";a.r(s);var e=a(2),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[s("em",[t._v("结构体")]),t._v("和"),s("em",[t._v("类")]),t._v("作为一种通用而又灵活的结构，成为了人们构建\b代码的\b基础。你可以使用定义常量、变量和函数的语法，为你的结构体和类定义属性、添加方法。")]),t._v(" "),s("p",[t._v("与其他编程语言所不同的是，Swift 并不要求你为自定义的结构体和类的接口与实现代码分别创建文件。你只需在单一的文件中定义一个结构体或者类，系统将会自动生成面向其它代码的外部接口。")]),t._v(" "),s("blockquote",[s("p",[t._v("注意")]),t._v(" "),s("p",[t._v("通常一个"),s("em",[t._v("类")]),t._v("的实例被称为"),s("em",[t._v("对象")]),t._v("。然而相比其他语言，Swift 中结构体和类的功能更加相近，本章中所讨论的大部分功能都可以用在结构体或者类上。因此，这里会使用"),s("em",[t._v("实例")]),t._v("这个更通用的术语。")])]),t._v(" "),s("h2",{attrs:{id:"结构体和类对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结构体和类对比"}},[t._v("#")]),t._v(" 结构体和类对比")]),t._v(" "),s("p",[t._v("Swift 中结构体和类有很多共同点。两者都可以：")]),t._v(" "),s("ul",[s("li",[t._v("定义属性用于存储值")]),t._v(" "),s("li",[t._v("定义方法用于提供功能")]),t._v(" "),s("li",[t._v("定义下标操作用于通过下标语法访问它们的值")]),t._v(" "),s("li",[t._v("定义构造器用于设置初始值")]),t._v(" "),s("li",[t._v("通过扩展以增加默认实现之外的功能")]),t._v(" "),s("li",[t._v("遵循协议以提供某种标准功能")])]),t._v(" "),s("p",[t._v("更多信息请参见 "),s("RouterLink",{attrs:{to:"/pages/ce0459/"}},[t._v("属性")]),t._v("、"),s("RouterLink",{attrs:{to:"/pages/efc653/"}},[t._v("方法")]),t._v("、"),s("RouterLink",{attrs:{to:"/pages/e35887/"}},[t._v("下标")]),t._v("、"),s("RouterLink",{attrs:{to:"/pages/1b072a/"}},[t._v("构造过程")]),t._v("、"),s("RouterLink",{attrs:{to:"/pages/297d1c/"}},[t._v("扩展")]),t._v(" 和 "),s("RouterLink",{attrs:{to:"/pages/82f958/"}},[t._v("协议")]),t._v("。")],1),t._v(" "),s("p",[t._v("与结构体相比，类还有如下的附加功能：")]),t._v(" "),s("ul",[s("li",[t._v("继承允许一个类继承另一个类的特征")]),t._v(" "),s("li",[t._v("类型转换允许在运行时检查和解释一个类实例的类型")]),t._v(" "),s("li",[t._v("析构器允许一个类实例释放任何其所被分配的资源")]),t._v(" "),s("li",[t._v("引用计数允许对一个类的多次引用")])]),t._v(" "),s("p",[t._v("更多信息请参见 "),s("RouterLink",{attrs:{to:"/pages/09b0f4/"}},[t._v("继承")]),t._v("、"),s("RouterLink",{attrs:{to:"/pages/757c02/"}},[t._v("类型转换")]),t._v("、"),s("RouterLink",{attrs:{to:"/pages/c40911/"}},[t._v("析构过程")]),t._v(" 和 "),s("RouterLink",{attrs:{to:"/pages/51a2dd/"}},[t._v("自动引用计数")]),t._v("。")],1),t._v(" "),s("p",[t._v("类支持的附加功能是以增加复杂性为代价的。作为一般准则，优先使用结构体，因为它们更容易理解，仅在适当或必要时才使用类。实际上，这意味着你的大多数自定义数据类型都会是结构体和枚举。更多详细的比较参见 "),s("a",{attrs:{href:"https://developer.apple.com/documentation/swift/choosing_between_structures_and_classes",target:"_blank",rel:"noopener noreferrer"}},[t._v("在结构和类之间进行选择"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"类型定义的语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型定义的语法"}},[t._v("#")]),t._v(" 类型定义的语法")]),t._v(" "),s("p",[t._v("结构体和类有着相似的定义方式。你通过 "),s("code",[t._v("struct")]),t._v(" 关键字引入结构体，通过 "),s("code",[t._v("class")]),t._v(" 关键字引入类，并将它们的具体定义放在一对大括号中：")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SomeStructure")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在这里定义结构体")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SomeClass")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在这里定义类")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("blockquote",[s("p",[t._v("注意")]),t._v(" "),s("p",[t._v("每当你定义一个新的结构体或者类时，你都是定义了一个新的 Swift 类型。请使用 "),s("code",[t._v("UpperCamelCase")]),t._v(" 这种方式来命名类型（如这里的 "),s("code",[t._v("SomeClass")]),t._v(" 和 "),s("code",[t._v("SomeStructure")]),t._v("），以便符合标准 Swift 类型的大写命名风格（如 "),s("code",[t._v("String")]),t._v("，"),s("code",[t._v("Int")]),t._v(" 和 "),s("code",[t._v("Bool")]),t._v("）。请使用 "),s("code",[t._v("lowerCamelCase")]),t._v(" 这种方式来命名属性和方法（如 "),s("code",[t._v("frameRate")]),t._v(" 和 "),s("code",[t._v("incrementCount")]),t._v("），以便和类型名区分。")])]),t._v(" "),s("p",[t._v("以下是定义结构体和定义类的示例：")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Resolution")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" width "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" height "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("VideoMode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" resolution "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Resolution")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" interlaced "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" frameRate "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("p",[t._v("在上面的示例中定义了一个名为 "),s("code",[t._v("Resolution")]),t._v(" 的结构体，用来描述基于像素的分辨率。这个结构体包含了名为 "),s("code",[t._v("width")]),t._v(" 和 "),s("code",[t._v("height")]),t._v(" 的两个存储属性。存储属性是与结构体或者类绑定的，并存储在其中的常量或变量。当这两个属性被初始化为整数 "),s("code",[t._v("0")]),t._v(" 的时候，它们会被推断为 "),s("code",[t._v("Int")]),t._v(" 类型。")]),t._v(" "),s("p",[t._v("在上面的示例还定义了一个名为 "),s("code",[t._v("VideoMode")]),t._v(" 的类，用来描述视频显示器的某个特定视频模式。这个类包含了四个可变的存储属性。第一个， "),s("code",[t._v("resolution")]),t._v("，被初始化为一个新的 "),s("code",[t._v("Resolution")]),t._v(" 结构体的实例，属性类型被推断为 "),s("code",[t._v("Resolution")]),t._v("。新 "),s("code",[t._v("VideoMode")]),t._v(" 实例同时还会初始化其它三个属性，它们分别是初始值为 "),s("code",[t._v("false")]),t._v(" 的 "),s("code",[t._v("interlaced")]),t._v("（意为“非隔行视频”），初始值为 "),s("code",[t._v("0.0")]),t._v(" 的 "),s("code",[t._v("frameRate")]),t._v("，以及值为可选 "),s("code",[t._v("String")]),t._v(" 的 "),s("code",[t._v("name")]),t._v("。因为 "),s("code",[t._v("name")]),t._v(" 是一个可选类型，它会被自动赋予一个默认值 "),s("code",[t._v("nil")]),t._v("，意为“没有 "),s("code",[t._v("name")]),t._v(" 值”。")]),t._v(" "),s("h3",{attrs:{id:"结构体和类的实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结构体和类的实例"}},[t._v("#")]),t._v(" 结构体和类的实例")]),t._v(" "),s("p",[s("code",[t._v("Resolution")]),t._v(" 结构体和 "),s("code",[t._v("VideoMode")]),t._v(" 类的定义仅描述了什么是 "),s("code",[t._v("Resolution")]),t._v(" 和 "),s("code",[t._v("VideoMode")]),t._v("。它们并没有描述一个特定的分辨率（resolution）或者视频模式（video mode）。为此，你需要创建结构体或者类的一个实例。")]),t._v(" "),s("p",[t._v("创建结构体和类实例的语法非常相似：")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" someResolution "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Resolution")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" someVideoMode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("VideoMode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("结构体和类都使用构造器语法来创建新的实例。构造器语法的最简单形式是在结构体或者类的类型名称后跟随一对空括号，如 "),s("code",[t._v("Resolution()")]),t._v(" 或 "),s("code",[t._v("VideoMode()")]),t._v("。通过这种方式所创建的类或者结构体实例，其属性均会被初始化为默认值。"),s("RouterLink",{attrs:{to:"/pages/1b072a/"}},[t._v("构造过程")]),t._v(" 章节会对类和结构体的初始化进行更详细的讨论。")],1),t._v(" "),s("h3",{attrs:{id:"属性访问"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#属性访问"}},[t._v("#")]),t._v(" 属性访问")]),t._v(" "),s("p",[t._v("你可以通过使用"),s("em",[t._v("点语法")]),t._v("访问实例的属性。其语法规则是，实例名后面紧跟属性名，两者以点号（"),s("code",[t._v(".")]),t._v("）分隔，不带空格：")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The width of someResolution is ')]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("\\(")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[t._v("someResolution"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("width")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 打印 "The width of someResolution is 0"')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("在上面的例子中，"),s("code",[t._v("someResolution.width")]),t._v(" 引用 "),s("code",[t._v("someResolution")]),t._v(" 的 "),s("code",[t._v("width")]),t._v(" 属性，返回 "),s("code",[t._v("width")]),t._v(" 的初始值 "),s("code",[t._v("0")]),t._v("。")]),t._v(" "),s("p",[t._v("你也可以访问子属性，如 "),s("code",[t._v("VideoMode")]),t._v(" 中 "),s("code",[t._v("resolution")]),t._v(" 属性的 "),s("code",[t._v("width")]),t._v(" 属性：")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The width of someVideoMode is ')]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("\\(")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[t._v("someVideoMode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("resolution"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("width")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 打印 "The width of someVideoMode is 0"')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("你也可以使用点语法为可变属性赋值：")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[t._v("someVideoMode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("resolution"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("width "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1280")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The width of someVideoMode is now ')]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("\\(")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[t._v("someVideoMode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("resolution"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("width")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 打印 "The width of someVideoMode is now 1280"')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h3",{attrs:{id:"结构体类型的成员逐一构造器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结构体类型的成员逐一构造器"}},[t._v("#")]),t._v(" 结构体类型的成员逐一构造器")]),t._v(" "),s("p",[t._v("所有结构体都有一个自动生成的"),s("em",[t._v("成员逐一构造器")]),t._v("，用于初始化新结构体实例中成员的属性。新实例中各个属性的初始值可以通过属性的名称传递到成员逐一构造器之中：")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" vga "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Resolution")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("width"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("640")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" height"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("480")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("与结构体不同，类实例没有默认的成员逐一构造器。"),s("RouterLink",{attrs:{to:"/pages/1b072a/"}},[t._v("构造过程")]),t._v(" 章节会对构造器进行更详细的讨论。")],1),t._v(" "),s("h2",{attrs:{id:"结构体和枚举是值类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结构体和枚举是值类型"}},[t._v("#")]),t._v(" 结构体和枚举是值类型")]),t._v(" "),s("p",[s("em",[t._v("值类型")]),t._v("是这样一种类型，当它被赋值给一个变量、常量或者被传递给一个函数的时候，其值会被"),s("em",[t._v("拷贝")]),t._v("。")]),t._v(" "),s("p",[t._v("在之前的章节中，你已经大量使用了值类型。实际上，Swift 中所有的基本类型：整数（integer）、浮点数（floating-point number）、布尔值（boolean）、字符串（string)、数组（array）和字典（dictionary），都是值类型，其底层也是使用结构体实现的。")]),t._v(" "),s("p",[t._v("Swift 中所有的结构体和枚举类型都是值类型。这意味着它们的实例，以及实例中所包含的任何值类型的属性，在代码中传递的时候都会被复制。")]),t._v(" "),s("blockquote",[s("p",[t._v("注意\b")]),t._v(" "),s("p",[t._v("标准库定义的集合，例如数组，字典和字符串，都对复制进行了优化以降低性能成本。新集合不会立即复制，而是跟原集合共享同一份内存，共享同样的元素。在集合的某个副本要被修改前，才会复制它的元素。而你在代码中看起来就像是立即发生了复制。")])]),t._v(" "),s("p",[t._v("请看下面这个示例，其使用了上一个示例中的 "),s("code",[t._v("Resolution")]),t._v(" 结构体：")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" hd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Resolution")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("width"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1920")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" height"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1080")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" cinema "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" hd\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("在以上示例中，声明了一个名为 "),s("code",[t._v("hd")]),t._v(" 的常量，其值为一个初始化为全高清视频分辨率（"),s("code",[t._v("1920")]),t._v(" 像素宽，"),s("code",[t._v("1080")]),t._v(" 像素高）的 "),s("code",[t._v("Resolution")]),t._v(" 实例。")]),t._v(" "),s("p",[t._v("然后示例中又声明了一个名为 "),s("code",[t._v("cinema")]),t._v(" 的变量，并将 "),s("code",[t._v("hd")]),t._v(" 赋值给它。因为 "),s("code",[t._v("Resolution")]),t._v(" 是一个结构体，所以会先创建一个现有实例的副本，然后将副本赋值给 "),s("code",[t._v("cinema")]),t._v(" 。尽管 "),s("code",[t._v("hd")]),t._v(" 和 "),s("code",[t._v("cinema")]),t._v(" 有着相同的宽（width）和高（height），但是在幕后它们是两个完全不同的实例。")]),t._v(" "),s("p",[t._v("下面，为了符合数码影院放映的需求（"),s("code",[t._v("2048")]),t._v(" 像素宽，"),s("code",[t._v("1080")]),t._v(" 像素高），"),s("code",[t._v("cinema")]),t._v(" 的 "),s("code",[t._v("width")]),t._v(" 属性被修改为稍微宽一点的 2K 标准：")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[t._v("cinema"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("width "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2048")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("查看 "),s("code",[t._v("cinema")]),t._v(" 的 "),s("code",[t._v("width")]),t._v(" 属性，它的值确实改为了 "),s("code",[t._v("2048")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cinema is now  ')]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("\\(")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[t._v("cinema"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("width")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(' pixels wide"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 打印 "cinema is now 2048 pixels wide"')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("然而，初始的 "),s("code",[t._v("hd")]),t._v(" 实例中 "),s("code",[t._v("width")]),t._v(" 属性还是 "),s("code",[t._v("1920")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hd is still ')]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("\\(")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[t._v("hd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("width")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(' pixels wide"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 打印 "hd is still 1920 pixels wide"')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("将 "),s("code",[t._v("hd")]),t._v(" 赋值给 "),s("code",[t._v("cinema")]),t._v(" 时，"),s("code",[t._v("hd")]),t._v(" 中所存储的"),s("em",[t._v("值")]),t._v("会拷贝到新的 "),s("code",[t._v("cinema")]),t._v(" 实例中。结果就是两个完全独立的实例包含了相同的数值。由于两者相互独立，因此将 "),s("code",[t._v("cinema")]),t._v(" 的 "),s("code",[t._v("width")]),t._v(" 修改为 "),s("code",[t._v("2048")]),t._v(" 并不会影响 "),s("code",[t._v("hd")]),t._v(" 中的 "),s("code",[t._v("width")]),t._v(" 的值，如下图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/zhmbo/static@master/img/20201110184415.png",alt:"img"}})]),t._v(" "),s("p",[t._v("sharedStateStruct_2x")]),t._v(" "),s("p",[t._v("枚举也遵循相同的行为准则：")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CompassPoint")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" north"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" south"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" east"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" west\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mutating")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("turnNorth")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("north\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" currentDirection "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CompassPoint")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("west\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" rememberedDirection "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentDirection\ncurrentDirection"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("turnNorth")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The current direction is ')]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("\\(")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[t._v("currentDirection")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The remembered direction is ')]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("\\(")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[t._v("rememberedDirection")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 打印 "The current direction is north"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 打印 "The remembered direction is west"')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br")])]),s("p",[t._v("当 "),s("code",[t._v("rememberedDirection")]),t._v(" 被赋予了 "),s("code",[t._v("currentDirection")]),t._v(" 的值，实际上它被赋予的是值的一个拷贝。赋值过程结束后再修改 "),s("code",[t._v("currentDirection")]),t._v(" 的值并不影响 "),s("code",[t._v("rememberedDirection")]),t._v(" 所储存的原始值的拷贝。")]),t._v(" "),s("h2",{attrs:{id:"类是引用类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类是引用类型"}},[t._v("#")]),t._v(" 类是引用类型")]),t._v(" "),s("p",[t._v("与值类型不同，"),s("em",[t._v("引用类型")]),t._v("在被赋予到一个变量、常量或者被传递到一个函数时，其值不会被拷贝。因此，使用的是已存在实例的引用，而不是其拷贝。")]),t._v(" "),s("p",[t._v("请看下面这个示例，其使用了之前定义的 "),s("code",[t._v("VideoMode")]),t._v(" 类：")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" tenEighty "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("VideoMode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntenEighty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("resolution "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" hd\ntenEighty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("interlaced "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\ntenEighty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1080i"')])]),t._v("\ntenEighty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("frameRate "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("25.0")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("以上示例中，声明了一个名为 "),s("code",[t._v("tenEighty")]),t._v(" 的常量，并让其引用一个 "),s("code",[t._v("VideoMode")]),t._v(" 类的新实例。它的视频模式（video mode）被赋值为之前创建的 HD 分辨率（"),s("code",[t._v("1920")]),t._v("*"),s("code",[t._v("1080")]),t._v("）的一个拷贝。然后将它设置为隔行视频，名字设为 "),s("code",[t._v("“1080i”")]),t._v("，并将帧率设置为 "),s("code",[t._v("25.0")]),t._v(" 帧每秒。")]),t._v(" "),s("p",[t._v("接下来，将 "),s("code",[t._v("tenEighty")]),t._v(" 赋值给一个名为 "),s("code",[t._v("alsoTenEighty")]),t._v(" 的新常量，并修改 "),s("code",[t._v("alsoTenEighty")]),t._v(" 的帧率：")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" alsoTenEighty "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tenEighty\nalsoTenEighty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("frameRate "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30.0")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("因为类是引用类型，所以 "),s("code",[t._v("tenEight")]),t._v(" 和 "),s("code",[t._v("alsoTenEight")]),t._v(" 实际上引用的是同一个 "),s("code",[t._v("VideoMode")]),t._v(" 实例。换句话说，它们是同一个实例的两种叫法，如下图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/zhmbo/static@master/img/20201110184444.png",alt:"img"}})]),t._v(" "),s("p",[t._v("sharedStateClass_2x")]),t._v(" "),s("p",[t._v("通过查看 "),s("code",[t._v("tenEighty")]),t._v(" 的 "),s("code",[t._v("frameRate")]),t._v(" 属性，可以看到它正确地显示了底层的 "),s("code",[t._v("VideoMode")]),t._v(" 实例的新帧率 "),s("code",[t._v("30.0")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The frameRate property of tenEighty is now ')]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("\\(")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[t._v("tenEighty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("frameRate")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 打印 "The frameRate property of theEighty is now 30.0"')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("这个例子也显示了为何引用类型更加难以理解。如果 "),s("code",[t._v("tenEighty")]),t._v(" 和 "),s("code",[t._v("alsoTenEighty")]),t._v(" 在你代码中的位置相距很远，那么就很难找到所有修改视频模式的地方。无论在哪使用 "),s("code",[t._v("tenEighty")]),t._v("，你都要考虑使用 "),s("code",[t._v("alsoTenEighty")]),t._v(" 的代码，反之亦然。相反，值类型就更容易理解了，因为你的源码中与同一个值交互的代码都很近。")]),t._v(" "),s("p",[t._v("需要注意的是 "),s("code",[t._v("tenEighty")]),t._v(" 和 "),s("code",[t._v("alsoTenEighty")]),t._v(" 被声明为常量而不是变量。然而你依然可以改变 "),s("code",[t._v("tenEighty.frameRate")]),t._v(" 和 "),s("code",[t._v("alsoTenEighty.frameRate")]),t._v("，这是因为 "),s("code",[t._v("tenEighty")]),t._v(" 和 "),s("code",[t._v("alsoTenEighty")]),t._v(" 这两个常量的值并未改变。它们并不“存储”这个 "),s("code",[t._v("VideoMode")]),t._v(" 实例，而仅仅是对 "),s("code",[t._v("VideoMode")]),t._v(" 实例的引用。所以，改变的是底层 "),s("code",[t._v("VideoMode")]),t._v(" 实例的 "),s("code",[t._v("frameRate")]),t._v(" 属性，而不是\b指向 "),s("code",[t._v("VideoMode")]),t._v(" 的常量引用的值。")]),t._v(" "),s("h3",{attrs:{id:"恒等运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#恒等运算符"}},[t._v("#")]),t._v(" 恒等运算符")]),t._v(" "),s("p",[t._v("因为类是引用类型，所以多个常量和变量可能在幕后同时引用同一个类实例。（对于结构体和枚举来说，这并不成立。因为它们作为值类型，在被赋予到常量、变量或者传递到函数时，其值总是会被拷贝。）")]),t._v(" "),s("p",[t._v("判定两个常量或者变量是否引用同一个类实例有时很有用。为了达到这个目的，Swift 提供了两个恒等运算符：")]),t._v(" "),s("ul",[s("li",[t._v("相同（"),s("code",[t._v("===")]),t._v("）")]),t._v(" "),s("li",[t._v("不相同（"),s("code",[t._v("!==")]),t._v("）")])]),t._v(" "),s("p",[t._v("使用这两个运算符检测两个常量或者变量是否引用了同一个实例：")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" tenEighty "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" alsoTenEighty "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tenEighty and alsoTenEighty refer to the same VideoMode instance."')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 打印 "tenEighty and alsoTenEighty refer to the same VideoMode instance."')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("请注意，“相同”（用三个等号表示，"),s("code",[t._v("===")]),t._v("）与“等于”（用两个等号表示，"),s("code",[t._v("==")]),t._v("）的不同。“相同”表示两个类类型（class type）的常量或者变量引用同一个类实例。“等于”表示两个实例的值“相等”或“等价”，判定时要遵照设计者定义的评判标准。")]),t._v(" "),s("p",[t._v("当在定义你的自定义结构体和类的时候，你有义务来决定判定两个实例“相等”的标准。在章节 "),s("RouterLink",{attrs:{to:"/pages/9854b9/#等价运算符"}},[t._v("等价运算符")]),t._v(" 中将会详细介绍实现自定义 == 和 != 运算符的流程。")],1),t._v(" "),s("h3",{attrs:{id:"指针"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#指针"}},[t._v("#")]),t._v(" 指针")]),t._v(" "),s("p",[t._v("如果你有 C，C++ 或者 Objective-C 语言的经验，那么你也许会知道这些语言使用"),s("em",[t._v("指针")]),t._v("来引用内存中的地址。Swift 中引用了某个引用类型实例的常量或变量，与 C 语言中的指针类似，不过它并不直接指向某个内存地址，也不要求你使用星号（"),s("code",[t._v("*")]),t._v("）来表明你在创建一个引用。相反，Swift 中引用的定义方式\b与其它的常量或变量的一样。如果需要直接与指针交互，你可以使用标准库提供的指针和缓冲区类型 —— 参见 "),s("a",{attrs:{href:"https://developer.apple.com/documentation/swift/swift_standard_library/manual_memory_management",target:"_blank",rel:"noopener noreferrer"}},[t._v("手动管理内存"),s("OutboundLink")],1),t._v("。")])])}),[],!1,null,null,null);s.default=n.exports}}]);