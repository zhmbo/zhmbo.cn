(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{434:function(s,t,a){"use strict";a.r(t);var e=a(2),n=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("一个类可以"),t("em",[s._v("继承")]),s._v("另一个类的方法，属性和其它特性。当一个类继承其它类时，继承类叫"),t("em",[s._v("子类")]),s._v("，被继承类叫"),t("em",[s._v("超类（或父类）")]),s._v(" 。在 Swift 中，继承是区分「类」与其它类型的一个基本特征。")]),s._v(" "),t("p",[s._v("在 Swift 中，类可以调用和访问超类的方法、属性和下标，并且可以重写这些方法，属性和下标来优化或修改它们的行为。Swift 会检查你的重写定义在超类中是否有匹配的定义，以此确保你的重写行为是正确的。")]),s._v(" "),t("p",[s._v("可以为类中继承来的属性添加属性观察器，这样一来，当属性值改变时，类就会被通知到。可以为任何属性添加属性观察器，无论它原本被定义为存储型属性还是计算型属性。")]),s._v(" "),t("h2",{attrs:{id:"定义一个基类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义一个基类"}},[s._v("#")]),s._v(" 定义一个基类")]),s._v(" "),t("p",[s._v("不继承于其它类的类，称之为"),t("em",[s._v("基类")]),s._v("。")]),s._v(" "),t("blockquote",[t("p",[s._v("注意")]),s._v(" "),t("p",[s._v("Swift 中的类并不是从一个通用的基类继承而来的。如果你不为自己定义的类指定一个超类的话，这个类就会自动成为基类。")])]),s._v(" "),t("p",[s._v("下面的例子定义了一个叫 "),t("code",[s._v("Vehicle")]),s._v(" 的基类。这个基类声明了一个名为 "),t("code",[s._v("currentSpeed")]),s._v("，默认值是 "),t("code",[s._v("0.0")]),s._v(" 的存储型属性（属性类型推断为 "),t("code",[s._v("Double")]),s._v("）。"),t("code",[s._v("currentSpeed")]),s._v(" 属性的值被一个 "),t("code",[s._v("String")]),s._v(" 类型的只读计算型属性 "),t("code",[s._v("description")]),s._v(" 使用，用来创建对于车辆的描述。")]),s._v(" "),t("p",[t("code",[s._v("Vehicle")]),s._v(" 基类还定义了一个名为 "),t("code",[s._v("makeNoise")]),s._v(" 的方法。这个方法实际上不为 "),t("code",[s._v("Vehicle")]),s._v(" 实例做任何事，但之后将会被 "),t("code",[s._v("Vehicle")]),s._v(" 的子类定制：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Vehicle")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" currentSpeed "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" description"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"traveling at ')]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("currentSpeed")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v(' miles per hour"')])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("makeNoise")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 什么也不做——因为车辆不一定会有噪音")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("可以用初始化语法创建一个 "),t("code",[s._v("Vehicle")]),s._v(" 的新实例，即类名后面跟一个空括号：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" someVehicle "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Vehicle")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("现在已经创建了一个 "),t("code",[s._v("Vehicle")]),s._v(" 的新实例，你可以访问它的 "),t("code",[s._v("description")]),s._v(" 属性来打印车辆的当前速度：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Vehicle: ')]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("someVehicle"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("description")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 打印“Vehicle: traveling at 0.0 miles per hour”")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[t("code",[s._v("Vehicle")]),s._v(" 类定义了一个具有通用特性的车辆类，但实际上对于它本身来说没什么用处。为了让它变得更加有用，还需要进一步完善它，从而能够描述一个具体类型的车辆。")]),s._v(" "),t("h2",{attrs:{id:"子类生成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#子类生成"}},[s._v("#")]),s._v(" 子类生成")]),s._v(" "),t("p",[t("em",[s._v("子类生成")]),s._v("指的是在一个已有类的基础上创建一个新的类。子类继承超类的特性，并且可以进一步完善。你还可以为子类添加新的特性。")]),s._v(" "),t("p",[s._v("为了指明某个类的超类，将超类名写在子类名的后面，用冒号分隔：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SomeClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SomeSuperclass")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这里是子类的定义")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("下一个例子，定义了一个叫 "),t("code",[s._v("Bicycle")]),s._v(" 的子类，继承自超类 "),t("code",[s._v("Vehicle")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Bicycle")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Vehicle")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" hasBasket "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("新的 "),t("code",[s._v("Bicycle")]),s._v(" 类自动继承 "),t("code",[s._v("Vehicle")]),s._v(" 类的所有特性，比如 "),t("code",[s._v("currentSpeed")]),s._v(" 和 "),t("code",[s._v("description")]),s._v(" 属性，还有 "),t("code",[s._v("makeNoise()")]),s._v(" 方法。")]),s._v(" "),t("p",[s._v("除了所继承的特性，"),t("code",[s._v("Bicycle")]),s._v(" 类还定义了一个默认值为 "),t("code",[s._v("false")]),s._v(" 的存储型属性 "),t("code",[s._v("hasBasket")]),s._v("（属性推断为 "),t("code",[s._v("Bool")]),s._v("）。")]),s._v(" "),t("p",[s._v("默认情况下，你创建的所有新的 "),t("code",[s._v("Bicycle")]),s._v(" 实例不会有一个篮子（即 "),t("code",[s._v("hasBasket")]),s._v(" 属性默认为 "),t("code",[s._v("false")]),s._v("）。创建该实例之后，你可以为 "),t("code",[s._v("Bicycle")]),s._v(" 实例设置 "),t("code",[s._v("hasBasket")]),s._v(" 属性为 "),t("code",[s._v("ture")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" bicycle "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Bicycle")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nbicycle"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("hasBasket "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("你还可以修改 "),t("code",[s._v("Bicycle")]),s._v(" 实例所继承的 "),t("code",[s._v("currentSpeed")]),s._v(" 属性，和查询实例所继承的 "),t("code",[s._v("description")]),s._v(" 属性：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[s._v("bicycle"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("currentSpeed "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("15.0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Bicycle: ')]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("bicycle"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("description")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 打印“Bicycle: traveling at 15.0 miles per hour”")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("子类还可以继续被其它类继承，下面的示例为 "),t("code",[s._v("Bicycle")]),s._v(" 创建了一个名为 "),t("code",[s._v("Tandem")]),s._v("（双人自行车）的子类：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Tandem")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Bicycle")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" currentNumberOfPassengers "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("code",[s._v("Tandem")]),s._v(" 从 "),t("code",[s._v("Bicycle")]),s._v(" 继承了所有的属性与方法，这又使它同时继承了 "),t("code",[s._v("Vehicle")]),s._v(" 的所有属性与方法。"),t("code",[s._v("Tandem")]),s._v(" 也增加了一个新的叫做 "),t("code",[s._v("currentNumberOfPassengers")]),s._v(" 的存储型属性，默认值为 "),t("code",[s._v("0")]),s._v("。")]),s._v(" "),t("p",[s._v("如果你创建了一个 "),t("code",[s._v("Tandem")]),s._v(" 的实例，你可以使用它所有的新属性和继承的属性，还能查询从 "),t("code",[s._v("Vehicle")]),s._v(" 继承来的只读属性 "),t("code",[s._v("description")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" tandem "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Tandem")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\ntandem"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("hasBasket "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\ntandem"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("currentNumberOfPassengers "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\ntandem"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("currentSpeed "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("22.0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Tandem: ')]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("tandem"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("description")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 打印：“Tandem: traveling at 22.0 miles per hour”")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h2",{attrs:{id:"重写"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重写"}},[s._v("#")]),s._v(" 重写")]),s._v(" "),t("p",[s._v("子类可以为继承来的实例方法，类方法，实例属性，类属性，或下标提供自己定制的实现。我们把这种行为叫"),t("em",[s._v("重写")]),s._v("。")]),s._v(" "),t("p",[s._v("如果要重写某个特性，你需要在重写定义的前面加上 "),t("code",[s._v("override")]),s._v(" 关键字。这么做，就表明了你是想提供一个重写版本，而非错误地提供了一个相同的定义。意外的重写行为可能会导致不可预知的错误，任何缺少 "),t("code",[s._v("override")]),s._v(" 关键字的重写都会在编译时被认定为错误。")]),s._v(" "),t("p",[t("code",[s._v("override")]),s._v(" 关键字会提醒 Swift 编译器去检查该类的超类（或其中一个超类）是否有匹配重写版本的声明。这个检查可以确保你的重写定义是正确的。")]),s._v(" "),t("h3",{attrs:{id:"访问超类的方法，属性及下标"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#访问超类的方法，属性及下标"}},[s._v("#")]),s._v(" 访问超类的方法，属性及下标")]),s._v(" "),t("p",[s._v("当你在子类中重写超类的方法，属性或下标时，有时在你的重写版本中使用已经存在的超类实现会大有裨益。比如，你可以完善已有实现的行为，或在一个继承来的变量中存储一个修改过的值。")]),s._v(" "),t("p",[s._v("在合适的地方，你可以通过使用 "),t("code",[s._v("super")]),s._v(" 前缀来访问超类版本的方法，属性或下标：")]),s._v(" "),t("ul",[t("li",[s._v("在方法 "),t("code",[s._v("someMethod()")]),s._v(" 的重写实现中，可以通过 "),t("code",[s._v("super.someMethod()")]),s._v(" 来调用超类版本的 "),t("code",[s._v("someMethod()")]),s._v(" 方法。")]),s._v(" "),t("li",[s._v("在属性 "),t("code",[s._v("someProperty")]),s._v(" 的 getter 或 setter 的重写实现中，可以通过 "),t("code",[s._v("super.someProperty")]),s._v(" 来访问超类版本的 "),t("code",[s._v("someProperty")]),s._v(" 属性。")]),s._v(" "),t("li",[s._v("在下标的重写实现中，可以通过 "),t("code",[s._v("super[someIndex]")]),s._v(" 来访问超类版本中的相同下标。")])]),s._v(" "),t("h3",{attrs:{id:"重写方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重写方法"}},[s._v("#")]),s._v(" 重写方法")]),s._v(" "),t("p",[s._v("在子类中，你可以重写继承来的实例方法或类方法，提供一个定制或替代的方法实现。")]),s._v(" "),t("p",[s._v("下面的例子定义了 "),t("code",[s._v("Vehicle")]),s._v(" 的一个新的子类，叫 "),t("code",[s._v("Train")]),s._v("，它重写了从 "),t("code",[s._v("Vehicle")]),s._v(" 类继承来的 "),t("code",[s._v("makeNoise()")]),s._v(" 方法：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Train")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Vehicle")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("makeNoise")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Choo Choo"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("如果你创建一个 "),t("code",[s._v("Train")]),s._v(" 的新实例，并调用了它的 "),t("code",[s._v("makeNoise()")]),s._v(" 方法，你就会发现 "),t("code",[s._v("Train")]),s._v(" 版本的方法被调用：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" train "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Train")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\ntrain"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("makeNoise")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 打印“Choo Choo”")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h3",{attrs:{id:"重写属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重写属性"}},[s._v("#")]),s._v(" 重写属性")]),s._v(" "),t("p",[s._v("你可以重写继承来的实例属性或类型属性，提供自己定制的 getter 和 setter，或添加属性观察器，使重写的属性可以观察到底层的属性值什么时候发生改变。")]),s._v(" "),t("h4",{attrs:{id:"重写属性的-getters-和-setters"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重写属性的-getters-和-setters"}},[s._v("#")]),s._v(" 重写属性的 Getters 和 Setters")]),s._v(" "),t("p",[s._v("你可以提供定制的 getter（或 setter）来重写任何一个继承来的属性，无论这个属性是存储型还是计算型属性。子类并不知道继承来的属性是存储型的还是计算型的，它只知道继承来的属性会有一个名字和类型。你在重写一个属性时，必须将它的名字和类型都写出来。这样才能使编译器去检查你重写的属性是与超类中同名同类型的属性相匹配的。")]),s._v(" "),t("p",[s._v("你可以将一个继承来的只读属性重写为一个读写属性，只需要在重写版本的属性里提供 getter 和 setter 即可。但是，你不可以将一个继承来的读写属性重写为一个只读属性。")]),s._v(" "),t("blockquote",[t("p",[s._v("注意")]),s._v(" "),t("p",[s._v("如果你在重写属性中提供了 setter，那么你也一定要提供 getter。如果你不想在重写版本中的 getter 里修改继承来的属性值，你可以直接通过 "),t("code",[s._v("super.someProperty")]),s._v(" 来返回继承来的值，其中 "),t("code",[s._v("someProperty")]),s._v(" 是你要重写的属性的名字。")])]),s._v(" "),t("p",[s._v("以下的例子定义了一个新类，叫 "),t("code",[s._v("Car")]),s._v("，它是 "),t("code",[s._v("Vehicle")]),s._v(" 的子类。这个类引入了一个新的存储型属性叫做 "),t("code",[s._v("gear")]),s._v("，默认值为整数 "),t("code",[s._v("1")]),s._v("。"),t("code",[s._v("Car")]),s._v(" 类重写了继承自 "),t("code",[s._v("Vehicle")]),s._v(" 的 "),t("code",[s._v("description")]),s._v(" 属性，提供包含当前档位的自定义描述：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Car")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Vehicle")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" gear "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" description"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("description "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" in gear ')]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("gear")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"')])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("重写的 "),t("code",[s._v("description")]),s._v(" 属性首先要调用 "),t("code",[s._v("super.description")]),s._v(" 返回 "),t("code",[s._v("Vehicle")]),s._v(" 类的 "),t("code",[s._v("description")]),s._v(" 属性。之后，"),t("code",[s._v("Car")]),s._v(" 类版本的 "),t("code",[s._v("description")]),s._v(" 在末尾增加了一些额外的文本来提供关于当前档位的信息。")]),s._v(" "),t("p",[s._v("如果你创建了 "),t("code",[s._v("Car")]),s._v(" 的实例并且设置了它的 "),t("code",[s._v("gear")]),s._v(" 和 "),t("code",[s._v("currentSpeed")]),s._v(" 属性，你可以看到它的 "),t("code",[s._v("description")]),s._v(" 返回了 "),t("code",[s._v("Car")]),s._v(" 中的自定义描述：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" car "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Car")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\ncar"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("currentSpeed "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("25.0")]),s._v("\ncar"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("gear "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Car: ')]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("car"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("description")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 打印“Car: traveling at 25.0 miles per hour in gear 3”")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h4",{attrs:{id:"重写属性观察器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重写属性观察器"}},[s._v("#")]),s._v(" 重写属性观察器")]),s._v(" "),t("p",[s._v("你可以通过重写属性为一个继承来的属性添加属性观察器。这样一来，无论被继承属性原本是如何实现的，当其属性值发生改变时，你就会被通知到。关于属性观察器的更多内容，请看 "),t("RouterLink",{attrs:{to:"/pages/ce0459/#属性观察器"}},[s._v("属性观察器")]),s._v("。")],1),s._v(" "),t("blockquote",[t("p",[s._v("注意")]),s._v(" "),t("p",[s._v("你不可以为继承来的常量存储型属性或继承来的只读计算型属性添加属性观察器。这些属性的值是不可以被设置的，所以，为它们提供 "),t("code",[s._v("willSet")]),s._v(" 或 "),t("code",[s._v("didSet")]),s._v(" 实现也是不恰当。 此外还要注意，你不可以同时提供重写的 setter 和重写的属性观察器。如果你想观察属性值的变化，并且你已经为那个属性提供了定制的 setter，那么你在 setter 中就可以观察到任何值变化了。")])]),s._v(" "),t("p",[s._v("下面的例子定义了一个新类叫 "),t("code",[s._v("AutomaticCar")]),s._v("，它是 "),t("code",[s._v("Car")]),s._v(" 的子类。"),t("code",[s._v("AutomaticCar")]),s._v(" 表示自动档汽车，它可以根据当前的速度自动选择合适的档位:")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AutomaticCar")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Car")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" currentSpeed"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Double")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("didSet")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            gear "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("currentSpeed "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("当你设置 "),t("code",[s._v("AutomaticCar")]),s._v(" 的 "),t("code",[s._v("currentSpeed")]),s._v(" 属性，属性的 "),t("code",[s._v("didSet")]),s._v(" 观察器就会自动地设置 "),t("code",[s._v("gear")]),s._v(" 属性，为新的速度选择一个合适的档位。具体来说就是，属性观察器将新的速度值除以 "),t("code",[s._v("10")]),s._v("，然后向下取得最接近的整数值，最后加 "),t("code",[s._v("1")]),s._v(" 来得到档位 "),t("code",[s._v("gear")]),s._v(" 的值。例如，速度为 "),t("code",[s._v("35.0")]),s._v(" 时，档位为 "),t("code",[s._v("4")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" automatic "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AutomaticCar")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nautomatic"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("currentSpeed "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("35.0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-literal"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"AutomaticCar: ')]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("\\(")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[s._v("automatic"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("description")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 打印“AutomaticCar: traveling at 35.0 miles per hour in gear 4”")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h2",{attrs:{id:"防止重写"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#防止重写"}},[s._v("#")]),s._v(" 防止重写")]),s._v(" "),t("p",[s._v("你可以通过把方法，属性或下标标记为 "),t("em",[t("code",[s._v("final")])]),s._v(" 来防止它们被重写，只需要在声明关键字前加上 "),t("code",[s._v("final")]),s._v(" 修饰符即可（例如："),t("code",[s._v("final var")]),s._v("、"),t("code",[s._v("final func")]),s._v("、"),t("code",[s._v("final class func")]),s._v(" 以及 "),t("code",[s._v("final subscript")]),s._v("）。")]),s._v(" "),t("p",[s._v("任何试图对带有 "),t("code",[s._v("final")]),s._v(" 标记的方法、属性或下标进行重写的代码，都会在编译时会报错。在类扩展中的方法，属性或下标也可以在扩展的定义里标记为 "),t("code",[s._v("final")]),s._v("。")]),s._v(" "),t("p",[s._v("可以通过在关键字 "),t("code",[s._v("class")]),s._v(" 前添加 "),t("code",[s._v("final")]),s._v(" 修饰符（"),t("code",[s._v("final class")]),s._v("）来将整个类标记为 final 。这样的类是不可被继承的，试图继承这样的类会导致编译报错。")])])}),[],!1,null,null,null);t.default=n.exports}}]);