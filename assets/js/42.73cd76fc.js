(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{412:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("Swift 语言存在两种类型：命名型类型和复合型类型。"),s("em",[t._v("命名型类型")]),t._v("是指定义时可以给定名字的类型。命名型类型包括类、结构体、枚举和协议。比如，一个用户定义类 "),s("code",[t._v("MyClass")]),t._v(" 的实例拥有类型 "),s("code",[t._v("MyClass")]),t._v("。除了用户定义的命名型类型，Swift 标准库也定义了很多常用的命名型类型，包括那些表示数组、字典和可选值的类型。")]),t._v(" "),s("p",[t._v("那些通常被其它语言认为是基本或原始的数据型类型，比如表示数字、字符和字符串的类型，实际上就是命名型类型，这些类型在 Swift 标准库中是使用结构体来定义和实现的。因为它们是命名型类型，因此你可以按照 "),s("RouterLink",{attrs:{to:"/pages/297d1c/"}},[t._v("扩展")]),t._v(" 和 "),s("a",{attrs:{href:""}},[t._v("扩展声明")]),t._v(" 中讨论的那样，声明一个扩展来增加它们的行为以满足你程序的需求。")],1),t._v(" "),s("p",[s("em",[t._v("复合型类型")]),t._v("是没有名字的类型，它由 Swift 本身定义。Swift 存在两种复合型类型：函数类型和元组类型。一个复合型类型可以包含命名型类型和其它复合型类型。例如，元组类型 "),s("code",[t._v("(Int, (Int, Int))")]),t._v(" 包含两个元素：第一个是命名型类型 "),s("code",[t._v("Int")]),t._v("，第二个是另一个复合型类型 "),s("code",[t._v("(Int, Int)")]),t._v("。")]),t._v(" "),s("p",[t._v("你可以在命名型类型和复合型类型使用小括号。但是在类型旁加小括号没有任何作用。举个例子，"),s("code",[t._v("(Int)")]),t._v(" 等同于 "),s("code",[t._v("Int")]),t._v("。")]),t._v(" "),s("p",[t._v("本节讨论 Swift 语言本身定义的类型，并描述 Swift 中的类型推断行为。")]),t._v(" "),s("h4",{attrs:{id:"type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#type"}},[t._v("#")]),t._v(" type")]),t._v(" "),s("blockquote",[s("p",[t._v("类型语法")]),t._v(" "),s("p",[s("em",[t._v("类型")]),t._v(" → "),s("a",{attrs:{href:""}},[t._v("函数类型")])]),t._v(" "),s("p",[s("em",[t._v("类型")]),t._v(" → "),s("a",{attrs:{href:""}},[t._v("数组类型")])]),t._v(" "),s("p",[s("em",[t._v("类型")]),t._v(" → "),s("a",{attrs:{href:""}},[t._v("字典类型")])]),t._v(" "),s("p",[s("em",[t._v("类型")]),t._v(" → "),s("a",{attrs:{href:""}},[t._v("类型标识")])]),t._v(" "),s("p",[s("em",[t._v("类型")]),t._v(" → "),s("a",{attrs:{href:""}},[t._v("元组类型")])]),t._v(" "),s("p",[s("em",[t._v("类型")]),t._v(" → "),s("a",{attrs:{href:""}},[t._v("可选类型")])]),t._v(" "),s("p",[s("em",[t._v("类型")]),t._v(" → "),s("a",{attrs:{href:""}},[t._v("隐式解析可选类型")])]),t._v(" "),s("p",[s("em",[t._v("类型")]),t._v(" → "),s("a",{attrs:{href:""}},[t._v("协议合成类型")])]),t._v(" "),s("p",[s("em",[t._v("类型")]),t._v(" →"),s("a",{attrs:{href:""}},[t._v("不透明类型")])]),t._v(" "),s("p",[s("em",[t._v("类型")]),t._v(" → "),s("a",{attrs:{href:""}},[t._v("元型类型")])]),t._v(" "),s("p",[s("em",[t._v("类型")]),t._v(" → "),s("a",{attrs:{href:""}},[t._v("自身类型")])]),t._v(" "),s("p",[s("em",[t._v("类型")]),t._v(" → "),s("strong",[t._v("Any")])]),t._v(" "),s("p",[s("em",[t._v("类型")]),t._v(" → "),s("strong",[t._v("（")]),t._v(" "),s("a",{attrs:{href:""}},[t._v("类型")]),t._v(" *"),s("em",[t._v("）")]),t._v(" *")])]),t._v(" "),s("h2",{attrs:{id:"类型注解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型注解"}},[t._v("#")]),t._v(" 类型注解")]),t._v(" "),s("p",[s("em",[t._v("类型注解")]),t._v("显式地指定一个变量或表达式的类型。类型注解从冒号 （"),s("code",[t._v(":")]),t._v("）开始， 以类型结尾，比如下面两个例子：")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" someTuple"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Double")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Double")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.14159")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.71828")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("someFunction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* ... */")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("在第一个例子中，表达式 "),s("code",[t._v("someTuple")]),t._v(" 的类型被指定为 "),s("code",[t._v("(Double, Double)")]),t._v("。在第二个例子中，函数 "),s("code",[t._v("someFunction")]),t._v(" 的形参 "),s("code",[t._v("a")]),t._v(" 的类型被指定为 "),s("code",[t._v("Int")]),t._v("。")]),t._v(" "),s("p",[t._v("类型注解可以在类型之前包含一个类型特性的可选列表。")]),t._v(" "),s("blockquote",[s("p",[t._v("类型注解语法")])]),t._v(" "),s("h4",{attrs:{id:"type-annotation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#type-annotation"}},[t._v("#")]),t._v(" type-annotation")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("类型注解")]),t._v(" → "),s("strong",[t._v(":")]),t._v(" "),s("a",{attrs:{href:""}},[t._v("特性列表")]),t._v("可选 "),s("strong",[t._v("输入输出参数")]),t._v("可选 "),s("a",{attrs:{href:""}},[t._v("类型")])])]),t._v(" "),s("h2",{attrs:{id:"类型标识符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型标识符"}},[t._v("#")]),t._v(" 类型标识符")]),t._v(" "),s("p",[s("em",[t._v("类型标识符")]),t._v("可以引用命名型类型，还可引用命名型或复合型类型的别名。")]),t._v(" "),s("p",[t._v("大多数情况下，类型标识符引用的是与之同名的命名型类型。例如类型标识符 "),s("code",[t._v("Int")]),t._v(" 引用命名型类型 "),s("code",[t._v("Int")]),t._v("，同样，类型标识符 "),s("code",[t._v("Dictionary<String, Int>")]),t._v(" 引用命名型类型 "),s("code",[t._v("Dictionary<String, Int>")]),t._v("。")]),t._v(" "),s("p",[t._v("在两种情况下类型标识符不引用同名的类型。情况一，类型标识符引用的是命名型或复合型类型的类型别名。比如，在下面的例子中，类型标识符使用 "),s("code",[t._v("Point")]),t._v(" 来引用元组 "),s("code",[t._v("(Int, Int)")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typealias")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Point")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" origin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Point")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("情况二，类型标识符使用点语法（"),s("code",[t._v(".")]),t._v("）来表示在其它模块或其它类型嵌套内声明的命名型类型。例如，下面例子中的类型标识符引用在 "),s("code",[t._v("ExampleModule")]),t._v(" 模块中声明的命名型类型 "),s("code",[t._v("MyType")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" someValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExampleModule")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyType")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("blockquote",[s("p",[t._v("类型标识符语法")])]),t._v(" "),s("h4",{attrs:{id:"type-identifier"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#type-identifier"}},[t._v("#")]),t._v(" type-identifier")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("类型标识符")]),t._v(" → "),s("a",{attrs:{href:""}},[t._v("类型名称")]),t._v(" "),s("a",{attrs:{href:""}},[t._v("泛型实参子句")]),t._v("可选 | "),s("a",{attrs:{href:""}},[t._v("类型名称")]),t._v(" "),s("a",{attrs:{href:""}},[t._v("泛型实参子句")]),t._v("可选 "),s("strong",[t._v(".")]),t._v(" "),s("a",{attrs:{href:""}},[t._v("类型标识符")])])]),t._v(" "),s("h4",{attrs:{id:"type-name"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#type-name"}},[t._v("#")]),t._v(" type-name")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("类型名称")]),t._v(" → "),s("a",{attrs:{href:""}},[t._v("标识符")])])]),t._v(" "),s("h2",{attrs:{id:"元组类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#元组类型"}},[t._v("#")]),t._v(" 元组类型")]),t._v(" "),s("p",[s("em",[t._v("元组类型")]),t._v("是使用括号括起来的零个或多个类型，类型间用逗号隔开。")]),t._v(" "),s("p",[t._v("你可以使用元组类型作为一个函数的返回类型，这样就可以使函数返回多个值。你也可以命名元组类型中的元素，然后用这些名字来引用每个元素的值。元素的名字由一个标识符紧跟一个冒号 "),s("code",[t._v("(:)")]),t._v(" 组成。"),s("a",{attrs:{href:""}},[t._v("函数和多返回值")]),t._v(" 章节里有一个展示上述特性的例子。")]),t._v(" "),s("p",[t._v("当一个元组类型的元素有名字的时候，这个名字就是类型的一部分。")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" someTuple "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("top"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bottom"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// someTuple 的类型为 (top: Int, bottom: Int)")]),t._v("\nsomeTuple "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("top"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bottom"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确：命名类型匹配")]),t._v("\nsomeTuple "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("99")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("              "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确：命名类型被自动推断")]),t._v("\nsomeTuple "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("right")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误：命名类型不匹配")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("所有的元组类型都包含两个及以上元素， 除了 "),s("code",[t._v("Void")]),t._v("。"),s("code",[t._v("Void")]),t._v(" 是空元组类型 "),s("code",[t._v("()")]),t._v(" 的别名。")]),t._v(" "),s("blockquote",[s("p",[t._v("元组类型语法")])]),t._v(" "),s("h4",{attrs:{id:"tuple-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tuple-type"}},[t._v("#")]),t._v(" tuple-type")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("元组类型")]),t._v(" → "),s("strong",[t._v("(")]),t._v(" "),s("strong",[t._v(")")]),t._v(" | "),s("strong",[t._v("(")]),t._v(" "),s("a",{attrs:{href:""}},[t._v("元组类型元素")]),t._v(" "),s("strong",[t._v(",")]),t._v(" "),s("a",{attrs:{href:""}},[t._v("元组类型元素列表")]),t._v(" "),s("strong",[t._v(")")])])]),t._v(" "),s("h4",{attrs:{id:"tuple-type-element-list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tuple-type-element-list"}},[t._v("#")]),t._v(" tuple-type-element-list")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("元组类型元素列表")]),t._v(" → "),s("a",{attrs:{href:""}},[t._v("元组类型元素")]),t._v(" | "),s("a",{attrs:{href:""}},[t._v("元组类型元素")]),t._v(" "),s("strong",[t._v(",")]),t._v(" "),s("a",{attrs:{href:""}},[t._v("元组类型元素列表")])])]),t._v(" "),s("h4",{attrs:{id:"tuple-type-element"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tuple-type-element"}},[t._v("#")]),t._v(" tuple-type-element")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("元组类型元素")]),t._v(" → "),s("a",{attrs:{href:""}},[t._v("元素名")]),t._v(" "),s("a",{attrs:{href:""}},[t._v("类型注解")]),t._v(" | "),s("a",{attrs:{href:""}},[t._v("类型")])])]),t._v(" "),s("h4",{attrs:{id:"element-name"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#element-name"}},[t._v("#")]),t._v(" element-name")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("元素名")]),t._v(" → "),s("a",{attrs:{href:""}},[t._v("标识符")])])]),t._v(" "),s("h2",{attrs:{id:"函数类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数类型"}},[t._v("#")]),t._v(" 函数类型")]),t._v(" "),s("p",[s("em",[t._v("函数类型")]),t._v("表示一个函数、方法或闭包的类型，它由形参类型和返回值类型组成，中间用箭头（"),s("code",[t._v("->")]),t._v("）隔开：")]),t._v(" "),s("blockquote",[s("p",[t._v("（"),s("code",[t._v("形参类型")]),t._v("）->（"),s("code",[t._v("返回值类型")]),t._v("）")])]),t._v(" "),s("p",[s("em",[t._v("形参类型")]),t._v("是由逗号间隔的类型列表。由于"),s("em",[t._v("返回值类型")]),t._v("可以是元组类型，所以函数类型支持多返回值的函数与方法。")]),t._v(" "),s("p",[t._v("你可以对形参类型为 "),s("code",[t._v("() -> T")]),t._v("（其中 T 是任何类型）的函数使用 "),s("code",[t._v("autoclosure")]),t._v(" 特性，这会在调用侧隐式创建一个闭包。这从语法结构上提供了一种便捷：延迟对表达式的求值，直到其值在函数体中被调用。以自动闭包做为形参的函数类型的例子详见 "),s("a",{attrs:{href:""}},[t._v("自动闭包")]),t._v("。")]),t._v(" "),s("p",[t._v("函数类型可以拥有一个可变参数在"),s("em",[t._v("形参类型")]),t._v("中。从语法角度上讲，可变参数由一个基础类型名字紧随三个点（"),s("code",[t._v("...")]),t._v("）组成，如 "),s("code",[t._v("Int...")]),t._v("。可变参数被认为是一个包含了基础类型元素的数组。即 "),s("code",[t._v("Int...")]),t._v(" 就是 "),s("code",[t._v("[Int]")]),t._v("。关于使用可变参数的例子，请参阅 "),s("RouterLink",{attrs:{to:"/pages/b69d99/#可变参数"}},[t._v("可变参数")]),t._v("。")],1),t._v(" "),s("p",[t._v("为了指定一个 "),s("code",[t._v("in-out")]),t._v(" 参数，可以在形参类型前加 "),s("code",[t._v("inout")]),t._v(" 前缀。但是你不可以对可变参数或返回值类型使用 "),s("code",[t._v("inout")]),t._v("。关于这种形参的详细讲解请参阅 "),s("RouterLink",{attrs:{to:"/pages/756349/#输入输出参数"}},[t._v("输入输出参数")]),t._v("。")],1),t._v(" "),s("p",[t._v("如果函数类型只有一个类型是元组类型的一个形参，那么元组类型在写函数类型的时候必须用圆括号括起来。比如说，"),s("code",[t._v("((Int, Int)) -> Void")]),t._v(" 是接收一个元组 "),s("code",[t._v("(Int, Int)")]),t._v(" 作为形参并且不返回任何值的函数类型。与此相对，不加括号的 "),s("code",[t._v("(Int, Int) -> Void")]),t._v(" 是一个接收两个 "),s("code",[t._v("Int")]),t._v(" 作为形参并且不返回任何值的函数类型。相似地，因为 "),s("code",[t._v("Void")]),t._v(" 是空元组类型 "),s("code",[t._v("()")]),t._v(" 的别名，函数类型 "),s("code",[t._v("(Void)-> Void")]),t._v(" 与 "),s("code",[t._v("(()) -> ()")]),t._v(" 是一样的 - 一个将空元组作为唯一实参的函数。但这些类型和 "),s("code",[t._v("() -> ()")]),t._v(" 是不一样的 - 一个无实参的函数。")]),t._v(" "),s("p",[t._v("函数和方法中的实参名并不是函数类型的一部分。例如：")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("someFunction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("right")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("anotherFunction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("right")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("functionWithDifferentLabels")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("top"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bottom"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" f "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" someFunction "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数 f 的类型为 (Int, Int) -> Void, 而不是 (left: Int, right: Int) -> Void.")]),t._v("\n\n\nf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" anotherFunction              "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确")]),t._v("\nf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" functionWithDifferentLabels  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("functionWithDifferentArgumentTypes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("right")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" functionWithDifferentArgumentTypes     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("functionWithDifferentNumberOfArguments")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("right")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" top"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" functionWithDifferentNumberOfArguments "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br")])]),s("p",[t._v("由于实参标签不是函数类型的一部分，你可以在写函数类型的时候省略它们。")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" operation"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" operation"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token omit keyword"}},[t._v("_")]),t._v(" lhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token omit keyword"}},[t._v("_")]),t._v(" rhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" operation"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),t._v("                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("如果一个函数类型包涵多个箭头（->），那么函数类型将从右向左进行组合。例如，函数类型 "),s("code",[t._v("(Int) -> (Int) -> Int")]),t._v(" 可以理解为 "),s("code",[t._v("(Int) -> ((Int) -> Int)")]),t._v("，也就是说，该函数传入 "),s("code",[t._v("Int")]),t._v("，并返回另一个传入并返回 "),s("code",[t._v("Int")]),t._v(" 的函数。")]),t._v(" "),s("p",[t._v("函数类型若要抛出或重抛错误就必须使用 "),s("code",[t._v("throws")]),t._v(" 关键字来标记。"),s("code",[t._v("throws")]),t._v(" 关键字是函数类型的一部分，非抛出函数是抛出函数的子类型。因此，在使用抛出函数的地方也可以使用不抛出函数。抛出和重抛函数的相关描述见章节 "),s("a",{attrs:{href:""}},[t._v("抛出函数与方法")]),t._v(" 和 "),s("a",{attrs:{href:""}},[t._v("重抛函数与方法")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"对非逃逸闭包的限制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对非逃逸闭包的限制"}},[t._v("#")]),t._v(" 对非逃逸闭包的限制")]),t._v(" "),s("p",[t._v("当非逃逸闭包函数是形参时，不能存储在属性、变量或任何 "),s("code",[t._v("Any")]),t._v(" 类型的常量中，因为这可能导致值的逃逸。")]),t._v(" "),s("p",[t._v("当非逃逸闭包函数是形参时，不能作为实参传递到另一个非逃逸闭包函数中。这样的限制可以让 Swift 在编译时就完成更好的内存访问冲突检查，而不是在运行时。举个例子：")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" external"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Any")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token omit keyword"}},[t._v("_")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("takesTwoFunctions")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("first"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Any")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Any")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("first")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("first"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("second")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误")]),t._v("\n\n\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("first")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("second")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("first"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误")]),t._v("\n\n\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("first")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("external"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("external")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("first"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("p",[t._v("在上面代码里，"),s("code",[t._v("takesTwoFunctions(first:second:)")]),t._v(" 的两个形参都是函数。它们都没有标记为 "),s("code",[t._v("@escaping")]),t._v(", 因此它们都是非逃逸的。")]),t._v(" "),s("p",[t._v("上述例子里的被标记为“错误”的四个函数调用会产生编译错误。因为形参 "),s("code",[t._v("first")]),t._v(" 和 "),s("code",[t._v("second")]),t._v(" 是非逃逸函数，它们不能够作为实参被传递到另一个非闭包函数。相对的, 标记“正确”的两个函数不会产生编译错误。这些函数调用不会违反限制，因为 "),s("code",[t._v("external")]),t._v(" 不是 "),s("code",[t._v("takesTwoFunctions(first:second:)")]),t._v(" 的形参之一。")]),t._v(" "),s("p",[t._v("如果你需要避免这个限制，标记其中一个形参为逃逸，或者使用 "),s("code",[t._v("withoutActuallyEscaping(_:do:)")]),t._v(" 函数临时转换其中一个非逃逸函数形参为逃逸函数。关于避免内存访问冲突，可以参阅 "),s("a",{attrs:{href:""}},[t._v("内存安全")]),t._v("。")]),t._v(" "),s("blockquote",[s("p",[t._v("函数类型语法")])]),t._v(" "),s("h4",{attrs:{id:"function-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#function-type"}},[t._v("#")]),t._v(" function-type")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("函数类型")]),t._v(" → "),s("a",{attrs:{href:""}},[t._v("特性列表")]),t._v("可选 "),s("a",{attrs:{href:""}},[t._v("函数类型子句")]),t._v(" "),s("strong",[t._v("throws")]),t._v("可选 "),s("strong",[t._v("->")]),t._v(" "),s("a",{attrs:{href:""}},[t._v("类型")])])]),t._v(" "),s("h4",{attrs:{id:"function-type-argument-clause"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#function-type-argument-clause"}},[t._v("#")]),t._v(" function-type-argument-clause")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("函数类型子句")]),t._v(" → **(**­ **)**­ "),s("em",[t._v("函数类型子句")]),t._v(" → "),s("strong",[t._v("(")]),t._v(" "),s("a",{attrs:{href:""}},[t._v("函数类型实参列表")]),t._v(" *...*­ 可选 "),s("strong",[t._v(")")])])]),t._v(" "),s("h4",{attrs:{id:"function-type-argument-list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#function-type-argument-list"}},[t._v("#")]),t._v(" function-type-argument-list")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("函数类型实参列表")]),t._v(" → "),s("a",{attrs:{href:""}},[t._v("函数类型实参")]),t._v(" | "),s("a",{attrs:{href:""}},[t._v("函数类型实参")]),t._v("， "),s("a",{attrs:{href:""}},[t._v("函数类型实参列表")])])]),t._v(" "),s("h4",{attrs:{id:"function-type-argument"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#function-type-argument"}},[t._v("#")]),t._v(" function-type-argument")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("函数类型实参")]),t._v(" → "),s("a",{attrs:{href:""}},[t._v("特性列表")]),t._v("可选 "),s("strong",[t._v("输入输出参数")]),t._v("可选 "),s("a",{attrs:{href:""}},[t._v("类型")]),t._v(" | "),s("a",{attrs:{href:""}},[t._v("实参标签")]),t._v(" "),s("a",{attrs:{href:""}},[t._v("类型注解")])])]),t._v(" "),s("h4",{attrs:{id:"argument-label"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#argument-label"}},[t._v("#")]),t._v(" argument-label")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("形参标签")]),t._v(" → "),s("a",{attrs:{href:""}},[t._v("标识符")])])]),t._v(" "),s("h2",{attrs:{id:"数组类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组类型"}},[t._v("#")]),t._v(" 数组类型")]),t._v(" "),s("p",[t._v("Swift 语言为标准库中定义的 "),s("code",[t._v("Array<Element>")]),t._v(" 类型提供了如下语法糖：")]),t._v(" "),s("blockquote",[s("p",[t._v("["),s("code",[t._v("类型")]),t._v("]")])]),t._v(" "),s("p",[t._v("换句话说，下面两个声明是等价的：")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" someArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Alex"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Brian"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Dave"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" someArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Alex"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Brian"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Dave"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("上面两种情况下，常量 "),s("code",[t._v("someArray")]),t._v(" 都被声明为字符串数组。数组的元素也可以通过下标访问："),s("code",[t._v("someArray[0]")]),t._v(" 是指第 0 个元素 "),s("code",[t._v('"Alex"')]),t._v("。")]),t._v(" "),s("p",[t._v("你也可以嵌套多对方括号来创建多维数组，最里面的方括号中指明数组元素的基本类型。比如，下面例子中使用三对方括号创建三维整数数组：")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" array3D"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("访问一个多维数组的元素时，最左边的下标指向最外层数组的相应位置元素。接下来往右的下标指向第一层嵌入的相应位置元素，依次类推。这就意味着，在上面的例子中，"),s("code",[t._v("array3D[0]")]),t._v(" 是 "),s("code",[t._v("[[1, 2], [3, 4]]")]),t._v("，"),s("code",[t._v("array3D[0][1]")]),t._v(" 是 "),s("code",[t._v("[3, 4]")]),t._v("，"),s("code",[t._v("array3D[0][1][1]")]),t._v(" 则是 "),s("code",[t._v("4")]),t._v("。")]),t._v(" "),s("p",[t._v("关于 Swift 标准库中 "),s("code",[t._v("Array")]),t._v(" 类型的详细讨论，请参阅 "),s("a",{attrs:{href:""}},[t._v("数组")]),t._v("。")]),t._v(" "),s("blockquote",[s("p",[t._v("数组类型语法")])]),t._v(" "),s("h4",{attrs:{id:"array-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-type"}},[t._v("#")]),t._v(" array-type")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("数组类型")]),t._v(" → "),s("strong",[t._v("[")]),t._v(" "),s("a",{attrs:{href:""}},[t._v("类型")]),t._v(" "),s("strong",[t._v("]")])])]),t._v(" "),s("h2",{attrs:{id:"字典类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字典类型"}},[t._v("#")]),t._v(" 字典类型")]),t._v(" "),s("p",[t._v("Swift 语言为标准库中定义的 "),s("code",[t._v("Dictionary<Key, Value>")]),t._v(" 类型提供了如下语法糖：")]),t._v(" "),s("blockquote",[s("p",[t._v("["),s("code",[t._v("键类型")]),t._v(" : "),s("code",[t._v("值类型")]),t._v("]")])]),t._v(" "),s("p",[t._v("换句话说，下面两个声明是等价的：")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" someDictionary"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Alex"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Paul"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("39")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" someDictionary"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dictionary")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Alex"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Paul"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("39")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("上面两种情况，常量 "),s("code",[t._v("someDictionary")]),t._v(" 被声明为一个字典，其中键为 "),s("code",[t._v("String")]),t._v(" 类型，值为 "),s("code",[t._v("Int")]),t._v(" 类型。")]),t._v(" "),s("p",[t._v("字典中的值可以通过下标来访问，这个下标在方括号中指明了具体的键："),s("code",[t._v('someDictionary["Alex"]')]),t._v(" 返回键 "),s("code",[t._v("Alex")]),t._v(" 对应的值。通过下标访问会获取对应值的可选类型。如果键在字典中不存在的话，则这个下标返回 "),s("code",[t._v("nil")]),t._v("。")]),t._v(" "),s("p",[t._v("字典中键的类型必须符合 Swift 标准库中的 "),s("code",[t._v("Hashable")]),t._v(" 协议。")]),t._v(" "),s("p",[t._v("关于 Swift 标准库中 "),s("code",[t._v("Dictionary")]),t._v(" 类型的详细讨论，请参阅 "),s("a",{attrs:{href:""}},[t._v("字典")]),t._v("。")]),t._v(" "),s("blockquote",[s("p",[t._v("字典类型语法")])]),t._v(" "),s("h4",{attrs:{id:"dictionary-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dictionary-type"}},[t._v("#")]),t._v(" dictionary-type")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("字典类型")]),t._v(" → "),s("strong",[t._v("[")]),t._v(" "),s("a",{attrs:{href:""}},[t._v("类型")]),t._v(" "),s("strong",[t._v(":")]),t._v(" "),s("a",{attrs:{href:""}},[t._v("类型")]),t._v(" "),s("strong",[t._v("]")])])]),t._v(" "),s("h2",{attrs:{id:"可选类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可选类型"}},[t._v("#")]),t._v(" 可选类型")]),t._v(" "),s("p",[t._v("Swift 定义后缀 "),s("code",[t._v("?")]),t._v(" 来作为标准库中定义的命名型类型 "),s("code",[t._v("Optional<Wrapped>")]),t._v(" 的语法糖。换句话说，下面两个声明是等价的：")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" optionalInteger"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" optionalInteger"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Optional")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("在上述两种情况下，变量 "),s("code",[t._v("optionalInteger")]),t._v(" 都被声明为可选整型类型。注意在类型和 "),s("code",[t._v("?")]),t._v(" 之间没有空格。")]),t._v(" "),s("p",[t._v("类型 "),s("code",[t._v("Optional<Wrapped>")]),t._v(" 是一个枚举，有两个成员，"),s("code",[t._v("none")]),t._v(" 和 "),s("code",[t._v("some(Wrapped)")]),t._v("，用来表示可能有也可能没有的值。任意类型都可以被显式地声明（或隐式地转换）为可选类型。如果你在声明可选变量或属性的时候没有提供初始值，它的值则会自动赋为默认值 "),s("code",[t._v("nil")]),t._v("。")]),t._v(" "),s("p",[t._v("如果一个可选类型的实例包含一个值，那么你就可以使用后缀运算符 "),s("code",[t._v("!")]),t._v(" 来获取该值，正如下面描述的：")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[t._v("optionalInteger "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v("\noptionalInteger"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 42")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("使用 "),s("code",[t._v("!")]),t._v(" 运算符解包值为 "),s("code",[t._v("nil")]),t._v(" 的可选值会导致运行错误。")]),t._v(" "),s("p",[t._v("你也可以使用可选链式调用和可选绑定来选择性在可选表达式上执行操作。如果值为 "),s("code",[t._v("nil")]),t._v("，不会执行任何操作，因此也就没有运行错误产生。")]),t._v(" "),s("p",[t._v("更多细节以及更多如何使用可选类型的例子，请参阅 "),s("a",{attrs:{href:""}},[t._v("可选类型")]),t._v("。")]),t._v(" "),s("blockquote",[s("p",[t._v("可选类型语法")])]),t._v(" "),s("h4",{attrs:{id:"optional-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#optional-type"}},[t._v("#")]),t._v(" optional-type")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("可选类型")]),t._v(" → "),s("a",{attrs:{href:""}},[t._v("类型")]),t._v(" "),s("strong",[t._v("?")])])]),t._v(" "),s("h2",{attrs:{id:"隐式解析可选类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#隐式解析可选类型"}},[t._v("#")]),t._v(" 隐式解析可选类型")]),t._v(" "),s("p",[t._v("当可以被访问时，Swift 语言定义后缀 "),s("code",[t._v("!")]),t._v(" 作为标准库中命名类型 "),s("code",[t._v("Optional<Wrapped>")]),t._v(" 的语法糖，来实现自动解包的功能。如果尝试对一个值为 "),s("code",[t._v("nil")]),t._v(" 的可选类型进行隐式解包，将会产生运行时错误。因为隐式解包，下面两个声明等价：")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" implicitlyUnwrappedString"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" explicitlyUnwrappedString"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Optional")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("注意类型与 "),s("code",[t._v("!")]),t._v(" 之间没有空格。")]),t._v(" "),s("p",[t._v("由于隐式解包会更改包含该类型的声明语义，嵌套在元组类型或泛型中可选类型（比如字典元素类型或数组元素类型），不能被标记为隐式解包。例如：")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" tupleOfImplicitlyUnwrappedElements"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" implicitlyUnwrappedTuple"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("             "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arrayOfImplicitlyUnwrappedElements"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" implicitlyUnwrappedArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("                  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("由于隐式解析可选类型和可选类型有同样的类型 "),s("code",[t._v("Optional<Wrapped>")]),t._v("，你可以在所有使用可选类型的地方使用隐式解析可选类型。比如，你可以将隐式解析可选类型的值赋给变量、常量和可选属性，反之亦然。")]),t._v(" "),s("p",[t._v("正如可选类型一样，如果你在声明隐式解析可选类型的变量或属性的时候没有指定初始值，它的值则会自动赋为默认值 "),s("code",[t._v("nil")]),t._v("。")]),t._v(" "),s("p",[t._v("可以使用可选链式调用对隐式解析可选表达式选择性地执行操作。如果值为 "),s("code",[t._v("nil")]),t._v("，就不会执行任何操作，因此也不会产生运行错误。")]),t._v(" "),s("p",[t._v("关于隐式解析可选类型的更多细节，请参阅 "),s("a",{attrs:{href:""}},[t._v("隐式解析可选类型")]),t._v("。")]),t._v(" "),s("blockquote",[s("p",[t._v("隐式解析可选类型语法")])]),t._v(" "),s("h4",{attrs:{id:"implicitly-unwrapped-optional-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#implicitly-unwrapped-optional-type"}},[t._v("#")]),t._v(" implicitly-unwrapped-optional-type")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("隐式解析可选类型")]),t._v(" → "),s("a",{attrs:{href:""}},[t._v("类型")]),t._v(" "),s("strong",[t._v("!")])])]),t._v(" "),s("h2",{attrs:{id:"协议合成类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协议合成类型"}},[t._v("#")]),t._v(" 协议合成类型")]),t._v(" "),s("p",[s("em",[t._v("协议合成类型")]),t._v("定义了一种遵循协议列表中每个指定协议的类型，或者一个现有类型的子类并遵循协议列表中每个指定协议。协议合成类型只能用在类型注解、泛型形参子句和泛型 "),s("code",[t._v("where")]),t._v(" 子句中指定类型。")]),t._v(" "),s("p",[t._v("协议合成类型的形式如下：")]),t._v(" "),s("blockquote",[s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Protocol")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("` "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" `"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Procotol")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])])]),t._v(" "),s("p",[t._v("协议合成类型允许你指定一个值，其类型遵循多个协议的要求而不需要定义一个新的命名型协议来继承它想要符合的各个协议。比如，协议合成类型 "),s("code",[t._v("Protocol A & Protocol B & Protocol C")]),t._v(" 等效于一个从 "),s("code",[t._v("Protocol A")]),t._v("，"),s("code",[t._v("Protocol B")]),t._v("，"),s("code",[t._v("Protocol C")]),t._v(" 继承而来的新协议。同样的，你可以使用 "),s("code",[t._v("SuperClass & ProtocolA")]),t._v(" 来取代声明一个新的协议作为 "),s("code",[t._v("SuperClass")]),t._v(" 的子类并遵循 "),s("code",[t._v("ProtocolA")]),t._v("。")]),t._v(" "),s("p",[t._v("协议合成列表中的每一项都必须是下面所列情况之一，列表中最多只能包含一个类：")]),t._v(" "),s("ul",[s("li",[t._v("类名")]),t._v(" "),s("li",[t._v("协议名")]),t._v(" "),s("li",[t._v("一个类型别名，它的潜在类型是一个协议合成类型、一个协议或者一个类")])]),t._v(" "),s("p",[t._v("当协议合成类型包含类型别名时，同一个协议可能多次出现在定义中 — 重复被忽略。例如，下面代码中定义的 "),s("code",[t._v("PQR")]),t._v(" 等同于 "),s("code",[t._v("P & Q & R")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typealias")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PQ")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("P")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Q")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typealias")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PQR")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PQ")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Q")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("R")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("blockquote",[s("p",[t._v("协议合成类型语法")])]),t._v(" "),s("h4",{attrs:{id:"protocol-composition-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#protocol-composition-type"}},[t._v("#")]),t._v(" protocol-composition-type")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("协议合成类型")]),t._v(" → "),s("a",{attrs:{href:""}},[t._v("协议标识符")]),t._v(" & "),s("a",{attrs:{href:""}},[t._v("协议合成延续")])])]),t._v(" "),s("h4",{attrs:{id:"protocol-composition-continuation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#protocol-composition-continuation"}},[t._v("#")]),t._v(" protocol-composition-continuation")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("协议合成延续")]),t._v(" → "),s("a",{attrs:{href:""}},[t._v("协议标识符")]),t._v(" | "),s("a",{attrs:{href:""}},[t._v("协议合成类型")])])]),t._v(" "),s("h2",{attrs:{id:"不透明类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不透明类型"}},[t._v("#")]),t._v(" 不透明类型")]),t._v(" "),s("p",[s("em",[t._v("不透明类型")]),t._v("定义了遵循某个协议或者合成协议的类型，但不需要指明底层的具体类型。")]),t._v(" "),s("p",[t._v("不透明类型可以作为函数或下标的返回值，亦或是属性的类型使用。")]),t._v(" "),s("p",[t._v("不透明类型不能作为元组类型的一部分或范型类型使用，比如数组元素类型或者可选值的包装类型。")]),t._v(" "),s("p",[t._v("不透明类型的形式如下：")]),t._v(" "),s("blockquote",[s("p",[t._v("some "),s("code",[t._v("constraint")])])]),t._v(" "),s("p",[s("em",[t._v("constraint")]),t._v(" 可以是类类型，协议类型，协议组合类型或者 "),s("code",[t._v("Any")]),t._v("。值只有当它遵循该协议或者组合协议，或者从该类继承的时候，才能作为这个不透明类型的实例使用。和不透明值交互的代码只能使用该值定义在 "),s("em",[t._v("constraint")]),t._v(" 上的接口。")]),t._v(" "),s("p",[t._v("协议声明里不能包括不透明类型。类不能使用不透明类型作为非 final 方法的返回值。")]),t._v(" "),s("p",[t._v("使用不透明类型作为返回值的函数必须返回单一公用底层类型。返回的类型可以包含函数范型类型形参的一部分。举个例子，函数 "),s("code",[t._v("someFunction<T>()")]),t._v(" 可以返回类型 "),s("code",[t._v("T")]),t._v(" 或者 "),s("code",[t._v("Dictionary<String,T>")]),t._v(" 的值。")]),t._v(" "),s("blockquote",[s("p",[t._v("不透明类型语法")])]),t._v(" "),s("h4",{attrs:{id:"opaque-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#opaque-type"}},[t._v("#")]),t._v(" opaque-type")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("不透明类型")]),t._v(" → "),s("strong",[t._v("some")]),t._v(" "),s("a",{attrs:{href:""}},[t._v("type")])])]),t._v(" "),s("h2",{attrs:{id:"元类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#元类型"}},[t._v("#")]),t._v(" 元类型")]),t._v(" "),s("p",[s("em",[t._v("元类型")]),t._v("是指任意类型的类型，包括类类型、结构体类型、枚举类型和协议类型。")]),t._v(" "),s("p",[t._v("类、结构体或枚举类型的元类型是相应的类型名紧跟 "),s("code",[t._v(".Type")]),t._v("。协议类型的元类型——并不是运行时遵循该协议的具体类型——是该协议名字紧跟 "),s("code",[t._v(".Protocol")]),t._v("。比如，类 "),s("code",[t._v("SomeClass")]),t._v(" 的元类型就是 "),s("code",[t._v("SomeClass.Type")]),t._v("，协议 "),s("code",[t._v("SomeProtocol")]),t._v(" 的元类型就是 "),s("code",[t._v("SomeProtocal.Protocol")]),t._v("。")]),t._v(" "),s("p",[t._v("你可以使用后缀 "),s("code",[t._v("self")]),t._v(" 表达式来获取类型。比如，"),s("code",[t._v("SomeClass.self")]),t._v(" 返回 "),s("code",[t._v("SomeClass")]),t._v(" 本身，而不是 "),s("code",[t._v("SomeClass")]),t._v(" 的一个实例。同样，"),s("code",[t._v("SomeProtocol.self")]),t._v(" 返回 "),s("code",[t._v("SomeProtocol")]),t._v(" 本身，而不是运行时遵循 "),s("code",[t._v("SomeProtocol")]),t._v(" 的某个类型的实例。还可以对类型的实例使用 "),s("code",[t._v("type(of:)")]),t._v(" 表达式来获取该实例动态的、在运行阶段的类型，如下所示：")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SomeBaseClass")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("printClassName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"SomeBaseClass"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SomeSubClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SomeBaseClass")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("override")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("printClassName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"SomeSubClass"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" someInstance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SomeBaseClass")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SomeSubClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// someInstance 在编译期是 SomeBaseClass 类型，")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 但是在运行期则是 SomeSubClass 类型")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("of"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" someInstance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printClassName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 打印“SomeSubClass”")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br")])]),s("p",[t._v("更多信息可以查看 Swift 标准库里的 "),s("a",{attrs:{href:"https://developer.apple.com/documentation/swift/2885064-type",target:"_blank",rel:"noopener noreferrer"}},[t._v("type(of:)"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("p",[t._v("可以使用初始化表达式从某个类型的元类型构造出一个该类型的实例。对于类实例，被调用的构造器必须使用 "),s("code",[t._v("required")]),t._v(" 关键字标记，或者整个类使用 "),s("code",[t._v("final")]),t._v(" 关键字标记。")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AnotherSubClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SomeBaseClass")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("required")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("string "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" string\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("override")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("printClassName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"AnotherSubClass"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" metatype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AnotherSubClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AnotherSubClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" anotherInstance "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" metatype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"some string"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("blockquote",[s("p",[t._v("元类型语法")])]),t._v(" "),s("h4",{attrs:{id:"metatype-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#metatype-type"}},[t._v("#")]),t._v(" metatype-type")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("元类型")]),t._v(" → "),s("a",{attrs:{href:""}},[t._v("类型")]),t._v(" "),s("strong",[t._v(".")]),t._v(" "),s("strong",[t._v("Type")]),t._v(" | "),s("a",{attrs:{href:""}},[t._v("类型")]),t._v(" "),s("strong",[t._v(".")]),t._v(" "),s("strong",[t._v("Protocol")])])]),t._v(" "),s("h2",{attrs:{id:"自身类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自身类型"}},[t._v("#")]),t._v(" 自身类型")]),t._v(" "),s("p",[s("code",[t._v("Self")]),t._v(" 类型不是具体的类型，而是让你更方便的引用当前类型，不需要重复或者知道该类的名字。")]),t._v(" "),s("p",[t._v("在协议声明或者协议成员声明时，"),s("code",[t._v("Self")]),t._v(" 类型引用的是最终遵循该协议的类型。")]),t._v(" "),s("p",[t._v("在结构体，类或者枚举值声明时，Self 类型引用的是声明的类型。在某个类型成员声明时，Self 类型引用的是该类型。在类成员声明时，"),s("code",[t._v("Self")]),t._v(" 只能在以下几种情况中出现：")]),t._v(" "),s("ul",[s("li",[t._v("作为方法的返回类型")]),t._v(" "),s("li",[t._v("作为只读下标的返回类型")]),t._v(" "),s("li",[t._v("作为只读计算属性的类型")]),t._v(" "),s("li",[t._v("在方法体中")])]),t._v(" "),s("p",[t._v("举个例子，下面的代码演示了返回值是 "),s("code",[t._v("Self")]),t._v(" 的实例方法 "),s("code",[t._v("f")]),t._v(" 。")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Superclass")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Self")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Superclass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("of"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 打印 "Superclass"')]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Subclass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Superclass")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Subclass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("of"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 打印 "Subclass"')]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Superclass")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Subclass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("of"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 打印 "Subclass"')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br")])]),s("p",[t._v("上面例子的最后一部分表明 "),s("code",[t._v("Self")]),t._v(" 引用的是值 "),s("code",[t._v("z")]),t._v(" 的运行时类型 "),s("code",[t._v("Subclass")]),t._v(" ，而不是变量本身的编译时类型 "),s("code",[t._v("Superclass")]),t._v(" 。")]),t._v(" "),s("p",[t._v("在嵌套类型声明时，"),s("code",[t._v("Self")]),t._v(" 类型引用的是最内层声明的类型。")]),t._v(" "),s("p",[s("code",[t._v("Self")]),t._v(" 类型引用的类型和 Swift 标准库中 "),s("a",{attrs:{href:"https://developer.apple.com/documentation/swift/2885064-type",target:"_blank",rel:"noopener noreferrer"}},[t._v("type(of:)"),s("OutboundLink")],1),t._v(" 函数的结果一样。使用 "),s("code",[t._v("Self.someStaticMember")]),t._v(" 访问当前类型中的成员和使用 "),s("code",[t._v("type(of: self).someStaticMember")]),t._v(" 是一样的。")]),t._v(" "),s("blockquote",[s("p",[t._v("自身类型语法")])]),t._v(" "),s("h4",{attrs:{id:"self-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#self-type"}},[t._v("#")]),t._v(" self-type")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("自身类型")]),t._v(" → "),s("strong",[t._v("Self")])])]),t._v(" "),s("h2",{attrs:{id:"类型继承子句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型继承子句"}},[t._v("#")]),t._v(" 类型继承子句")]),t._v(" "),s("p",[s("em",[t._v("类型继承子句")]),t._v("被用来指定一个命名型类型继承自哪个类、采纳哪些协议。类型继承子句开始于冒号 "),s("code",[t._v(":")]),t._v("，其后是类型标识符列表。")]),t._v(" "),s("p",[t._v("类可以继承自单个超类，并遵循任意数量的协议。当定义一个类时，超类的名字必须出现在类型标识符列表首位，然后跟上该类需要遵循的任意数量的协议。如果一个类不是从其它类继承而来，那么列表可以以协议开头。关于类继承更多的讨论和例子，请参阅 "),s("RouterLink",{attrs:{to:"/pages/09b0f4/"}},[t._v("继承")]),t._v("。")],1),t._v(" "),s("p",[t._v("其它命名型类型只能继承自或采纳一系列协议。协议类型可以继承自任意数量的其他协议。当一个协议类型继承自其它协议时，其它协议中定义的要求会被整合在一起，然后从当前协议继承的任意类型必须符合所有这些条件。")]),t._v(" "),s("p",[t._v("枚举定义中的类型继承子句可以是一系列协议，或者是指定单一的命名类型，此时枚举为其用例分配原始值。在枚举定义中使用类型继承子句来指定原始值类型的例子，请参阅 "),s("a",{attrs:{href:""}},[t._v("原始值")]),t._v("。")]),t._v(" "),s("blockquote",[s("p",[t._v("类型继承子句语法")])]),t._v(" "),s("h4",{attrs:{id:"type-inheritance-clause"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#type-inheritance-clause"}},[t._v("#")]),t._v(" type-inheritance-clause")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("类型继承子句")]),t._v(" → "),s("strong",[t._v(":")]),t._v(" "),s("a",{attrs:{href:""}},[t._v("类型继承列表")])])]),t._v(" "),s("h4",{attrs:{id:"type-inheritance-list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#type-inheritance-list"}},[t._v("#")]),t._v(" type-inheritance-list")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("类型继承列表")]),t._v(" → "),s("a",{attrs:{href:""}},[t._v("类型标识符")]),t._v(" | "),s("a",{attrs:{href:""}},[t._v("类型标识符")]),t._v(" "),s("strong",[t._v(",")]),t._v(" "),s("a",{attrs:{href:""}},[t._v("类型继承列表")])])]),t._v(" "),s("h2",{attrs:{id:"类型推断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型推断"}},[t._v("#")]),t._v(" 类型推断")]),t._v(" "),s("p",[t._v("Swift 广泛使用"),s("em",[t._v("类型推断")]),t._v("，从而允许你省略代码中很多变量和表达式的类型或部分类型。比如，对于 "),s("code",[t._v("var x: Int = 0")]),t._v("，你可以完全省略类型而简写成 "),s("code",[t._v("var x = 0")]),t._v("，编译器会正确推断出 "),s("code",[t._v("x")]),t._v(" 的类型 "),s("code",[t._v("Int")]),t._v("。类似的，当完整的类型可以从上下文推断出来时，你也可以省略类型的一部分。比如，如果你写了 "),s("code",[t._v('let dict: Dictionary = ["A" : 1]')]),t._v("，编译器能推断出 "),s("code",[t._v("dict")]),t._v(" 的类型是 "),s("code",[t._v("Dictionary<String, Int>")]),t._v("。")]),t._v(" "),s("p",[t._v("在上面的两个例子中，类型信息从表达式树的叶子节点传向根节点。也就是说，"),s("code",[t._v("var x: Int = 0")]),t._v(" 中 "),s("code",[t._v("x")]),t._v(" 的类型首先根据 "),s("code",[t._v("0")]),t._v(" 的类型进行推断，然后将该类型信息传递到根节点（变量 "),s("code",[t._v("x")]),t._v("）。")]),t._v(" "),s("p",[t._v("在 Swift 中，类型信息也可以反方向流动——从根节点传向叶子节点。在下面的例子中，常量 "),s("code",[t._v("eFloat")]),t._v(" 上的显式类型注解（"),s("code",[t._v(": Float")]),t._v("）将导致数字字面量 "),s("code",[t._v("2.71828")]),t._v(" 的类型是 "),s("code",[t._v("Float")]),t._v(" 而非 "),s("code",[t._v("Double")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" e "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.71828")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// e 的类型会被推断为 Double")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" eFloat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Float")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.71828")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// eFloat 的类型为 Float")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("Swift 中的类型推断在单独的表达式或语句上进行。这意味着所有用于类型推断的信息必须可以从表达式或其某个子表达式的类型检查中获取到。")])])}),[],!1,null,null,null);s.default=e.exports}}]);