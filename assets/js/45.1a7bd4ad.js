(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{503:function(t,a,s){"use strict";s.r(a);var e=s(2),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[a("em",[t._v("声明（declaration）")]),t._v(" 用以向程序里引入新的名字或者结构。举例来说，可以使用声明来引入函数和方法，变量和常量，或者定义新的具有命名的枚举、结构体、类和协议类型。还可以使用声明来扩展一个既有的具有命名的类型的行为，或者在程序里引入在其它地方声明的符号。")]),t._v(" "),a("p",[t._v("在 Swift 中，大多数声明在某种意义上讲也是定义，因为它们在声明时往往伴随着实现或初始化。由于协议并不提供实现，大多数协议成员仅仅只是声明而已。为了方便起见，也是因为这些区别在 Swift 中并不是很重要，“声明”这个术语同时包含了声明和定义两种含义。")]),t._v(" "),a("blockquote",[a("p",[t._v("声明语法")]),t._v(" "),a("h4",{attrs:{id:"declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#declaration"}},[t._v("#")]),t._v(" declaration")]),t._v(" "),a("p",[a("em",[t._v("声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("导入声明")])]),t._v(" "),a("p",[a("em",[t._v("声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("常量声明")])]),t._v(" "),a("p",[a("em",[t._v("声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("变量声明")])]),t._v(" "),a("p",[a("em",[t._v("声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("类型别名声明")])]),t._v(" "),a("p",[a("em",[t._v("声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("函数声明")])]),t._v(" "),a("p",[a("em",[t._v("声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("枚举声明")])]),t._v(" "),a("p",[a("em",[t._v("声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("结构体声明")])]),t._v(" "),a("p",[a("em",[t._v("声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("类声明")])]),t._v(" "),a("p",[a("em",[t._v("声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("协议声明")])]),t._v(" "),a("p",[a("em",[t._v("声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("构造器声明")])]),t._v(" "),a("p",[a("em",[t._v("声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("析构器声明")])]),t._v(" "),a("p",[a("em",[t._v("声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("扩展声明")])]),t._v(" "),a("p",[a("em",[t._v("声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("下标声明")])]),t._v(" "),a("p",[a("em",[t._v("声明")]),t._v(" → "),a("RouterLink",{attrs:{to:"/pages/756349/#运算符声明"}},[t._v("运算符声明")])],1),t._v(" "),a("h4",{attrs:{id:"declarations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#declarations"}},[t._v("#")]),t._v(" declarations")]),t._v(" "),a("p",[a("em",[t._v("多条声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("声明")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("多条声明")]),t._v("可选")])]),t._v(" "),a("h2",{attrs:{id:"顶级代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#顶级代码"}},[t._v("#")]),t._v(" 顶级代码")]),t._v(" "),a("p",[t._v("Swift 的源文件中的顶级代码（top-level code）由零个或多个语句、声明和表达式组成。默认情况下，在一个源文件的顶层声明的变量，常量和其他具有命名的声明可以被同模块中的每一个源文件中的代码访问。可以使用一个访问级别修饰符来标记声明来覆盖这种默认行为，请参阅 "),a("a",{attrs:{href:""}},[t._v("访问控制级别")]),t._v("。")]),t._v(" "),a("blockquote",[a("p",[t._v("顶级声明语法")]),t._v(" "),a("p",[a("em",[t._v("顶级声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("多条语句")]),t._v("可选")])]),t._v(" "),a("h2",{attrs:{id:"代码块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码块"}},[t._v("#")]),t._v(" 代码块")]),t._v(" "),a("p",[a("em",[t._v("代码块（code block）")]),t._v(" 可以将一些声明和控制结构体组织在一起。它有如下的形式：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    语句\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("代码块中的“语句”包括声明、表达式和各种其他类型的语句，它们按照在源码中的出现顺序被依次执行。")]),t._v(" "),a("blockquote",[a("p",[t._v("代码块语法")]),t._v(" "),a("h4",{attrs:{id:"code-block"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#code-block"}},[t._v("#")]),t._v(" code-block")]),t._v(" "),a("p",[a("em",[t._v("代码块")]),t._v(" → "),a("strong",[t._v("{")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("多条语句")]),t._v("可选 "),a("strong",[t._v("}")])])]),t._v(" "),a("h2",{attrs:{id:"导入声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#导入声明"}},[t._v("#")]),t._v(" 导入声明")]),t._v(" "),a("p",[a("em",[t._v("导入声明（import declaration）")]),t._v(" 让你可以使用在其他文件中声明的内容。导入语句的基本形式是导入整个模块，它由 "),a("code",[t._v("import")]),t._v(" 关键字和紧随其后的模块名组成：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" 模块\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("可以对导入操作提供更细致的控制，如指定一个特殊的子模块或者指定一个模块或子模块中的某个声明。提供了这些限制后，在当前作用域中，只有被导入的符号是可用的，而不是整个模块中的所有声明。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" 导入类型 模块"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("符号名\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" 模块"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("子模块\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h4",{attrs:{id:"grammer-of-an-import-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grammer-of-an-import-declaration"}},[t._v("#")]),t._v(" grammer-of-an-import-declaration")]),t._v(" "),a("blockquote",[a("p",[t._v("导入声明语法")]),t._v(" "),a("h4",{attrs:{id:"import-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#import-declaration"}},[t._v("#")]),t._v(" import-declaration")]),t._v(" "),a("p",[a("em",[t._v("导入声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("特性列表")]),t._v("可选 "),a("strong",[t._v("import")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("导入类型")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("导入路径")])]),t._v(" "),a("h4",{attrs:{id:"import-kind"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#import-kind"}},[t._v("#")]),t._v(" import-kind")]),t._v(" "),a("p",[a("em",[t._v("导入类型")]),t._v(" → "),a("strong",[t._v("typealias")]),t._v(" | "),a("strong",[t._v("struct")]),t._v(" | "),a("strong",[t._v("class")]),t._v(" | "),a("strong",[t._v("enum")]),t._v(" | "),a("strong",[t._v("protocol")]),t._v(" | "),a("strong",[t._v("let")]),t._v(" | "),a("strong",[t._v("var")]),t._v(" | "),a("strong",[t._v("func")])]),t._v(" "),a("h4",{attrs:{id:"import-path"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#import-path"}},[t._v("#")]),t._v(" import-path")]),t._v(" "),a("p",[a("em",[t._v("导入路径")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("导入路径标识符")]),t._v(" | "),a("a",{attrs:{href:""}},[t._v("导入路径标识符")]),t._v(" "),a("strong",[t._v(".")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("导入路径")])]),t._v(" "),a("h4",{attrs:{id:"import-path-identifier"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#import-path-identifier"}},[t._v("#")]),t._v(" import-path-identifier")]),t._v(" "),a("p",[a("em",[t._v("导入路径标识符")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("标识符")]),t._v(" | "),a("RouterLink",{attrs:{to:"/pages/4b779c/#运算符"}},[t._v("运算符")])],1)]),t._v(" "),a("h2",{attrs:{id:"常量声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常量声明"}},[t._v("#")]),t._v(" 常量声明")]),t._v(" "),a("p",[a("em",[t._v("常量声明（constant declaration）")]),t._v(" 可以在程序中引入一个具有命名的常量。常量以关键字 "),a("code",[t._v("let")]),t._v(" 来声明，遵循如下格式：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" 常量名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 类型 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 表达式\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("常量声明在“常量名称”和用于初始化的“表达式”的值之间定义了一种不可变的绑定关系；当常量的值被设定之后，它就无法被更改。这意味着，如果常量以类对象来初始化，对象本身的内容是可以改变的，但是常量和该对象之间的绑定关系是不能改变的。")]),t._v(" "),a("p",[t._v("当一个常量被声明为全局常量时，它必须拥有一个初始值。在函数或者方法中声明一个常量时，它并不需要拥有一个初始值，只需要保证在第一次对其进行读操作之前为其设置一个值。在类或者结构体中声明一个常量时，它将作为"),a("em",[t._v("常量属性（constant property）")]),t._v(" 。常量声明不能是计算型属性，因此也没有存取方法。")]),t._v(" "),a("p",[t._v("如果常量名称是元组形式，元组中每一项的名称都会和初始化表达式中对应的值进行绑定。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("firstNumber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" secondNumber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("在上例中，"),a("code",[t._v("firstNumber")]),t._v(" 是一个值为 "),a("code",[t._v("10")]),t._v(" 的常量，"),a("code",[t._v("secnodeName")]),t._v(" 是一个值为 "),a("code",[t._v("42")]),t._v(" 的常量。所有常量都可以独立地使用：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The first number is ')]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("\\(")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[t._v("firstNumber")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('."')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 打印“The first number is 10.”")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The second number is ')]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("\\(")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[t._v("secondNumber")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('."')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 打印“The second number is 42.”")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("当常量名称的类型（"),a("code",[t._v(":")]),t._v(" 类型）可以被推断出时，类型注解在常量声明中是可选的，正如 "),a("a",{attrs:{href:""}},[t._v("类型推断")]),t._v(" 中所描述的。")]),t._v(" "),a("p",[t._v("声明一个常量类型属性要使用 "),a("code",[t._v("static")]),t._v(" 声明修饰符。类的常量类型属性总是隐式地被标记为 "),a("code",[t._v("final")]),t._v(" ；你无法用 "),a("code",[t._v("class")]),t._v(" 或 "),a("code",[t._v("final")]),t._v(" 声明修饰符实现允许或禁止被子类重写的目的。类型属性在 "),a("a",{attrs:{href:""}},[t._v("类型属性")]),t._v(" 中有介绍。")]),t._v(" "),a("p",[t._v("如果还想获得更多关于常量的信息或者想在使用中获得帮助，请参阅 "),a("a",{attrs:{href:""}},[t._v("常量和变量")]),t._v(" 和 "),a("a",{attrs:{href:""}},[t._v("存储属性")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"grammer-of-a-constant-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grammer-of-a-constant-declaration"}},[t._v("#")]),t._v(" grammer-of-a-constant-declaration")]),t._v(" "),a("blockquote",[a("p",[t._v("常量声明语法")]),t._v(" "),a("h4",{attrs:{id:"constant-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constant-declaration"}},[t._v("#")]),t._v(" constant-declaration")]),t._v(" "),a("p",[a("em",[t._v("常量声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("特性列表")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("声明修饰符列表")]),t._v("可选 "),a("strong",[t._v("let")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("模式构造器列表")])]),t._v(" "),a("h4",{attrs:{id:"pattern-initializer-list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pattern-initializer-list"}},[t._v("#")]),t._v(" pattern-initializer-list")]),t._v(" "),a("p",[a("em",[t._v("模式构造器列表")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("模式构造器")]),t._v(" | "),a("a",{attrs:{href:""}},[t._v("模式构造器")]),t._v(" "),a("strong",[t._v(",")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("模式构造器列表")])]),t._v(" "),a("h4",{attrs:{id:"pattern-initializer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pattern-initializer"}},[t._v("#")]),t._v(" pattern-initializer")]),t._v(" "),a("p",[a("em",[t._v("模式构造器")]),t._v(" → "),a("RouterLink",{attrs:{to:"/pages/55b4cd/"}},[t._v("模式")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("构造器")]),t._v("可选")],1),t._v(" "),a("h4",{attrs:{id:"initializer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initializer"}},[t._v("#")]),t._v(" initializer")]),t._v(" "),a("p",[a("em",[t._v("构造器")]),t._v(" → "),a("strong",[t._v("=")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("表达式")])])]),t._v(" "),a("h2",{attrs:{id:"变量声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量声明"}},[t._v("#")]),t._v(" 变量声明")]),t._v(" "),a("p",[a("em",[t._v("变量声明（variable declaration）")]),t._v(" 可以在程序中引入一个具有命名的变量，它以关键字 "),a("code",[t._v("var")]),t._v(" 来声明。")]),t._v(" "),a("p",[t._v("变量声明有几种不同的形式，可以声明不同种类的命名值和可变值，如存储型和计算型变量和属性，属性观察器，以及静态变量属性。所使用的声明形式取决于变量声明的适用范围和打算声明的变量类型。")]),t._v(" "),a("blockquote",[a("p",[t._v("注意")]),t._v(" "),a("p",[t._v("也可以在协议声明中声明属性，详情请参阅 "),a("a",{attrs:{href:""}},[t._v("协议属性声明")]),t._v("。")])]),t._v(" "),a("p",[t._v("可以在子类中重写继承来的变量属性，使用 "),a("code",[t._v("override")]),t._v(" 声明修饰符标记属性的声明即可，详情请参阅 "),a("RouterLink",{attrs:{to:"/pages/09b0f4/#重写"}},[t._v("重写")]),t._v("。")],1),t._v(" "),a("h3",{attrs:{id:"存储型变量和存储型变量属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存储型变量和存储型变量属性"}},[t._v("#")]),t._v(" 存储型变量和存储型变量属性")]),t._v(" "),a("p",[t._v("使用如下形式声明一个存储型变量或存储型变量属性：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" 变量名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 类型 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 表达式\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("可以在全局范围，函数内部，或者在类和结构体的声明中使用这种形式来声明一个变量。当变量以这种形式在全局范围或者函数内部被声明时，它代表一个存储型变量。当它在类或者结构体中被声明时，它代表一个"),a("em",[t._v("存储型变量属性（stored variable property）")]),t._v(" 。")]),t._v(" "),a("p",[t._v("用于初始化的表达式不可以在协议的声明中出现，在其他情况下，该表达式是可选的。如果没有初始化表达式，那么变量声明必须包含类型注解（"),a("code",[t._v(":")]),t._v(" "),a("em",[t._v("type")]),t._v("）。")]),t._v(" "),a("p",[t._v("如同常量声明，如果变量名称是元组形式，元组中每一项的名称都会和初始化表达式中对应的值进行绑定。")]),t._v(" "),a("p",[t._v("正如名字所示，存储型变量和存储型变量属性的值会存储在内存中。")]),t._v(" "),a("h3",{attrs:{id:"计算型变量和计算型属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#计算型变量和计算型属性"}},[t._v("#")]),t._v(" 计算型变量和计算型属性")]),t._v(" "),a("p",[t._v("使用如下形式声明一个计算型变量或计算型属性：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" 变量名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 类型 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        语句\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("setter 名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        语句\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("可以在全局范围、函数内部，以及类、结构体、枚举、扩展的声明中使用这种形式的声明。当变量以这种形式在全局范围或者函数内部被声明时，它表示一个计算型变量。当它在类、结构体、枚举、扩展声明的上下文中被声明时，它表示一个"),a("em",[t._v("计算型属性（computed property）")]),t._v(" 。")]),t._v(" "),a("p",[t._v("getter 用来读取变量值，setter 用来写入变量值。setter 子句是可选的，getter 子句是必须的。不过也可以将这些子句都省略，直接返回请求的值，正如在 "),a("a",{attrs:{href:""}},[t._v("只读计算型属性")]),t._v(" 中描述的那样。但是如果提供了一个 setter 子句，就必须也提供一个 getter 子句。")]),t._v(" "),a("p",[t._v("setter 的圆括号以及 setter 名称是可选的。如果提供了 setter 名称，它就会作为 setter 的参数名称使用。如果不提供 setter 名称，setter 的参数的默认名称为 "),a("code",[t._v("newValue")]),t._v("，正如在 "),a("a",{attrs:{href:""}},[t._v("便捷 setter 声明")]),t._v(" 中描述的那样。")]),t._v(" "),a("p",[t._v("与存储型变量和存储型属性不同，计算型变量和计算型属性的值不存储在内存中。")]),t._v(" "),a("p",[t._v("要获得更多关于计算型属性的信息和例子，请参阅 "),a("a",{attrs:{href:""}},[t._v("计算型属性")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"存储型变量和属性的观察器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存储型变量和属性的观察器"}},[t._v("#")]),t._v(" 存储型变量和属性的观察器")]),t._v(" "),a("p",[t._v("可以在声明存储型变量或属性时提供 "),a("code",[t._v("willSet")]),t._v(" 和 "),a("code",[t._v("didSet")]),t._v(" 观察器。一个包含观察器的存储型变量或属性以如下形式声明：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" 变量名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 类型 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 表达式 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("willSet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("setter 名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        语句\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("didSet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("setter 名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        语句\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("可以在全局范围、函数内部，或者类、结构体的声明中使用这种形式的声明。当变量以这种形式在全局范围或者函数内部被声明时，观察器表示一个存储型变量观察器。当它在类和结构体的声明中被声明时，观察器表示一个属性观察器。")]),t._v(" "),a("p",[t._v("可以为任何存储型属性添加观察器。也可以通过重写父类属性的方式为任何继承的属性（无论是存储型还是计算型的）添加观察器 ，正如 "),a("a",{attrs:{href:""}},[t._v("重写属性观察器")]),t._v(" 中所描述的。")]),t._v(" "),a("p",[t._v("用于初始化的表达式在类或者结构的声明中是可选的，但是在其他声明中则是必须的。如果可以从初始化表达式中推断出类型信息，那么可以不提供类型注解。")]),t._v(" "),a("p",[t._v("当变量或属性的值被改变时，"),a("code",[t._v("willSet")]),t._v(" 和 "),a("code",[t._v("didSet")]),t._v(" 观察器提供了一种观察方法。观察器会在变量的值被改变时调用，但不会在初始化时被调用。")]),t._v(" "),a("p",[a("code",[t._v("willSet")]),t._v(" 观察器只在变量或属性的值被改变之前调用。新的值作为一个常量传入 "),a("code",[t._v("willSet")]),t._v(" 观察器，因此不可以在 "),a("code",[t._v("willSet")]),t._v(" 中改变它。"),a("code",[t._v("didSet")]),t._v(" 观察器在变量或属性的值被改变后立即调用。和 "),a("code",[t._v("willSet")]),t._v(" 观察器相反，为了方便获取旧值，旧值会传入 "),a("code",[t._v("didSet")]),t._v(" 观察器。这意味着，如果在变量或属性的 "),a("code",[t._v("didiset")]),t._v(" 观察器中设置值，设置的新值会取代刚刚在 "),a("code",[t._v("willSet")]),t._v(" 观察器中传入的那个值。")]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("willSet")]),t._v(" 和 "),a("code",[t._v("didSet")]),t._v(" 中，圆括号以及其中的 setter 名称是可选的。如果提供了一个 setter 名称，它就会作为 "),a("code",[t._v("willSet")]),t._v(" 和 "),a("code",[t._v("didSet")]),t._v(" 的参数被使用。如果不提供 setter 名称，"),a("code",[t._v("willSet")]),t._v(" 观察器的默认参数名为 "),a("code",[t._v("newValue")]),t._v("，"),a("code",[t._v("didSet")]),t._v(" 观察器的默认参数名为 "),a("code",[t._v("oldValue")]),t._v("。")]),t._v(" "),a("p",[t._v("提供了 "),a("code",[t._v("willSet")]),t._v(" 时，"),a("code",[t._v("didSet")]),t._v(" 是可选的。同样的，提供了 "),a("code",[t._v("didSet")]),t._v(" 时，"),a("code",[t._v("willSet")]),t._v(" 则是可选的。")]),t._v(" "),a("p",[t._v("要获得更多信息以及查看如何使用属性观察器的例子，请参阅 "),a("RouterLink",{attrs:{to:"/pages/ce0459/#属性观察器"}},[t._v("属性观察器")]),t._v("。")],1),t._v(" "),a("h3",{attrs:{id:"类型变量属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型变量属性"}},[t._v("#")]),t._v(" 类型变量属性")]),t._v(" "),a("p",[t._v("要声明一个类型变量属性，用 "),a("code",[t._v("static")]),t._v(" 声明修饰符标记该声明。类可以改用 "),a("code",[t._v("class")]),t._v(" 声明修饰符标记类的类型计算型属性从而允许子类重写超类的实现。类型属性在 "),a("a",{attrs:{href:""}},[t._v("类型属性")]),t._v(" 章节有详细讨论。")]),t._v(" "),a("h4",{attrs:{id:"grammer-of-a-variable-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grammer-of-a-variable-declaration"}},[t._v("#")]),t._v(" grammer-of-a-variable-declaration")]),t._v(" "),a("blockquote",[a("p",[t._v("变量声明语法")])]),t._v(" "),a("h4",{attrs:{id:"variable-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#variable-declaration"}},[t._v("#")]),t._v(" variable-declaration")]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("变量声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("变量声明头")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("模式构造器列表")])]),t._v(" "),a("p",[a("em",[t._v("变量声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("变量声明头")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("变量名称")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("类型注解")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("代码块")])]),t._v(" "),a("p",[a("em",[t._v("变量声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("变量声明头")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("变量名称")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("类型注解")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("getter-setter 代码块")])]),t._v(" "),a("p",[a("em",[t._v("变量声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("变量声明头")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("变量名称")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("类型注解")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("getter-setter 关键字代码块")])]),t._v(" "),a("p",[a("em",[t._v("变量声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("变量声明头")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("变量名称")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("构造器")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("willSet-didSet 代码块")])]),t._v(" "),a("p",[a("em",[t._v("变量声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("变量声明头")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("变量名称")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("类型注解")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("构造器")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("willSet-didSet 代码块")])])]),t._v(" "),a("h4",{attrs:{id:"variable-declaration-head"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#variable-declaration-head"}},[t._v("#")]),t._v(" variable-declaration-head")]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("变量声明头")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("特性列表")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("声明修饰符列表")]),t._v("可选 "),a("strong",[t._v("var")])]),t._v(" "),a("h4",{attrs:{id:"variable-name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#variable-name"}},[t._v("#")]),t._v(" variable-name")]),t._v(" "),a("p",[a("em",[t._v("变量名称")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("标识符")])])]),t._v(" "),a("h4",{attrs:{id:"getter-setter-block"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getter-setter-block"}},[t._v("#")]),t._v(" getter-setter-block")]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("getter-setter 代码块")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("代码块")])]),t._v(" "),a("p",[a("em",[t._v("getter-setter 代码块")]),t._v(" → "),a("strong",[t._v("{")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("getter 子句")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("setter 子句")]),t._v("可选 "),a("strong",[t._v("}")])]),t._v(" "),a("p",[a("em",[t._v("getter-setter 代码块")]),t._v(" → "),a("strong",[t._v("{")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("setter 子句")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("getter 子句")]),t._v(" "),a("strong",[t._v("}")])]),t._v(" "),a("h4",{attrs:{id:"getter-clause"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getter-clause"}},[t._v("#")]),t._v(" getter-clause")]),t._v(" "),a("p",[a("em",[t._v("getter 子句")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("特性列表")]),t._v("可选 "),a("strong",[t._v("get")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("代码块")])]),t._v(" "),a("h4",{attrs:{id:"setter-clause"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setter-clause"}},[t._v("#")]),t._v(" setter-clause")]),t._v(" "),a("p",[a("em",[t._v("setter 子句")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("特性列表")]),t._v("可选 "),a("strong",[t._v("set")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("setter 名称")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("代码块")])]),t._v(" "),a("h4",{attrs:{id:"setter-name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setter-name"}},[t._v("#")]),t._v(" setter-name")]),t._v(" "),a("p",[a("em",[t._v("setter 名称")]),t._v(" → "),a("strong",[t._v("(")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("标识符")]),t._v(" "),a("strong",[t._v(")")])])]),t._v(" "),a("h4",{attrs:{id:"getter-setter-keyword-block"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getter-setter-keyword-block"}},[t._v("#")]),t._v(" getter-setter-keyword-block")]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("getter-setter 关键字代码块")]),t._v(" → "),a("strong",[t._v("{")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("getter 关键字子句")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("setter 关键字子句")]),t._v("可选 "),a("strong",[t._v("}")])]),t._v(" "),a("p",[a("em",[t._v("getter-setter 关键字代码块")]),t._v(" → "),a("strong",[t._v("{")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("setter 关键字子句")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("getter 关键字子句")]),t._v(" "),a("strong",[t._v("}")])]),t._v(" "),a("h4",{attrs:{id:"getter-keyword-clause"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getter-keyword-clause"}},[t._v("#")]),t._v(" getter-keyword-clause")]),t._v(" "),a("p",[a("em",[t._v("getter 关键字子句")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("特性列表")]),t._v("可选 "),a("strong",[t._v("get")])]),t._v(" "),a("h4",{attrs:{id:"setter-keyword-clause"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setter-keyword-clause"}},[t._v("#")]),t._v(" setter-keyword-clause")]),t._v(" "),a("p",[a("em",[t._v("setter 关键字子句")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("特性列表")]),t._v("可选 "),a("strong",[t._v("set")])])]),t._v(" "),a("h4",{attrs:{id:"willset-didset-block"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#willset-didset-block"}},[t._v("#")]),t._v(" willSet-didSet-block")]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("willSet-didSet 代码块")]),t._v(" → "),a("strong",[t._v("{")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("willSet 子句")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("didSet 子句")]),t._v("可选 "),a("strong",[t._v("}")])]),t._v(" "),a("p",[a("em",[t._v("willSet-didSet 代码块")]),t._v(" → "),a("strong",[t._v("{")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("didSet 子句")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("willSet 子句")]),t._v("可选 "),a("strong",[t._v("}")])]),t._v(" "),a("h4",{attrs:{id:"willset-clause"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#willset-clause"}},[t._v("#")]),t._v(" willSet-clause")]),t._v(" "),a("p",[a("em",[t._v("willSet 子句")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("特性列表")]),t._v("可选 "),a("strong",[t._v("willSet")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("setter 名称")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("代码块")])]),t._v(" "),a("h4",{attrs:{id:"didset-clause"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#didset-clause"}},[t._v("#")]),t._v(" didSet-clause")]),t._v(" "),a("p",[a("em",[t._v("didSet 子句")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("特性列表")]),t._v("可选 "),a("strong",[t._v("didSet")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("setter 名称")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("代码块")])])]),t._v(" "),a("h2",{attrs:{id:"类型别名声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型别名声明"}},[t._v("#")]),t._v(" 类型别名声明")]),t._v(" "),a("p",[a("em",[t._v("类型别名（type alias）")]),t._v(" 声明可以在程序中为一个既有类型声明一个别名。类型别名声明语句使用关键字 "),a("code",[t._v("typealias")]),t._v(" 声明，遵循如下的形式：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typealias")]),t._v(" 类型别名 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 现存类型\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("当声明一个类型的别名后，可以在程序的任何地方使用“别名”来代替现有类型。现有类型可以是具有命名的类型或者混合类型。类型别名不产生新的类型，它只是使用别名来引用现有类型。")]),t._v(" "),a("p",[t._v("类型别名声明可以通过泛型参数来给一个现有泛型类型提供名称。类型别名为现有类型的一部分或者全部泛型参数提供具体类型。例如:")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typealias")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringDictionary")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Value")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dictionary")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Value")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下列两个字典拥有同样的类型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" dictionary1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringDictionary")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" dictionary2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dictionary")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("当一个类型别名带着泛型参数一起被声明时，这些参数的约束必须与现有参数的约束完全匹配。例如:")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typealias")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DictionaryOfInts")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Key")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Hashable")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dictionary")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Key")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("因为类型别名可以和现有类型相互交换使用，类型别名不可以引入额外的类型约束。")]),t._v(" "),a("p",[t._v("如果在声明处省略所有泛型参数，一个类型别名可以传递已有类型的所有泛型参数。例如，此处声明的 "),a("code",[t._v("Diccionario")]),t._v(" 类型别名拥有和 "),a("code",[t._v("Dictionary")]),t._v(" 同样的约束和泛型参数。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typealias")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Diccionario")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dictionary")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("在协议声明中，类型别名可以为那些经常使用的类型提供一个更短更方便的名称，例如:")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protocol")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Sequence")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("associatedtype")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Iterator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IteratorProtocol")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typealias")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Element")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Iterator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Element")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Sequence")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token omit keyword"}},[t._v("_")]),t._v(" sequence"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Element")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("假如没有类型别名，sum 函数将必须引用关联类型通过 T.Iterator.Element 的形式来替代 T.Element。")]),t._v(" "),a("p",[t._v("另请参阅 "),a("a",{attrs:{href:""}},[t._v("协议关联类型声明")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"grammer-of-a-type-alias-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grammer-of-a-type-alias-declaration"}},[t._v("#")]),t._v(" grammer-of-a-type-alias-declaration")]),t._v(" "),a("blockquote",[a("p",[t._v("类型别名声明语法")]),t._v(" "),a("h4",{attrs:{id:"typealias-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typealias-declaration"}},[t._v("#")]),t._v(" typealias-declaration")]),t._v(" "),a("p",[a("em",[t._v("类型别名声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("特性列表")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("访问级别修饰符")]),t._v("可选 "),a("strong",[t._v("typealias")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("类型别名名称")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("类型别子句")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("类型别名赋值")])]),t._v(" "),a("h4",{attrs:{id:"typealias-name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typealias-name"}},[t._v("#")]),t._v(" typealias-name")]),t._v(" "),a("p",[a("em",[t._v("类型别名名称")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("标识符")])]),t._v(" "),a("h4",{attrs:{id:"typealias-assignment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typealias-assignment"}},[t._v("#")]),t._v(" typealias-assignment")]),t._v(" "),a("p",[a("em",[t._v("类型别名赋值")]),t._v(" → "),a("strong",[t._v("=")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("类型")])])]),t._v(" "),a("h2",{attrs:{id:"函数声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数声明"}},[t._v("#")]),t._v(" 函数声明")]),t._v(" "),a("p",[t._v("使用"),a("em",[t._v("函数声明（function declaration）")]),t._v(" 在程序中引入新的函数或者方法。在类、结构体、枚举，或者协议中声明的函数会作为方法。函数声明使用关键字 "),a("code",[t._v("func")]),t._v("，遵循如下的形式：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" 函数名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("参数列表"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" 返回类型 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    语句\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("如果函数返回 "),a("code",[t._v("Void")]),t._v(" 类型，返回类型可以省略，如下所示：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" 函数名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("参数列表"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    语句\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("每个参数的类型都要标明，因为它们不能被推断出来。如果您在某个参数类型前面加上了 "),a("code",[t._v("inout")]),t._v("，那么这个参数就可以在这个函数作用域当中被修改。更多关于 "),a("code",[t._v("inout")]),t._v(" 参数的讨论，请参阅 "),a("RouterLink",{attrs:{to:"/pages/756349/#输入输出参数"}},[t._v("输入输出参数")]),t._v("。")],1),t._v(" "),a("p",[t._v("函数声明中语句只包含一个表达式，可以理解为返回该表达式的值。")]),t._v(" "),a("p",[t._v("函数可以使用元组类型作为返回类型来返回多个值。")]),t._v(" "),a("p",[t._v("函数定义可以出现在另一个函数声明内。这种函数被称作"),a("em",[t._v("嵌套函数（nested function）")]),t._v(" 。")]),t._v(" "),a("p",[t._v("大多数时候，嵌套函数都是可逃逸的函数。仅当一个嵌套函数捕获了某个确保了永不逃逸的值——例如一个输入输出参数——或者传入一个非逃逸函数参数的时候，这个嵌套函数才是非逃逸的。")]),t._v(" "),a("p",[t._v("更多关于嵌套函数的讨论，请参阅 "),a("a",{attrs:{href:""}},[t._v("嵌套函数")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"参数名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数名"}},[t._v("#")]),t._v(" 参数名")]),t._v(" "),a("p",[t._v("函数的参数列表由一个或多个函数参数组成，参数间以逗号分隔。函数调用时的参数顺序必须和函数声明时的参数顺序一致。最简单的参数列表有着如下的形式：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[t._v("参数名称`"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" `参数类型\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("每个参数有一个参数名称，这个名称与实参标签一样都可以在函数体内被使用。默认情况下，参数名也会被作为实参标签来使用。例如：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 参数 x 和 y 都有标签")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("可以按照如下两种形式之一，重写参数名称的默认行为：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[t._v("实参标签` `参数名称`"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" `参数类型` "),a("span",{pre:!0,attrs:{class:"token omit keyword"}},[t._v("_")]),t._v(" `参数名称`"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" `参数类型\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("在参数名称前的名称会作为这个参数的显式实参标签，它可以和参数名称不同。在函数或方法调用时，相对应的参数必须使用这个实参标签。")]),t._v(" "),a("p",[t._v("参数名称前的下划线（"),a("code",[t._v("_")]),t._v("）可以去除参数的实参标签。在函数或方法调用时，相对应的参数必须去除标签。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("repeatGreeting")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token omit keyword"}},[t._v("_")]),t._v(" greeting"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" count n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Greet n times */")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("repeatGreeting")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, world!"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  count 有标签, greeting 没有")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h3",{attrs:{id:"输入输出参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#输入输出参数"}},[t._v("#")]),t._v(" 输入输出参数")]),t._v(" "),a("p",[t._v("输入输出参数被传递时遵循如下规则：")]),t._v(" "),a("ol",[a("li",[t._v("函数调用时，参数的值被拷贝。")]),t._v(" "),a("li",[t._v("函数体内部，拷贝后的值被修改。")]),t._v(" "),a("li",[t._v("函数返回后，拷贝后的值被赋值给原参数。")])]),t._v(" "),a("p",[t._v("这种行为被称为"),a("em",[t._v("拷入拷出（copy-in copy-out）")]),t._v(" 或"),a("em",[t._v("值结果调用（call by value result）")]),t._v(" 。例如，当一个计算型属性或者一个具有属性观察器的属性被用作函数的输入输出参数时，其 getter 会在函数调用时被调用，而其 setter 会在函数返回时被调用。")]),t._v(" "),a("p",[t._v("作为一种优化手段，当参数值存储在内存中的物理地址时，在函数体内部和外部均会使用同一内存位置。这种优化行为被称为"),a("em",[t._v("引用调用（call by reference）")]),t._v(" ，它满足了拷入拷出模式的所有要求，且消除了复制带来的开销。在代码中，要规范使用拷入拷出模式，不要依赖于引用调用。")]),t._v(" "),a("p",[t._v("不要使用传递给输入输出参数的值，即使原始值在当前作用域中依然可用。当函数返回时，你对原始值所做的更改会被拷贝的值所覆盖。不要依赖于引用调用的优化机制来试图避免这种覆盖。")]),t._v(" "),a("p",[t._v("不能将同一个值传递给多个输入输出参数，因为这种情况下的拷贝与覆盖行为的顺序是不确定的，因此原始值的最终值也将无法确定。")]),t._v(" "),a("p",[t._v("更多关于内存安全和内存独占权的讨论，请参阅 "),a("a",{attrs:{href:"https://github.com/SwiftGGTeam/the-swift-programming-language-in-chinese/tree/83500eba22fa5e8e285debcc23cb6fd6b47fbdf1/source/02_language_guide/24_Memory_Safety.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("内存安全"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[t._v("如果一个闭包或者嵌套函数捕获了一个输入输出参数，那么这个闭包或者嵌套函数必须是非逃逸的。如果你需要捕获一个输入输出参数，但并不对其进行修改或者在其他代码中观察其值变化，那么你可以使用捕获列表来显式地表明这是个不可变捕获。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("someFunction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inout")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("如果你需要捕获并修改一个输入输出参数，使用一个显式局部拷贝来进行修改操作，在一些例如多线程的场景中，这样做可以确保函数返回之前所有的修改都已完成。")]),t._v(" "),a("p",[t._v("如果嵌套函数在外层函数返回后才调用，嵌套函数对输入输出参数造成的任何改变将不会影响到原始值。例如：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("multithreadedFunction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("queue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DispatchQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inout")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建一个局部拷贝并在适当时候手动拷贝回去")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" localX "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" localX "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 并行地操作 localX，然后在函数返回前一直等待")]),t._v("\n    queue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("someMutatingOperation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("localX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    queue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sync "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[t._v("关于输入输出参数的详细讨论，请参阅 "),a("RouterLink",{attrs:{to:"/pages/756349/#输入输出参数"}},[t._v("输入输出参数")]),t._v("。")],1),t._v(" "),a("h3",{attrs:{id:"特殊参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特殊参数"}},[t._v("#")]),t._v(" 特殊参数")]),t._v(" "),a("p",[t._v("参数可以被忽略，数量可以不固定，还可以为其提供默认值，使用形式如下：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token omit keyword"}},[t._v("_")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 参数类型\n参数名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 参数类型"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n参数名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 参数类型 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 默认参数值\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("以下划线（"),a("code",[t._v("_")]),t._v("）命名的参数会被显式忽略，无法在函数内使用。")]),t._v(" "),a("p",[t._v("一个参数的基本类型名称如果紧跟着三个点（"),a("code",[t._v("...")]),t._v("），会被视为可变参数。一个函数至多可以拥有一个可变参数，且必须是最后一个参数。可变参数会作为包含该参数类型元素的数组处理。举例来讲，可变参数 "),a("code",[t._v("Int...")]),t._v(" 会作为 "),a("code",[t._v("[Int]")]),t._v(" 来处理。关于使用可变参数的例子，请参阅 "),a("RouterLink",{attrs:{to:"/pages/b69d99/#可变参数"}},[t._v("可变参数")]),t._v("。")],1),t._v(" "),a("p",[t._v("如果在参数类型后面有一个以等号（"),a("code",[t._v("=")]),t._v("）连接的表达式，该参数会拥有默认值，即给定表达式的值。当函数被调用时，给定的表达式会被求值。如果参数在函数调用时被省略了，就会使用其默认值。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 有效，使用默认值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 有效，提供了值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 无效，该参数没有外部名称")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h3",{attrs:{id:"特殊方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特殊方法"}},[t._v("#")]),t._v(" 特殊方法")]),t._v(" "),a("p",[t._v("枚举或结构体的方法如果会修改 "),a("code",[t._v("self")]),t._v("，则必须以 "),a("code",[t._v("mutating")]),t._v(" 声明修饰符标记。")]),t._v(" "),a("p",[t._v("子类重写超类中的方法必须以 "),a("code",[t._v("override")]),t._v(" 声明修饰符标记。重写方法时不使用 "),a("code",[t._v("override")]),t._v(" 修饰符，或者被 "),a("code",[t._v("override")]),t._v(" 修饰符修饰的方法并未对超类方法构成重写，都会导致编译错误。")]),t._v(" "),a("p",[t._v("枚举或者结构体中的类型方法，要以 "),a("code",[t._v("static")]),t._v(" 声明修饰符标记，而对于类中的类型方法，除了使用 "),a("code",[t._v("static")]),t._v("，还可使用 "),a("code",[t._v("class")]),t._v(" 声明修饰符标记。类中使用 "),a("code",[t._v("class")]),t._v(" 声明修饰的方法可以被子类实现重写；类中使用 "),a("code",[t._v("class final")]),t._v(" 或 "),a("code",[t._v("static")]),t._v(" 声明修饰的方法不可被重写。")]),t._v(" "),a("h3",{attrs:{id:"特殊名称方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特殊名称方法"}},[t._v("#")]),t._v(" 特殊名称方法")]),t._v(" "),a("p",[t._v("一些含有特殊名称的方法允许使用函数调用语法糖。如果一个类型定义了某个此类型的方法，那这些类型的实例对象都可以使用函数调用语法。这些函数调用会被解析为某个具有特殊名称的实例方法调用。")]),t._v(" "),a("p",[t._v("如同 "),a("a",{attrs:{href:""}},[t._v("dynamicCallable")]),t._v(" 中描述的一样，只要定义了 "),a("code",[t._v("dynamicallyCall(withArguments:)")]),t._v(" 方法或者 "),a("code",[t._v("dynamicallyCall(withKeywordArguments:)")]),t._v(" 方法，一个类、结构体或者枚举类型都支持函数调用语法。同时如下面的描述一样，定义了一个函数调用方法（call-as-function method）也可以达到上述效果。如果一个类型同时定义了一个函数调用方法和使用 "),a("code",[t._v("dynamicCallable")]),t._v(" 属性的方法，那么在合适的情况下，编译器会优先使用函数调用方法。")]),t._v(" "),a("p",[t._v("函数调用方法的名称是 "),a("code",[t._v("callAsFunction()")]),t._v("，或者任意一个以 "),a("code",[t._v("callAsFunction(")]),t._v(" 开头并跟随着一些已标签化或未标签化的参数——例如 "),a("code",[t._v("callAsFunction(_:_:)")]),t._v(" 和 "),a("code",[t._v("callAsFunction(something:)")]),t._v(" 都是合法的函数调用方法名称。")]),t._v(" "),a("p",[t._v("如下的函数调用是相同的：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CallableStruct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("callAsFunction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token omit keyword"}},[t._v("_")]),t._v(" number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" scale"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("scale "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" callable "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CallableStruct")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("callable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" scale"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncallable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("callAsFunction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" scale"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 两次函数调用都会打印 208")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[t._v("函数调用方法和使用 "),a("code",[t._v("dynamicCallable")]),t._v(" 属性定义的方法在编码到类型系统中的信息量和运行时的动态行为能力上会有些差别。当你定义了一个函数调用方法时，你需要指定参数的数量，以及每个参数的类型和标签。与此不同的是，"),a("code",[t._v("dynamicCallable")]),t._v(" 属性定义的方法只需要指定用于承载参数的数组类型。")]),t._v(" "),a("p",[t._v("函数调用方法或 "),a("code",[t._v("dynamicCallable")]),t._v(" 属性定义的方法并不允许你在任何上下文中把实例对象作为函数类型来处理。示例代码如下：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" someFunction1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("callable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token omit keyword"}},[t._v("_")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("scale"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Error")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" someFunction2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" callable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("callAsFunction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token omit keyword"}},[t._v("_")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("scale"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("如 "),a("a",{attrs:{href:""}},[t._v("dynamicmemberlookup")]),t._v(" 描述的一样，"),a("code",[t._v("subscript(dynamicMemberLookup:)")]),t._v(" 下标允许成员查找的语法糖。")]),t._v(" "),a("h3",{attrs:{id:"抛出错误的函数和方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抛出错误的函数和方法"}},[t._v("#")]),t._v(" 抛出错误的函数和方法")]),t._v(" "),a("p",[t._v("可以抛出错误的函数或方法必须使用 "),a("code",[t._v("throws")]),t._v(" 关键字标记。这类函数和方法被称为抛出函数和抛出方法。它们有着下面的形式:")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" 函数名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("参数列表"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" 返回类型 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    语句\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("抛出函数或抛出方法的调用必须包裹在 "),a("code",[t._v("try")]),t._v(" 或者 "),a("code",[t._v("try!")]),t._v(" 表达式中（也就是说，在作用域内使用 "),a("code",[t._v("try")]),t._v(" 或者 "),a("code",[t._v("try!")]),t._v(" 运算符）。")]),t._v(" "),a("p",[a("code",[t._v("throws")]),t._v(" 关键字是函数的类型的一部分，非抛出函数是抛出函数的子类型。所以，可以在使用抛出函数的地方使用非抛出函数。")]),t._v(" "),a("p",[t._v("不能仅基于函数能否抛出错误来进行函数重写。也就是说，可以基于函数的函数类型的参数能否抛出错误来进行函数重写。")]),t._v(" "),a("p",[t._v("抛出方法不能重写非抛出方法，而且抛出方法不能满足协议对于非抛出方法的要求。也就是说，非抛出方法可以重写抛出方法，而且非抛出方法可以满足协议对于抛出方法的要求。")]),t._v(" "),a("h3",{attrs:{id:"重抛错误的函数和方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重抛错误的函数和方法"}},[t._v("#")]),t._v(" 重抛错误的函数和方法")]),t._v(" "),a("p",[t._v("函数或方法可以使用 "),a("code",[t._v("rethrows")]),t._v(" 关键字来声明，从而表明仅当该函数或方法的一个函数类型的参数抛出错误时，该函数或方法才抛出错误。这类函数和方法被称为重抛函数和重抛方法。重新抛出错误的函数或方法必须至少有一个参数的类型为抛出函数。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("someFunction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("callback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rethrows")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("重抛函数或者方法不能够从自身直接抛出任何错误，这意味着它不能够包含 "),a("code",[t._v("throw")]),t._v(" 语句。它只能够传递作为参数的抛出函数所抛出的错误。例如，在 "),a("code",[t._v("do-catch")]),t._v(" 语句中调用抛出函数，并在 "),a("code",[t._v("catch")]),t._v(" 子句中抛出其它错误都是不允许的。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("alwaysThrows")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SomeError")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("error\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("someFunction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("callback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rethrows")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alwaysThrows")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 非法, alwaysThrows() 不是一个抛出函数类型的参数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AnotherError")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("error\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("p",[t._v("抛出方法不能重写重抛方法，而且抛出方法不能满足协议对于重抛方法的要求。也就是说，重抛方法可以重写抛出方法，而且重抛方法可以满足协议对于抛出方法的要求。")]),t._v(" "),a("h3",{attrs:{id:"永不返回的函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#永不返回的函数"}},[t._v("#")]),t._v(" 永不返回的函数")]),t._v(" "),a("p",[t._v("Swift 定义了 "),a("code",[t._v("Never")]),t._v(" 类型，它表示函数或者方法不会返回给它的调用者。"),a("code",[t._v("Never")]),t._v(" 返回类型的函数或方法可以称为不归，不归函数、方法要么引发不可恢复的错误，要么永远不停地运作，这会使调用后本应执行得代码就不再执行了。但即使是不归函数、方法，抛错函数和重抛出函数也可以将程序控制转移到合适的 "),a("code",[t._v("catch")]),t._v(" 代码块。")]),t._v(" "),a("p",[t._v("不归函数、方法可以在 guard 语句的 else 字句中调用，具体讨论在 "),a("a",{attrs:{href:""}},[a("em",[t._v("Guard 语句")])]),t._v("。")]),t._v(" "),a("p",[t._v("你可以重写一个不归方法，但是新的方法必须保持原有的返回类型和没有返回的行为。")]),t._v(" "),a("h4",{attrs:{id:"grammer-of-a-function-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grammer-of-a-function-declaration"}},[t._v("#")]),t._v(" grammer-of-a-function-declaration")]),t._v(" "),a("blockquote",[a("p",[t._v("函数声明语法")])]),t._v(" "),a("h4",{attrs:{id:"function-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-declaration"}},[t._v("#")]),t._v(" function-declaration")]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("函数声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("函数头")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("函数名")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("泛型形参子句")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("函数签名")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("泛型 where 子句")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("函数体")]),t._v("可选")])]),t._v(" "),a("h4",{attrs:{id:"function-head"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-head"}},[t._v("#")]),t._v(" function-head")]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("函数头")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("特性列表")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("声明修饰符列表")]),t._v("可选 "),a("strong",[t._v("func")])]),t._v(" "),a("h4",{attrs:{id:"function-name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-name"}},[t._v("#")]),t._v(" function-name")]),t._v(" "),a("p",[a("em",[t._v("函数名")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("标识符")]),t._v(" | "),a("RouterLink",{attrs:{to:"/pages/4b779c/#运算符"}},[t._v("运算符")])],1),t._v(" "),a("h4",{attrs:{id:"function-signature"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-signature"}},[t._v("#")]),t._v(" function-signature")]),t._v(" "),a("p",[a("em",[t._v("函数签名")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("参数子句列表")]),t._v(" "),a("strong",[t._v("throws")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("函数结果")]),t._v("可选")]),t._v(" "),a("p",[a("em",[t._v("函数签名")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("参数子句列表")]),t._v(" "),a("strong",[t._v("rethrows")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("函数结果")]),t._v("可选")]),t._v(" "),a("h4",{attrs:{id:"function-result"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-result"}},[t._v("#")]),t._v(" function-result")]),t._v(" "),a("p",[a("em",[t._v("函数结果")]),t._v(" → "),a("strong",[t._v("->")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("特性列表")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("类型")])]),t._v(" "),a("h4",{attrs:{id:"function-body"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-body"}},[t._v("#")]),t._v(" function-body")]),t._v(" "),a("p",[a("em",[t._v("函数体")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("代码块")])]),t._v(" "),a("h4",{attrs:{id:"parameter-clause"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameter-clause"}},[t._v("#")]),t._v(" parameter-clause")]),t._v(" "),a("p",[a("em",[t._v("参数子句")]),t._v(" → "),a("strong",[t._v("(")]),t._v(" "),a("strong",[t._v(")")]),t._v(" | "),a("strong",[t._v("(")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("参数列表")]),t._v(" "),a("strong",[t._v(")")])]),t._v(" "),a("h4",{attrs:{id:"parameter-list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameter-list"}},[t._v("#")]),t._v(" parameter-list")]),t._v(" "),a("p",[a("em",[t._v("参数列表")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("参数")]),t._v(" | "),a("a",{attrs:{href:""}},[t._v("参数")]),t._v(" "),a("strong",[t._v(",")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("参数列表")])]),t._v(" "),a("h4",{attrs:{id:"parameter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameter"}},[t._v("#")]),t._v(" parameter")]),t._v(" "),a("p",[a("em",[t._v("参数")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("外部参数名")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("内部参数名")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("类型注解")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("默认参数子句")]),t._v("可选")]),t._v(" "),a("p",[a("em",[t._v("参数")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("外部参数名")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("内部参数名")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("类型注解")])]),t._v(" "),a("p",[a("em",[t._v("参数")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("外部参数名")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("内部参数名")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("类型注解")]),t._v(" "),a("strong",[t._v("...")])]),t._v(" "),a("h4",{attrs:{id:"external-parameter-name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#external-parameter-name"}},[t._v("#")]),t._v(" external-parameter-name")]),t._v(" "),a("p",[a("em",[t._v("外部参数名")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("标识符")]),t._v(" | "),a("strong",[t._v("-")])]),t._v(" "),a("h4",{attrs:{id:"local-parameter-name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#local-parameter-name"}},[t._v("#")]),t._v(" local-parameter-name")]),t._v(" "),a("p",[a("em",[t._v("内部参数名")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("标识符")]),t._v(" | "),a("strong",[t._v("-")])]),t._v(" "),a("h4",{attrs:{id:"default-argument-clause"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#default-argument-clause"}},[t._v("#")]),t._v(" default-argument-clause")]),t._v(" "),a("p",[a("em",[t._v("默认参数子句")]),t._v(" → "),a("strong",[t._v("=")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("表达式")])])]),t._v(" "),a("h2",{attrs:{id:"枚举声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#枚举声明"}},[t._v("#")]),t._v(" 枚举声明")]),t._v(" "),a("p",[t._v("在程序中使用"),a("em",[t._v("枚举声明（enumeration declaration）")]),t._v(" 来引入一个枚举类型。")]),t._v(" "),a("p",[t._v("枚举声明有两种基本形式，使用关键字 "),a("code",[t._v("enum")]),t._v(" 来声明。枚举声明体包含零个或多个值，称为枚举用例，还可包含任意数量的声明，包括计算型属性、实例方法、类型方法、构造器、类型别名，甚至其他枚举、结构体和类。枚举声明不能包含析构器或者协议声明。")]),t._v(" "),a("p",[t._v("枚举类型可以采纳任意数量的协议，但是枚举不能从类、结构体和其他枚举继承。")]),t._v(" "),a("p",[t._v("不同于类或者结构体，枚举类型并不隐式提供默认构造器，所有构造器必须显式声明。一个构造器可以委托给枚举中的其他构造器，但是构造过程仅当构造器将一个枚举用例赋值给 "),a("code",[t._v("self")]),t._v(" 后才算完成。")]),t._v(" "),a("p",[t._v("和结构体类似但是和类不同，枚举是值类型。枚举实例在被赋值到变量或常量时，或者传递给函数作为参数时会被复制。更多关于值类型的信息，请参阅 "),a("RouterLink",{attrs:{to:"/pages/0641bb/#结构体和枚举是值类型"}},[t._v("结构体和枚举是值类型")]),t._v("。")],1),t._v(" "),a("p",[t._v("可以扩展枚举类型，正如在 "),a("a",{attrs:{href:""}},[t._v("扩展声明")]),t._v(" 中讨论的一样。")]),t._v(" "),a("h3",{attrs:{id:"任意类型的枚举用例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#任意类型的枚举用例"}},[t._v("#")]),t._v(" 任意类型的枚举用例")]),t._v(" "),a("p",[t._v("如下的形式声明了一个包含任意类型枚举用例的枚举变量：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" 枚举名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 采纳的协议 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" 枚举用例"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" 枚举用例"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("关联值类型"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("这种形式的枚举声明在其他语言中有时被叫做可识别联合。")]),t._v(" "),a("p",[t._v("在这种形式中，每个用例块由关键字 "),a("code",[t._v("case")]),t._v(" 开始，后面紧接一个或多个以逗号分隔的枚举用例。每个用例名必须是独一无二的。每个用例也可以指定它所存储的指定类型的值，这些类型在关联值类型的元组中被指定，紧跟用例名之后。")]),t._v(" "),a("p",[t._v("具有关联值的枚举用例可以像函数一样使用，通过指定的关联值创建枚举实例。和真正的函数一样，你可以获取枚举用例的引用，然后在后续代码中调用它。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("real")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Double")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// f 的类型为 (Int) -> Number")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" f "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("integer\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 利用 f 把一个整数数组转成 Number 数组")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" evenInts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[t._v("要获得更多关于具有关联值的枚举用例的信息和例子，请参阅 "),a("a",{attrs:{href:""}},[t._v("关联值")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"递归枚举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归枚举"}},[t._v("#")]),t._v(" 递归枚举")]),t._v(" "),a("p",[t._v("枚举类型可以具有递归结构，就是说，枚举用例的关联值类型可以是枚举类型自身。然而，枚举类型的实例具有值语义，这意味着它们在内存中有固定布局。为了支持递归，编译器必须插入一个间接层。")]),t._v(" "),a("p",[t._v("要让某个枚举用例支持递归，使用 "),a("code",[t._v("indirect")]),t._v(" 声明修饰符标记该用例。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Tree")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" empty\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("indirect")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("node")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Tree")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("right")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Tree")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("要让一个枚举类型的所有用例都支持递归，使用 "),a("code",[t._v("indirect")]),t._v(" 修饰符标记整个枚举类型，当枚举有多个用例且每个用例都需要使用 "),a("code",[t._v("indirect")]),t._v(" 修饰符标记的时候这将非常便利。")]),t._v(" "),a("p",[t._v("被 "),a("code",[t._v("indirect")]),t._v(" 修饰符标记的枚举用例必须有一个关联值。使用 "),a("code",[t._v("indirect")]),t._v(" 修饰符标记的枚举类型可以既包含有关联值的用例，同时还可包含没有关联值的用例。但是，它不能再单独使用 "),a("code",[t._v("indirect")]),t._v(" 修饰符来标记某个用例。")]),t._v(" "),a("h3",{attrs:{id:"拥有原始值的枚举用例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拥有原始值的枚举用例"}},[t._v("#")]),t._v(" 拥有原始值的枚举用例")]),t._v(" "),a("p",[t._v("以下形式声明了一种枚举类型，其中各个枚举用例的类型均为同一种基本类型：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" 枚举名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 原始值类型"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 采纳的协议 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" 枚举用例"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 原始值"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" 枚举用例"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 原始值"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("在这种形式中，每一个用例块由 "),a("code",[t._v("case")]),t._v(" 关键字开始，后面紧跟一个或多个以逗号分隔的枚举用例。和第一种形式的枚举用例不同，这种形式的枚举用例包含一个基础值，叫做原始值，各个枚举用例的原始值的类型必须相同。这些原始值的类型通过原始值类型指定，必须表示一个整数、浮点数、字符串或者字符。原始值类型必须符合 "),a("code",[t._v("Equatable")]),t._v(" 协议和下列字面量转换协议中的一种：整型字面量需符合 "),a("code",[t._v("IntergerLiteralConvertible")]),t._v(" 协议，浮点型字面量需符合 "),a("code",[t._v("FloatingPointLiteralConvertible")]),t._v(" 协议，包含任意数量字符的字符串型字面量需符合 "),a("code",[t._v("StringLiteralConvertible")]),t._v(" 协议，仅包含一个单一字符的字符串型字面量需符合 "),a("code",[t._v("ExtendedGraphemeClusterLiteralConvertible")]),t._v(" 协议。每一个用例的名字和原始值必须唯一。")]),t._v(" "),a("p",[t._v("如果原始值类型被指定为 "),a("code",[t._v("Int")]),t._v("，则不必为用例显式地指定原始值，它们会隐式地被赋值 "),a("code",[t._v("0")]),t._v("、"),a("code",[t._v("1")]),t._v("、"),a("code",[t._v("2")]),t._v(" 等。每个未被赋值的 "),a("code",[t._v("Int")]),t._v(" 类型的用例会被隐式地赋值，其值为上一个用例的原始值加 "),a("code",[t._v("1")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExampleEnum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("在上面的例子中，"),a("code",[t._v("ExampleEnum.A")]),t._v(" 的原始值是 "),a("code",[t._v("0")]),t._v("，"),a("code",[t._v("ExampleEnum.B")]),t._v(" 的原始值是 "),a("code",[t._v("1")]),t._v("。因为 "),a("code",[t._v("ExampleEnum.C")]),t._v(" 的原始值被显式地设定为 "),a("code",[t._v("5")]),t._v("，因此 "),a("code",[t._v("ExampleEnum.D")]),t._v(" 的原始值会自动增长为 "),a("code",[t._v("6")]),t._v("。")]),t._v(" "),a("p",[t._v("如果原始值类型被指定为 "),a("code",[t._v("String")]),t._v(" 类型，你不用明确地为用例指定原始值，每个没有指定原始值的用例会隐式地将用例名字作为原始值。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GamePlayMode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" cooperative"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" individual"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" competitive\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("在上面这个例子中，"),a("code",[t._v("GamePlayMode.cooperative")]),t._v(" 的原始值是 "),a("code",[t._v('"cooperative"')]),t._v("，"),a("code",[t._v("GamePlayMode.individual")]),t._v(" 的原始值是 "),a("code",[t._v('"individual"')]),t._v("，"),a("code",[t._v("GamePlayMode.competitive")]),t._v(" 的原始值是 "),a("code",[t._v('"competitive"')]),t._v("。")]),t._v(" "),a("p",[t._v("枚举用例具有原始值的枚举类型隐式地符合定义在 Swift 标准库中的 "),a("code",[t._v("RawRepresentable")]),t._v(" 协议。所以，它们拥有一个 "),a("code",[t._v("rawValue")]),t._v(" 属性和一个可失败构造器 "),a("code",[t._v("init?(rawValue: RawValue)")]),t._v("。可以使用 "),a("code",[t._v("rawValue")]),t._v(" 属性去获取枚举用例的原始值，例如 "),a("code",[t._v("ExampleEnum.b.rawValue")]),t._v("。还可以根据原始值来创建一个相对应的枚举用例，只需调用枚举的可失败构造器，例如 "),a("code",[t._v("ExampleEnum(rawValue: 5)")]),t._v("，这个可失败构造器返回一个可选类型的用例。要获得更多关于具有原始值的枚举用例的信息和例子，请参阅 "),a("a",{attrs:{href:""}},[t._v("原始值")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"访问枚举用例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问枚举用例"}},[t._v("#")]),t._v(" 访问枚举用例")]),t._v(" "),a("p",[t._v("使用点语法（"),a("code",[t._v(".")]),t._v("）来引用枚举类型的枚举用例，例如 "),a("code",[t._v("EnumerationType.enumerationCase")]),t._v("。当枚举类型可以由上下文推断而出时，可以省略它（但是 "),a("code",[t._v(".")]),t._v(" 仍然需要），正如 "),a("a",{attrs:{href:""}},[t._v("枚举语法")]),t._v(" 和 "),a("a",{attrs:{href:""}},[t._v("显式成员表达式")]),t._v(" 所述。")]),t._v(" "),a("p",[t._v("可以使用 "),a("code",[t._v("switch")]),t._v(" 语句来检验枚举用例的值，正如 "),a("a",{attrs:{href:""}},[t._v("使用 switch 语句匹配枚举值")]),t._v(" 所述。枚举类型是模式匹配的，依靠 "),a("code",[t._v("switch")]),t._v(" 语句 "),a("code",[t._v("case")]),t._v(" 块中的枚举用例模式，正如 "),a("a",{attrs:{href:""}},[t._v("枚举用例模式")]),t._v(" 所述。")]),t._v(" "),a("h4",{attrs:{id:"grammer-of-an-enumeration-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grammer-of-an-enumeration-declaration"}},[t._v("#")]),t._v(" grammer-of-an-enumeration-declaration")]),t._v(" "),a("blockquote",[a("p",[t._v("枚举声明语法")]),t._v(" "),a("h4",{attrs:{id:"enum-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#enum-declaration"}},[t._v("#")]),t._v(" enum-declaration")]),t._v(" "),a("p",[a("em",[t._v("枚举声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("特性列表")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("访问级别修饰符")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("联合风格枚举")])]),t._v(" "),a("p",[a("em",[t._v("枚举声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("特性列表")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("访问级别修饰符")]),t._v(" 可选 "),a("a",{attrs:{href:""}},[t._v("原始值风格枚举")])]),t._v(" "),a("p",[a("em",[t._v("联合风格枚举")]),t._v(" → "),a("strong",[t._v("indirect")]),t._v("可选 "),a("strong",[t._v("enum")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("枚举名称")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("泛型形参子句")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("类型继承子句")]),t._v("可选 "),a("strong",[t._v("{")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("多个联合风格枚举成员")]),t._v("可选 "),a("strong",[t._v("}")])]),t._v(" "),a("h4",{attrs:{id:"union-style-enum-members"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#union-style-enum-members"}},[t._v("#")]),t._v(" union-style-enum-members")]),t._v(" "),a("p",[a("em",[t._v("多个联合风格枚举成员")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("联合风格枚举成员")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("多个联合风格枚举成员")]),t._v("可选")]),t._v(" "),a("h4",{attrs:{id:"union-style-enum-member"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#union-style-enum-member"}},[t._v("#")]),t._v(" union-style-enum-member")]),t._v(" "),a("p",[a("em",[t._v("联合风格枚举成员")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("声明")]),t._v(" | "),a("a",{attrs:{href:""}},[t._v("联合风格枚举用例子句")]),t._v(" | "),a("a",{attrs:{href:""}},[t._v("编译控制流语句")])]),t._v(" "),a("h4",{attrs:{id:"union-style-enum-case-clause"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#union-style-enum-case-clause"}},[t._v("#")]),t._v(" union-style-enum-case-clause")]),t._v(" "),a("p",[a("em",[t._v("联合风格枚举用例子句")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("特性列表")]),t._v("可选 "),a("strong",[t._v("indirect")]),t._v("可选 "),a("strong",[t._v("case")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("联合风格枚举用例列表")])]),t._v(" "),a("h4",{attrs:{id:"union-style-enum-case-list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#union-style-enum-case-list"}},[t._v("#")]),t._v(" union-style-enum-case-list")]),t._v(" "),a("p",[a("em",[t._v("联合风格枚举用例列表")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("联合风格枚举用例")]),t._v(" | "),a("a",{attrs:{href:""}},[t._v("联合风格枚举用例")]),t._v(" "),a("strong",[t._v(",")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("联合风格枚举用例列表")])]),t._v(" "),a("h4",{attrs:{id:"union-style-enum-case"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#union-style-enum-case"}},[t._v("#")]),t._v(" union-style-enum-case")]),t._v(" "),a("p",[a("em",[t._v("联合风格枚举用例")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("枚举用例名称")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("元组类型")]),t._v("可选")]),t._v(" "),a("h4",{attrs:{id:"enum-name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#enum-name"}},[t._v("#")]),t._v(" enum-name")]),t._v(" "),a("p",[a("em",[t._v("枚举名称")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("标识符")])]),t._v(" "),a("h4",{attrs:{id:"enum-case-name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#enum-case-name"}},[t._v("#")]),t._v(" enum-case-name")]),t._v(" "),a("p",[a("em",[t._v("枚举用例名称")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("标识符")])]),t._v(" "),a("h4",{attrs:{id:"raw-value-style-enum"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raw-value-style-enum"}},[t._v("#")]),t._v(" raw-value-style-enum")]),t._v(" "),a("p",[a("em",[t._v("原始值风格枚举")]),t._v(" → "),a("strong",[t._v("enum")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("枚举名称")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("泛型形参子句")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("类型继承子句")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("泛型 where 子句")]),t._v(" "),a("strong",[t._v("{")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("多个原始值风格枚举成员")]),t._v(" "),a("strong",[t._v("}")])]),t._v(" "),a("h4",{attrs:{id:"raw-value-style-enum-members"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raw-value-style-enum-members"}},[t._v("#")]),t._v(" raw-value-style-enum-members")]),t._v(" "),a("p",[a("em",[t._v("多个原始值风格枚举成员")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("原始值风格枚举成员")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("多个原始值风格枚举成员")]),t._v("可选")]),t._v(" "),a("h4",{attrs:{id:"raw-value-style-enum-member"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raw-value-style-enum-member"}},[t._v("#")]),t._v(" raw-value-style-enum-member")]),t._v(" "),a("p",[a("em",[t._v("原始值风格枚举成员")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("声明")]),t._v(" | "),a("a",{attrs:{href:""}},[t._v("原始值风格枚举用例子句")]),t._v(" | "),a("a",{attrs:{href:""}},[t._v("编译控制流语句")])]),t._v(" "),a("h4",{attrs:{id:"raw-value-style-enum-case-clause"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raw-value-style-enum-case-clause"}},[t._v("#")]),t._v(" raw-value-style-enum-case-clause")]),t._v(" "),a("p",[a("em",[t._v("原始值风格枚举用例子句")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("特性列表")]),t._v("可选 "),a("strong",[t._v("case")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("原始值风格枚举用例列表")])]),t._v(" "),a("h4",{attrs:{id:"raw-value-style-enum-case-list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raw-value-style-enum-case-list"}},[t._v("#")]),t._v(" raw-value-style-enum-case-list")]),t._v(" "),a("p",[a("em",[t._v("原始值风格枚举用例列表")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("原始值风格枚举用例")]),t._v(" | "),a("a",{attrs:{href:""}},[t._v("原始值风格枚举用例")]),t._v(" "),a("strong",[t._v(",")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("原始值风格枚举用例列表")])]),t._v(" "),a("h4",{attrs:{id:"raw-value-style-enum-case"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raw-value-style-enum-case"}},[t._v("#")]),t._v(" raw-value-style-enum-case")]),t._v(" "),a("p",[a("em",[t._v("原始值风格枚举用例")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("枚举用例名称")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("原始值赋值")]),t._v("可选")]),t._v(" "),a("h4",{attrs:{id:"raw-value-assignment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raw-value-assignment"}},[t._v("#")]),t._v(" raw-value-assignment")]),t._v(" "),a("p",[a("em",[t._v("原始值赋值")]),t._v(" → "),a("strong",[t._v("=")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("原始值字面量")])]),t._v(" "),a("h4",{attrs:{id:"raw-value-literal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raw-value-literal"}},[t._v("#")]),t._v(" raw-value-literal")]),t._v(" "),a("p",[a("em",[t._v("原始值字面量")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("数字型字面量")]),t._v(" | "),a("a",{attrs:{href:""}},[t._v("字符串型字面量")]),t._v(" | "),a("a",{attrs:{href:""}},[t._v("布尔型字面量")])])]),t._v(" "),a("h2",{attrs:{id:"结构体声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构体声明"}},[t._v("#")]),t._v(" 结构体声明")]),t._v(" "),a("p",[t._v("使用"),a("em",[t._v("结构体声明（structure declaration）")]),t._v(" 可以在程序中引入一个结构体类型。结构体声明使用 "),a("code",[t._v("struct")]),t._v(" 关键字，遵循如下的形式：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" 结构体名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 采纳的协议 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    多条声明\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("结构体内可包含零个或多个声明。这些声明可以包括存储型和计算型属性、类型属性、实例方法、类型方法、构造器、下标、类型别名，甚至其他结构体、类、和枚举声明。结构体声明不能包含析构器或者协议声明。关于结构体的详细讨论和示例，请参阅 "),a("a",{attrs:{href:""}},[t._v("类和结构体")]),t._v("。")]),t._v(" "),a("p",[t._v("结构体可以采纳任意数量的协议，但是不能继承自类、枚举或者其他结构体。")]),t._v(" "),a("p",[t._v("有三种方法可以创建一个已声明的结构体实例：")]),t._v(" "),a("ul",[a("li",[t._v("调用结构体内声明的构造器，正如 "),a("a",{attrs:{href:""}},[t._v("构造器")]),t._v(" 所述。")]),t._v(" "),a("li",[t._v("如果没有声明构造器，调用结构体的成员逐一构造器，正如 "),a("a",{attrs:{href:""}},[t._v("结构体类型的成员逐一构造器")]),t._v(" 所述。")]),t._v(" "),a("li",[t._v("如果没有声明构造器，而且结构体的所有属性都有初始值，调用结构体的默认构造器，正如 "),a("RouterLink",{attrs:{to:"/pages/1b072a/#默认构造器"}},[t._v("默认构造器")]),t._v(" 所述。")],1)]),t._v(" "),a("p",[t._v("结构体的构造过程请参阅 "),a("RouterLink",{attrs:{to:"/pages/1b072a/"}},[t._v("构造过程")]),t._v("。")],1),t._v(" "),a("p",[t._v("结构体实例的属性可以用点语法（"),a("code",[t._v(".")]),t._v("）来访问，正如 "),a("a",{attrs:{href:""}},[t._v("访问属性")]),t._v(" 所述。")]),t._v(" "),a("p",[t._v("结构体是值类型。结构体的实例在被赋予变量或常量，或传递给函数作为参数时会被复制。关于值类型的更多信息，请参阅 "),a("RouterLink",{attrs:{to:"/pages/0641bb/#结构体和枚举是值类型"}},[t._v("结构体和枚举是值类型")]),t._v("。")],1),t._v(" "),a("p",[t._v("可以使用扩展声明来扩展结构体类型的行为，请参阅 "),a("a",{attrs:{href:""}},[t._v("扩展声明")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"grammer-of-a-structure-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grammer-of-a-structure-declaration"}},[t._v("#")]),t._v(" grammer-of-a-structure-declaration")]),t._v(" "),a("blockquote",[a("p",[t._v("结构体声明语法")]),t._v(" "),a("h4",{attrs:{id:"struct-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#struct-declaration"}},[t._v("#")]),t._v(" struct-declaration")]),t._v(" "),a("p",[a("em",[t._v("结构体声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("特性列表")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("访问级别修饰符")]),t._v(" 可选 "),a("strong",[t._v("struct")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("结构体名称")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("泛型形参子句")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("类型继承子句")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("泛型 where 子句")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("结构体主体")])]),t._v(" "),a("h4",{attrs:{id:"struct-name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#struct-name"}},[t._v("#")]),t._v(" struct-name")]),t._v(" "),a("p",[a("em",[t._v("结构体名称")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("标识符")])]),t._v(" "),a("h4",{attrs:{id:"struct-body"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#struct-body"}},[t._v("#")]),t._v(" struct-body")]),t._v(" "),a("p",[a("em",[t._v("结构体主体")]),t._v(" → "),a("strong",[t._v("{")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("多条声明")]),t._v("可选 "),a("strong",[t._v("}")])]),t._v(" "),a("h4",{attrs:{id:"struct-name-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#struct-name-2"}},[t._v("#")]),t._v(" struct-name")]),t._v(" "),a("p",[a("em",[t._v("结构体多个成员")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("结构体成员")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("结构体多个成员")]),t._v("可选")]),t._v(" "),a("h4",{attrs:{id:"struct-member"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#struct-member"}},[t._v("#")]),t._v(" struct-member")]),t._v(" "),a("p",[a("em",[t._v("结构体成员")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("声明")]),t._v(" | "),a("a",{attrs:{href:""}},[t._v("编译控制流语句")])])]),t._v(" "),a("h2",{attrs:{id:"类声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类声明"}},[t._v("#")]),t._v(" 类声明")]),t._v(" "),a("p",[t._v("可以在程序中使用"),a("em",[t._v("类声明（class declaration）")]),t._v(" 来引入一个类。类声明使用关键字 "),a("code",[t._v("class")]),t._v("，遵循如下的形式：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" 类名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 超类"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 采纳的协议 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    多条声明\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("类内可以包含零个或多个声明。这些声明可以包括存储型和计算型属性、实例方法、类型方法、构造器、唯一的析构器、下标、类型别名，甚至其他结构体、类和枚举声明。类声明不能包含协议声明。关于类的详细讨论和示例，请参阅 "),a("a",{attrs:{href:""}},[t._v("类和结构体")]),t._v("。")]),t._v(" "),a("p",[t._v("一个类只能继承自一个超类，但是可以采纳任意数量的协议。超类紧跟在类名和冒号后面，其后跟着采纳的协议。泛型类可以继承自其它泛型类和非泛型类，但是非泛型类只能继承自其它非泛型类。当在冒号后面写泛型超类的名称时，必须写上泛型类的全名，包括它的泛型形参子句。")]),t._v(" "),a("p",[t._v("正如 "),a("a",{attrs:{href:""}},[t._v("构造器声明")]),t._v(" 所讨论的，类可以有指定构造器和便利构造器。类的指定构造器必须初始化类中声明的所有属性，并且必须在调用超类构造器之前。")]),t._v(" "),a("p",[t._v("类可以重写属性、方法、下标以及构造器。重写的属性、方法、下标和指定构造器必须以 "),a("code",[t._v("override")]),t._v(" 声明修饰符标记。")]),t._v(" "),a("p",[t._v("为了要求子类去实现超类的构造器，使用 "),a("code",[t._v("required")]),t._v(" 声明修饰符标记超类的构造器。子类实现超类构造器时也必须使用 "),a("code",[t._v("required")]),t._v(" 声明修饰符。")]),t._v(" "),a("p",[t._v("虽然超类属性和方法声明可以被当前类继承，但是超类声明的指定构造器却不能。即便如此，如果当前类重写了超类的所有指定构造器，它就会继承超类的所有便利构造器。Swift 的类并不继承自一个通用基础类。")]),t._v(" "),a("p",[t._v("有两种方法来创建已声明的类的实例：")]),t._v(" "),a("ul",[a("li",[t._v("调用类中声明的构造器，请参阅 "),a("a",{attrs:{href:""}},[t._v("构造器")]),t._v("。")]),t._v(" "),a("li",[t._v("如果没有声明构造器，而且类的所有属性都被赋予了初始值，调用类的默认构造器，请参阅 "),a("RouterLink",{attrs:{to:"/pages/1b072a/#默认构造器"}},[t._v("默认构造器")]),t._v("。")],1)]),t._v(" "),a("p",[t._v("类实例属性可以用点语法（"),a("code",[t._v(".")]),t._v("）来访问，请参阅 "),a("a",{attrs:{href:""}},[t._v("访问属性")]),t._v("。")]),t._v(" "),a("p",[t._v("类是引用类型。当被赋予常量或变量，或者传递给函数作为参数时，类的实例会被引用，而不是被复制。关于引用类型的更多信息，请参阅 "),a("RouterLink",{attrs:{to:"/pages/0641bb/#结构体和枚举是值类型"}},[t._v("结构体和枚举是值类型")]),t._v("。")],1),t._v(" "),a("p",[t._v("可以使用扩展声明来扩展类的行为，请参阅 "),a("a",{attrs:{href:""}},[t._v("扩展声明")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"grammer-of-a-class-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grammer-of-a-class-declaration"}},[t._v("#")]),t._v(" grammer-of-a-class-declaration")]),t._v(" "),a("blockquote",[a("p",[t._v("类声明语法")]),t._v(" "),a("h4",{attrs:{id:"class-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-declaration"}},[t._v("#")]),t._v(" class-declaration")]),t._v(" "),a("p",[a("em",[t._v("类声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("特性列表")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("访问级别修饰符")]),t._v("可选 "),a("strong",[t._v("final")]),t._v("可选 "),a("strong",[t._v("class")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("类名")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("泛型形参子句")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("类型继承子句")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("泛型 where 子句")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("类主体")])]),t._v(" "),a("p",[a("em",[t._v("类声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("特性列表")]),t._v("可选 "),a("strong",[t._v("final")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("访问级别修饰符")]),t._v("可选 "),a("strong",[t._v("class")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("类名")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("泛型形参子句")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("类型继承子句")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("泛型 where 子句")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("类主体")])]),t._v(" "),a("h4",{attrs:{id:"class-name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-name"}},[t._v("#")]),t._v(" class-name")]),t._v(" "),a("p",[a("em",[t._v("类名")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("标识符")])]),t._v(" "),a("h4",{attrs:{id:"class-body"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-body"}},[t._v("#")]),t._v(" class-body")]),t._v(" "),a("p",[a("em",[t._v("类主体")]),t._v(" → "),a("strong",[t._v("{")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("多条声明")]),t._v("可选 "),a("strong",[t._v("}")])]),t._v(" "),a("p",[a("em",[t._v("类多个成员")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("类成员")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("类多个成员")]),t._v("可选")]),t._v(" "),a("h4",{attrs:{id:"class-member"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-member"}},[t._v("#")]),t._v(" class-member")]),t._v(" "),a("p",[a("em",[t._v("类成员")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("声明")]),t._v(" | "),a("a",{attrs:{href:""}},[t._v("编译控制流语句")])])]),t._v(" "),a("h2",{attrs:{id:"协议声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协议声明"}},[t._v("#")]),t._v(" 协议声明")]),t._v(" "),a("p",[a("em",[t._v("协议声明（protocol declaration）")]),t._v(" 可以为程序引入一个命名的协议类型。协议声明只能在全局区域使用 "),a("code",[t._v("protocol")]),t._v(" 关键字来进行声明，并遵循如下形式：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protocol")]),t._v(" 协议名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 继承的协议 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    协议成员声明\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("协议的主体包含零个或多个协议成员声明，这些成员描述了任何采纳该协议的类型必须满足的一致性要求。一个协议可以声明采纳者必须实现的某些属性、方法、构造器以及下标。协议也可以声明各种各样的类型别名，叫做关联类型，它可以指定协议的不同声明之间的关系。协议声明不能包括类、结构体、枚举或者其它协议的声明。协议成员声明会在后面进行讨论。")]),t._v(" "),a("p",[t._v("协议类型可以继承自任意数量的其它协议。当一个协议类型继承自其它协议的时候，来自其它协议的所有要求会聚合在一起，而且采纳当前协议的类型必须符合所有的这些要求。关于如何使用协议继承的例子，请参阅 "),a("a",{attrs:{href:""}},[t._v("协议继承")]),t._v("。")]),t._v(" "),a("blockquote",[a("p",[t._v("注意")]),t._v(" "),a("p",[t._v("也可以使用协议合成类型来聚合多个协议的一致性要求，请参阅 "),a("a",{attrs:{href:""}},[t._v("协议合成类型")]),t._v(" 和 [协议合成](https://github.com/SwiftGGTeam/the-swift-programming-language-in-chinese/tree/83500eba22fa5e8e285debcc23cb6fd6b47fbdf1/source/02_language_guide/21 _Protocols.md#protocol-composition)。")])]),t._v(" "),a("p",[t._v("可以通过类型的扩展声明来采纳协议，从而为之前声明的类型添加协议一致性。在扩展中，必须实现所有采纳协议的要求。如果该类型已经实现了所有的要求，可以让这个扩展声明的主体留空。")]),t._v(" "),a("p",[t._v("默认地，符合某个协议的类型必须实现所有在协议中声明的属性、方法和下标。即便如此，可以用 "),a("code",[t._v("optional")]),t._v(" 声明修饰符标注协议成员声明，以指定它们的实现是可选的。"),a("code",[t._v("optional")]),t._v(" 修饰符仅仅可以用于使用 "),a("code",[t._v("objc")]),t._v(" 特性标记过的协议。因此，仅仅类类型可以采用并符合包含可选成员要求的协议。更多关于如何使用 "),a("code",[t._v("optional")]),t._v(" 声明修饰符的信息，以及如何访问可选协议成员的指导——例如不能确定采纳协议的类型是否实现了它们时——请参阅 "),a("a",{attrs:{href:""}},[t._v("可选协议要求")]),t._v("。")]),t._v(" "),a("p",[t._v("为了限制协议只能被类类型采纳，需要使用 "),a("code",[t._v("AnyObject")]),t._v(" 关键字来标记协议，将 "),a("code",[t._v("AnyObject")]),t._v(" 关键在写在冒号后面的继承的协议列表的首位。例如，下面的协议只能被类类型采纳：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protocol")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SomeProtocol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AnyObject")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 这里是协议成员 */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("任何继承自标记有 "),a("code",[t._v("AnyObject")]),t._v(" 关键字的协议的协议也仅能被类类型采纳。")]),t._v(" "),a("blockquote",[a("p",[t._v("注意")]),t._v(" "),a("p",[t._v("如果协议已经用 "),a("code",[t._v("objc")]),t._v(" 特性标记了，"),a("code",[t._v("AnyObject")]),t._v(" 要求就隐式地应用于该协议，无需显式使用 "),a("code",[t._v("AnyObject")]),t._v(" 关键字。")])]),t._v(" "),a("p",[t._v("协议类型是命名的类型，因此它们可以像其他命名类型一样使用，正如 "),a("a",{attrs:{href:""}},[t._v("协议作为类型")]),t._v(" 所讨论的。然而，不能构造一个协议的实例，因为协议实际上不提供它们指定的要求的实现。")]),t._v(" "),a("p",[t._v("可以使用协议来声明作为代理的类或者结构体应该实现的方法，正如 "),a("a",{attrs:{href:""}},[t._v("委托（代理）模式")]),t._v(" 中所述。")]),t._v(" "),a("h4",{attrs:{id:"grammer-of-a-protocol-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grammer-of-a-protocol-declaration"}},[t._v("#")]),t._v(" grammer-of-a-protocol-declaration")]),t._v(" "),a("blockquote",[a("p",[t._v("协议声明语法")]),t._v(" "),a("h4",{attrs:{id:"protocol-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#protocol-declaration"}},[t._v("#")]),t._v(" protocol-declaration")]),t._v(" "),a("p",[a("em",[t._v("协议声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("特性列表")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("访问级别修饰符")]),t._v("可选 "),a("strong",[t._v("protocol")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("协议名称")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("类型继承子句")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("泛型 where 子句")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("协议主体")])]),t._v(" "),a("h4",{attrs:{id:"protocol-name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#protocol-name"}},[t._v("#")]),t._v(" protocol-name")]),t._v(" "),a("p",[a("em",[t._v("协议名称")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("标识符")])]),t._v(" "),a("h4",{attrs:{id:"protocol-body"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#protocol-body"}},[t._v("#")]),t._v(" protocol-body")]),t._v(" "),a("p",[a("em",[t._v("协议主体")]),t._v(" → "),a("strong",[t._v("{")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("协议成员声明列表")]),t._v("可选 "),a("strong",[t._v("}")])]),t._v(" "),a("p",[a("em",[t._v("协议多个成员")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("协议成员")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("协议多个成员")]),t._v("可选")]),t._v(" "),a("h4",{attrs:{id:"protocol-member"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#protocol-member"}},[t._v("#")]),t._v(" protocol-member")]),t._v(" "),a("p",[a("em",[t._v("协议成员")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("协议成员声明")]),t._v(" | "),a("a",{attrs:{href:""}},[t._v("编译控制流语句")])]),t._v(" "),a("h4",{attrs:{id:"protocol-member-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#protocol-member-declaration"}},[t._v("#")]),t._v(" protocol-member-declaration")]),t._v(" "),a("p",[a("em",[t._v("协议成员声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("协议属性声明")])]),t._v(" "),a("p",[a("em",[t._v("协议成员声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("协议方法声明")])]),t._v(" "),a("p",[a("em",[t._v("协议成员声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("协议构造器声明")])]),t._v(" "),a("p",[a("em",[t._v("协议成员声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("协议下标声明")])]),t._v(" "),a("p",[a("em",[t._v("协议成员声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("协议关联类型声明")])]),t._v(" "),a("h4",{attrs:{id:"protocol-member-declarations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#protocol-member-declarations"}},[t._v("#")]),t._v(" protocol-member-declarations")]),t._v(" "),a("p",[a("em",[t._v("协议成员声明列表")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("协议成员声明")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("协议成员声明列表")]),t._v("可选")])]),t._v(" "),a("h3",{attrs:{id:"协议属性声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协议属性声明"}},[t._v("#")]),t._v(" 协议属性声明")]),t._v(" "),a("p",[t._v("协议可以通过在协议声明主体中引入一个协议属性声明，来声明符合的类型必须实现的属性。协议属性声明有一种特殊的变量声明形式：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" 属性名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 类型 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("同其它协议成员声明一样，这些属性声明仅仅针对符合该协议的类型声明了 getter 和 setter 要求，你不能在协议中直接实现 getter 和 setter。")]),t._v(" "),a("p",[t._v("符合类型可以通过多种方式满足 getter 和 setter 要求。如果属性声明包含 "),a("code",[t._v("get")]),t._v(" 和 "),a("code",[t._v("set")]),t._v(" 关键字，符合类型就可以用存储型变量属性或可读可写的计算型属性来满足此要求，但是属性不能以常量属性或只读计算型属性实现。如果属性声明仅仅包含 "),a("code",[t._v("get")]),t._v(" 关键字的话，它可以作为任意类型的属性被实现。关于如何实现协议中的属性要求的例子，请参阅 "),a("a",{attrs:{href:""}},[t._v("属性要求")]),t._v(" 。")]),t._v(" "),a("p",[t._v("协议声明中声明一个类型属性，属性声明语句必须用 "),a("code",[t._v("static")]),t._v(" 声明修饰符。当结构体和枚举遵循该协议时，使用 "),a("code",[t._v("static")]),t._v(" 关键字修饰，而类遵循该协议时，使用 "),a("code",[t._v("static")]),t._v(" 或 "),a("code",[t._v("class")]),t._v(" 关键字皆可。当结构体，枚举或类添加扩展遵循协议时，和之前扩展用到的关键字保持一致。扩展为类属性提供默认实现时，必须使用 "),a("code",[t._v("static")]),t._v(" 关键字修饰。")]),t._v(" "),a("p",[t._v("另请参阅 "),a("a",{attrs:{href:""}},[t._v("变量声明")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"grammer-of-an-import-declaration-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grammer-of-an-import-declaration-2"}},[t._v("#")]),t._v(" grammer-of-an-import-declaration")]),t._v(" "),a("blockquote",[a("p",[t._v("协议属性声明语法")]),t._v(" "),a("h4",{attrs:{id:"protocol-property-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#protocol-property-declaration"}},[t._v("#")]),t._v(" protocol-property-declaration")]),t._v(" "),a("p",[a("em",[t._v("协议属性声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("变量声明头")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("变量名称")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("类型注解")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("getter-setter 关键字代码块")])])]),t._v(" "),a("h3",{attrs:{id:"协议方法声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协议方法声明"}},[t._v("#")]),t._v(" 协议方法声明")]),t._v(" "),a("p",[t._v("协议可以通过在协议声明主体中引入一个协议方法声明，来声明符合的类型必须实现的方法。协议方法声明和函数方法声明有着相同的形式，但有两项例外：它们不包括函数体，也不能包含默认参数。关于如何实现协议中的方法要求的例子，请参阅 "),a("a",{attrs:{href:""}},[t._v("方法要求")]),t._v("。")]),t._v(" "),a("p",[t._v("协议声明中声明一个类型方法，方法声明语句必须用 "),a("code",[t._v("static")]),t._v(" 声明修饰符。结构体和枚举遵循协议时，必须使用 "),a("code",[t._v("static")]),t._v(" 关键字修饰，而类遵循协议时，使用 "),a("code",[t._v("static")]),t._v(" 或 "),a("code",[t._v("class")]),t._v(" 关键字皆可。当结构体，枚举或类添加扩展遵循协议时，和之前扩展用到的关键字保持一致。扩展为类方法提供默认实现时，必须使用 "),a("code",[t._v("static")]),t._v(" 关键字修饰。")]),t._v(" "),a("p",[t._v("另请参阅 "),a("a",{attrs:{href:""}},[t._v("函数声明")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"grammer-of-a-protocol-declaration-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grammer-of-a-protocol-declaration-2"}},[t._v("#")]),t._v(" grammer-of-a-protocol-declaration")]),t._v(" "),a("blockquote",[a("p",[t._v("协议方法声明语法")]),t._v(" "),a("h4",{attrs:{id:"protocol-method-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#protocol-method-declaration"}},[t._v("#")]),t._v(" protocol-method-declaration")]),t._v(" "),a("p",[a("em",[t._v("协议方法声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("函数头")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("函数名")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("泛型形参子句")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("函数签名")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("泛型 where 子句")]),t._v("可选")])]),t._v(" "),a("h3",{attrs:{id:"协议构造器声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协议构造器声明"}},[t._v("#")]),t._v(" 协议构造器声明")]),t._v(" "),a("p",[t._v("协议可以通过在协议声明主体中引入一个协议构造器声明，来声明符合的类型必须实现的构造器。协议构造器声明 除了不包含实现主体外，和构造器声明有着相同的形式。")]),t._v(" "),a("p",[t._v("符合类型可以通过实现一个非可失败构造器或者 "),a("code",[t._v("init!")]),t._v(" 可失败构造器来满足一个非可失败协议构造器的要求，可以通过实现任意类型的构造器来满足一个可失败协议构造器的要求。")]),t._v(" "),a("p",[t._v("类在实现一个构造器去满足一个协议的构造器要求时，如果这个类还没有用 "),a("code",[t._v("final")]),t._v(" 声明修饰符标记，这个构造器必须用 "),a("code",[t._v("required")]),t._v(" 声明修饰符标记。")]),t._v(" "),a("p",[t._v("另请参阅 "),a("a",{attrs:{href:""}},[t._v("构造器声明")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"grammer-of-a-protocol-initializer-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grammer-of-a-protocol-initializer-declaration"}},[t._v("#")]),t._v(" grammer-of-a-protocol-initializer-declaration")]),t._v(" "),a("blockquote",[a("p",[t._v("协议构造器声明语法")]),t._v(" "),a("h4",{attrs:{id:"protocol-initializer-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#protocol-initializer-declaration"}},[t._v("#")]),t._v(" protocol-initializer-declaration")]),t._v(" "),a("p",[a("em",[t._v("协议构造器声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("构造器头")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("泛型形参子句")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("参数子句")]),t._v(" "),a("strong",[t._v("throws")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("泛型 where 子句")]),t._v("可选")]),t._v(" "),a("p",[a("em",[t._v("协议构造器声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("构造器头")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("泛型形参子句")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("参数子句")]),t._v(" "),a("strong",[t._v("rethrows")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("泛型 where 子句")]),t._v("可选")])]),t._v(" "),a("h3",{attrs:{id:"协议下标声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协议下标声明"}},[t._v("#")]),t._v(" 协议下标声明")]),t._v(" "),a("p",[t._v("协议可以通过在协议声明主体中引入一个协议下标声明，来声明符合的类型必须实现的下标。协议下标声明有一个特殊的下标声明形式：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("subscript")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("参数列表"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" 返回类型 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("下标声明只为符合类型声明了 getter 和 setter 要求。如果下标声明包含 "),a("code",[t._v("get")]),t._v(" 和 "),a("code",[t._v("set")]),t._v(" 关键字，符合类型也必须实现 getter 和 setter 子句。如果下标声明只包含 "),a("code",[t._v("get")]),t._v(" 关键字，符合类型必须实现 getter 子句，可以选择是否实现 setter 子句。")]),t._v(" "),a("p",[t._v("协议声明中声明一个静态下标，下标声明语句必须用 "),a("code",[t._v("static")]),t._v(" 声明修饰符。当结构体和枚举遵循该协议时，下标声明使用 "),a("code",[t._v("static")]),t._v(" 关键字修饰，而类遵循该协议时，使用 "),a("code",[t._v("static")]),t._v(" 或 "),a("code",[t._v("class")]),t._v(" 关键字皆可。当结构体，枚举或类添加扩展遵循协议时，和之前扩展用到的关键字保持一致。扩展为下标声明提供默认实现时，必须使用 "),a("code",[t._v("static")]),t._v(" 关键字修饰。")]),t._v(" "),a("p",[t._v("另请参阅 "),a("a",{attrs:{href:""}},[t._v("下标声明")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"grammer-of-a-protocol-subscript-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grammer-of-a-protocol-subscript-declaration"}},[t._v("#")]),t._v(" grammer-of-a-protocol-subscript-declaration")]),t._v(" "),a("blockquote",[a("p",[t._v("协议下标声明语法")]),t._v(" "),a("h4",{attrs:{id:"protocol-subscript-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#protocol-subscript-declaration"}},[t._v("#")]),t._v(" protocol-subscript-declaration")]),t._v(" "),a("p",[a("em",[t._v("协议下标声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("下标头")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("下标结果")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("泛型 where 子句")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("getter-setter 关键字代码块")])])]),t._v(" "),a("h3",{attrs:{id:"协议关联类型声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协议关联类型声明"}},[t._v("#")]),t._v(" 协议关联类型声明")]),t._v(" "),a("p",[t._v("使用关键字 "),a("code",[t._v("associatedtype")]),t._v(" 来声明协议关联类型。关联类型为作为协议声明的一部分，为某种类型提供了一个别名。关联类型和泛型参数子句中的类型参数很相似，但是它们和 "),a("code",[t._v("Self")]),t._v(" 一样，用于协议中。"),a("code",[t._v("Self")]),t._v(" 指代采纳协议的类型。要获得更多信息和例子，请参阅 "),a("a",{attrs:{href:""}},[t._v("关联类型")]),t._v("。")]),t._v(" "),a("p",[t._v("在协议声明中使用泛型 "),a("code",[t._v("where")]),t._v(" 子句来为继承的协议关联类型添加约束，且不需要重新声明关联类型。例如下面代码中的 "),a("code",[t._v("SubProtocol")]),t._v(" 声明。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protocol")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SomeProtocol")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("associatedtype")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SomeType")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protocol")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SubProtocolA")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SomeProtocol")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此类语法会引发警告。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("associatedtype")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SomeType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Equatable")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 建议使用此语法。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protocol")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SubProtocolB")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SomeProtocol")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SomeType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Equatable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("p",[t._v("另请参阅 "),a("a",{attrs:{href:""}},[t._v("类型别名声明")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"grammer-of-a-protocol-associated-type-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grammer-of-a-protocol-associated-type-declaration"}},[t._v("#")]),t._v(" grammer-of-a-protocol-associated-type-declaration")]),t._v(" "),a("blockquote",[a("p",[t._v("协议关联类型声明语法")]),t._v(" "),a("h4",{attrs:{id:"protocol-associated-type-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#protocol-associated-type-declaration"}},[t._v("#")]),t._v(" protocol-associated-type-declaration")]),t._v(" "),a("p",[a("em",[t._v("协议关联类型声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("特性列表")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("访问级别修饰符")]),t._v("可选 "),a("strong",[t._v("associatedtype")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("类型别名头")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("类型继承子句")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("类型别名赋值")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("泛型 where 子句")]),t._v("可选")])]),t._v(" "),a("h2",{attrs:{id:"构造器声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造器声明"}},[t._v("#")]),t._v(" 构造器声明")]),t._v(" "),a("p",[t._v("构造器声明会为程序中的类、结构体或枚举引入构造器。构造器使用关键字 "),a("code",[t._v("init")]),t._v(" 来声明，有两种基本形式。")]),t._v(" "),a("p",[t._v("结构体、枚举、类可以有任意数量的构造器，但是类的构造器具有不同的规则和行为。不同于结构体和枚举，类有两种构造器，即指定构造器和便利构造器，请参阅 "),a("RouterLink",{attrs:{to:"/pages/1b072a/"}},[t._v("构造过程")]),t._v("。")],1),t._v(" "),a("p",[t._v("采用如下形式声明结构体和枚举的构造器，以及类的指定构造器：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("参数列表"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    构造语句\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("类的指定构造器直接将类的所有属性初始化。它不能调用类中的其他构造器，如果类有超类，则必须调用超类的一个指定构造器。如果该类从它的超类继承了属性，必须在调用超类的指定构造器后才能修改这些属性。")]),t._v(" "),a("p",[t._v("指定构造器只能在类声明中声明，不能在扩展声明中声明。")]),t._v(" "),a("p",[t._v("结构体和枚举的构造器可以调用其他已声明的构造器，从而委托其他构造器来进行部分或者全部构造过程。")]),t._v(" "),a("p",[t._v("要为类声明一个便利构造器，用 "),a("code",[t._v("convenience")]),t._v(" 声明修饰符来标记构造器声明：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("convenience")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("参数列表"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    构造语句\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("便利构造器可以将构造过程委托给另一个便利构造器或一个指定构造器。但是，类的构造过程必须以一个将类中所有属性完全初始化的指定构造器的调用作为结束。便利构造器不能调用超类的构造器。")]),t._v(" "),a("p",[t._v("可以使用 "),a("code",[t._v("required")]),t._v(" 声明修饰符，将便利构造器和指定构造器标记为每个子类都必须实现的构造器。这种构造器的子类实现也必须使用 "),a("code",[t._v("required")]),t._v(" 声明修饰符标记。")]),t._v(" "),a("p",[t._v("默认情况下，超类中的构造器不会被子类继承。但是，如果子类的所有存储型属性都有默认值，而且子类自身没有定义任何构造器，它将继承超类的构造器。如果子类重写了超类的所有指定构造器，子类将继承超类的所有便利构造器。")]),t._v(" "),a("p",[t._v("和方法、属性和下标一样，需要使用 "),a("code",[t._v("override")]),t._v(" 声明修饰符标记重写的指定构造器。")]),t._v(" "),a("blockquote",[a("p",[t._v("注意")]),t._v(" "),a("p",[t._v("如果使用 "),a("code",[t._v("required")]),t._v(" 声明修饰符标记一个构造器，在子类中重写这种构造器时，无需使用 "),a("code",[t._v("override")]),t._v(" 修饰符。")])]),t._v(" "),a("p",[t._v("就像函数和方法，构造器也可以抛出或者重抛错误，你可以在构造器参数列表的圆括号之后使用 "),a("code",[t._v("throws")]),t._v(" 或 "),a("code",[t._v("rethrows")]),t._v(" 关键字来表明相应的抛出行为。")]),t._v(" "),a("p",[t._v("关于在不同类型中声明构造器的例子，请参阅 "),a("RouterLink",{attrs:{to:"/pages/1b072a/"}},[t._v("构造过程")]),t._v("。")],1),t._v(" "),a("h3",{attrs:{id:"可失败构造器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可失败构造器"}},[t._v("#")]),t._v(" 可失败构造器")]),t._v(" "),a("p",[t._v("可失败构造器可以生成所属类型的可选实例或者隐式解包可选实例，因此，这种构造器通过返回 "),a("code",[t._v("nil")]),t._v(" 来指明构造过程失败。")]),t._v(" "),a("p",[t._v("声明生成可选实例的可失败构造器时，在构造器声明的 "),a("code",[t._v("init")]),t._v(" 关键字后加追加一个问号（"),a("code",[t._v("init?")]),t._v("）。声明生成隐式解包可选实例的可失败构造器时，在构造器声明后追加一个叹号（"),a("code",[t._v("init!")]),t._v("）。使用 "),a("code",[t._v("init?")]),t._v(" 可失败构造器生成结构体的一个可选实例的例子如下。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SomeStruct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//生成一个 SomeStruct 的可选实例")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("init")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" input"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isEmpty "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 丢弃 self，并返回 nil")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token nil constant"}},[t._v("nil")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        string "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" input\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("p",[t._v("调用 "),a("code",[t._v("init?")]),t._v(" 可失败构造器和调用非可失败构造器的方式相同，不过你需要处理可选类型的返回值。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" actualInstance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SomeStruct")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 利用 SomeStruct 实例做些事情")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// SomeStruct 实例的构造过程失败，构造器返回了 nil")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("可失败构造器可以在构造器实现中的任意位置返回 "),a("code",[t._v("nil")]),t._v("。")]),t._v(" "),a("p",[t._v("可失败构造器可以委托任意种类的构造器。非可失败可以委托其它非可失败构造器或者 "),a("code",[t._v("init!")]),t._v(" 可失败构造器。非可失败构造器可以委托超类的 "),a("code",[t._v("init?")]),t._v(" 可失败指定构造器，但是需要使用强制解包，例如 "),a("code",[t._v("super.init()!")]),t._v("。")]),t._v(" "),a("p",[t._v("构造过程失败通过构造器委托来传递。具体来说，如果可失败构造器委托的可失败构造器构造过程失败并返回 "),a("code",[t._v("nil")]),t._v("，那么该可失败构造器也会构造失败并隐式地返回 "),a("code",[t._v("nil")]),t._v("。如果非可失败构造器委托的 "),a("code",[t._v("init!")]),t._v(" 可失败构造器构造失败并返回了 "),a("code",[t._v("nil")]),t._v("，那么会发生运行时错误（如同使用 "),a("code",[t._v("!")]),t._v(" 操作符去强制解包一个值为 "),a("code",[t._v("nil")]),t._v(" 的可选值）。")]),t._v(" "),a("p",[t._v("子类可以用任意种类的指定构造器重写超类的可失败指定构造器，但是只能用非可失败指定构造器重写超类的非可失败指定构造器。")]),t._v(" "),a("p",[t._v("更多关于可失败构造器的信息和例子，请参阅 "),a("RouterLink",{attrs:{to:"/pages/1b072a/#可失败构造器"}},[t._v("可失败构造器")]),t._v("。")],1),t._v(" "),a("h4",{attrs:{id:"grammer-of-an-initializer-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grammer-of-an-initializer-declaration"}},[t._v("#")]),t._v(" grammer-of-an-initializer-declaration")]),t._v(" "),a("blockquote",[a("p",[t._v("构造器声明语法")]),t._v(" "),a("h4",{attrs:{id:"initializer-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initializer-declaration"}},[t._v("#")]),t._v(" initializer-declaration")]),t._v(" "),a("p",[a("em",[t._v("构造器声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("构造器头")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("泛型形参子句")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("参数子句")]),t._v(" "),a("strong",[t._v("throws")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("泛型 where 子句")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("构造器主体")])]),t._v(" "),a("p",[a("em",[t._v("构造器声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("构造器头")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("泛型形参子句")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("参数子句")]),t._v(" "),a("strong",[t._v("rethrows")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("泛型 where 子句")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("构造器主体")])]),t._v(" "),a("h4",{attrs:{id:"initializer-head"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initializer-head"}},[t._v("#")]),t._v(" initializer-head")]),t._v(" "),a("p",[a("em",[t._v("构造器头")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("特性列表")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("声明修饰符列表")]),t._v("可选 "),a("strong",[t._v("init")])]),t._v(" "),a("p",[a("em",[t._v("构造器头")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("特性列表")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("声明修饰符列表")]),t._v("可选 "),a("strong",[t._v("init")]),t._v(" "),a("strong",[t._v("?")])]),t._v(" "),a("p",[a("em",[t._v("构造器头")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("特性列表")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("声明修饰符列表")]),t._v("可选 "),a("strong",[t._v("init")]),t._v(" "),a("strong",[t._v("!")])]),t._v(" "),a("h4",{attrs:{id:"initializer-body"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initializer-body"}},[t._v("#")]),t._v(" initializer-body")]),t._v(" "),a("p",[a("em",[t._v("构造器主体")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("代码块")])])]),t._v(" "),a("h2",{attrs:{id:"析构器声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#析构器声明"}},[t._v("#")]),t._v(" 析构器声明")]),t._v(" "),a("p",[a("em",[t._v("析构器声明（deinitializer declaration）")]),t._v(" 可以为类声明一个析构器。析构器没有参数，遵循如下格式：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("deinit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    语句\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("当没有任何强引用引用着类的对象，对象即将被释放时，析构器会被自动调用。析构器只能在类主体的声明中声明，不能在类的扩展声明中声明，并且每个类最多只能有一个析构器。")]),t._v(" "),a("p",[t._v("子类会继承超类的析构器，并会在子类对象将要被释放时隐式调用。继承链上的所有析构器全部调用完毕后子类对象才会被释放。")]),t._v(" "),a("p",[t._v("析构器不能直接调用。")]),t._v(" "),a("p",[t._v("关于如何在类声明中使用析构器的例子，请参阅 "),a("RouterLink",{attrs:{to:"/pages/c40911/"}},[t._v("析构过程")]),t._v("。")],1),t._v(" "),a("h4",{attrs:{id:"grammer-of-a-deinitializer-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grammer-of-a-deinitializer-declaration"}},[t._v("#")]),t._v(" grammer-of-a-deinitializer-declaration")]),t._v(" "),a("blockquote",[a("p",[t._v("析构器声明语法")]),t._v(" "),a("h4",{attrs:{id:"deinitializer-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deinitializer-declaration"}},[t._v("#")]),t._v(" deinitializer-declaration")]),t._v(" "),a("p",[a("em",[t._v("析构器声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("特性列表")]),t._v("可选 "),a("strong",[t._v("deinit")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("代码块")])])]),t._v(" "),a("h2",{attrs:{id:"扩展声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩展声明"}},[t._v("#")]),t._v(" 扩展声明")]),t._v(" "),a("p",[a("em",[t._v("扩展声明（extension declaration）")]),t._v(" 可以扩展一个现存的类型的行为。扩展声明使用关键字 "),a("code",[t._v("extension")]),t._v("，遵循如下格式：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extension")]),t._v(" 类型名称 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" 要求 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    声明语句\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("扩展声明体可包含零个或多个声明语句。这些声明语句可以包括计算型属性、计算型类型属性、实例方法、类型方法、构造器、下标声明，甚至是类、结构体和枚举声明。扩展声明不能包含析构器、协议声明、存储型属性、属性观察器或其他扩展声明。关于扩展声明的详细讨论，以及各种扩展声明的例子，请参阅 "),a("RouterLink",{attrs:{to:"/pages/297d1c/"}},[t._v("扩展")]),t._v("。")],1),t._v(" "),a("p",[t._v("如果类型为类，结构体，或枚举类型，则扩展声明会扩展相应的类型。如果类型为协议类型，则扩展声明会扩展所有遵守这个协议的类型。在扩展的协议体中声明语句不能使用 "),a("code",[t._v("final")]),t._v(" 标识符。")]),t._v(" "),a("p",[t._v("扩展声明可以为现存的类、结构体、枚举添加协议一致性，但是不能为类添加超类，因此在扩展声明的类型名称的冒号后面仅能指定一个协议列表。")]),t._v(" "),a("p",[t._v("扩展声明可以包含构造器声明。这意味着，如果被扩展的类型在其他模块中定义，构造器声明必须委托另一个在那个模块中声明的构造器，以确保该类型能被正确地初始化。")]),t._v(" "),a("p",[t._v("现存类型的属性、方法、构造器不能在扩展中被重写。")]),t._v(" "),a("p",[t._v("通过指定采纳的协议，扩展声明可以为一个现有的类、结构体或者枚举类型添加协议遵循：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extension")]),t._v(" 类型名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 采纳的协议 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" 约束条件 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    多条声明\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("协议声明不能为现有的类添加类的继承关系，因此你只能在 “类型名称” 的冒号后面添加一系列协议。")]),t._v(" "),a("h3",{attrs:{id:"条件遵循"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#条件遵循"}},[t._v("#")]),t._v(" 条件遵循")]),t._v(" "),a("p",[t._v("你可以扩展一个泛型类型并使其有条件地遵循某协议，此后此类型的实例只有在特定的限制条件满足时才遵循此协议。在扩展声明中加入限制条件来为协议添加条件遵循。")]),t._v(" "),a("h2",{attrs:{id:"已重写的限制条件会在某些泛型上下文中失效"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#已重写的限制条件会在某些泛型上下文中失效"}},[t._v("#")]),t._v(" 已重写的限制条件会在某些泛型上下文中失效")]),t._v(" "),a("p",[t._v("对于一些通过条件遵循获得了特定行为的类型，在某些泛型上下文中，并不能够确保能够使用协议限制中的特定实现。为了说明这个行为，下面的例子中定义了两个协议以及一个有条件地遵循两个协议的泛型类型。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protocol")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Loggable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extension")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Loggable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protocol")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TitledLoggable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Loggable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" logTitle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extension")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TitledLoggable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("\\(")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("logTitle")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(": ")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("\\(")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")])]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pair")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CustomStringConvertible")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" second"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" description"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"(')]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("\\(")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[t._v("first")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(", ")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("\\(")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[t._v("second")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extension")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pair")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Loggable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Loggable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extension")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pair")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TitledLoggable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TitledLoggable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" logTitle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"Pair of '")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("\\(")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("logTitle")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\"")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extension")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TitledLoggable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" logTitle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"String"')])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br"),a("span",{staticClass:"line-number"},[t._v("35")]),a("br"),a("span",{staticClass:"line-number"},[t._v("36")]),a("br"),a("span",{staticClass:"line-number"},[t._v("37")]),a("br"),a("span",{staticClass:"line-number"},[t._v("38")]),a("br"),a("span",{staticClass:"line-number"},[t._v("39")]),a("br"),a("span",{staticClass:"line-number"},[t._v("40")]),a("br"),a("span",{staticClass:"line-number"},[t._v("41")]),a("br"),a("span",{staticClass:"line-number"},[t._v("42")]),a("br")])]),a("p",[t._v("当其泛型类型遵循 "),a("code",[t._v("Loggable")]),t._v(" 协议以及 "),a("code",[t._v("TitleLoggale")]),t._v(" 协议时，结构体 "),a("code",[t._v("Pair")]),t._v(" 遵循 "),a("code",[t._v("Loggable")]),t._v(" 协议以及 "),a("code",[t._v("TitleLoggale")]),t._v(" 协议。下面的例子中，"),a("code",[t._v("oneAndTwo")]),t._v(" 是 "),a("code",[t._v("Pair<String>")]),t._v(" 的一个实例。因为 "),a("code",[t._v("String")]),t._v(" 遵循 "),a("code",[t._v("TitleLoggable")]),t._v(" ，因此 "),a("code",[t._v("oneAndTwo")]),t._v(" 也遵循此协议。当 "),a("code",[t._v("log()")]),t._v(" 方法被 "),a("code",[t._v("oneAndTwo")]),t._v(" 直接调用时，此方法使用的是包含标题的特定版本。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" oneAndTwo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pair")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"one"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" second"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"two"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\noneAndTwo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints \"Pair of 'String': (one, two)\"")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("虽然如此，当 "),a("code",[t._v("oneAndTwo")]),t._v(" 在泛型上下文中使用，或者它是 "),a("code",[t._v("Loggable")]),t._v(" 类型的实例时，包含标题的特定版本 "),a("code",[t._v("log()")]),t._v(" 方法不会被使用。Swift 只会根据这样的规则来选择 "),a("code",[t._v("log()")]),t._v(" 的实现版本—— "),a("code",[t._v("Pair")]),t._v(" 遵循 "),a("code",[t._v("Loggable")]),t._v(" 所需要的最少的限制条件。因此 "),a("code",[t._v("Loggable")]),t._v(" 所提供的默认实现版本会被使用。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("doSomething")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Loggable")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("with x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSomething")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("with"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" oneAndTwo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// Prints "(one, two)"')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("当传入 "),a("code",[t._v("doSomething(_:)")]),t._v(" 的实例调用 "),a("code",[t._v("log()")]),t._v(" 时，打印结果省略了自定义标题。")]),t._v(" "),a("h3",{attrs:{id:"协议遵循决不能冗余"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协议遵循决不能冗余"}},[t._v("#")]),t._v(" 协议遵循决不能冗余")]),t._v(" "),a("p",[t._v("一个具体的类型只能够遵循某特定协议一次。Swift 会把冗余的协议遵循标记为错误。你会在两种场景中遇到这种错误。第一种场景是，使用不同的限制条件来多次显式地遵循同一协议。第二种场景是，多次隐式地继承同一协议。以上两种场景会在下面章节中讨论。")]),t._v(" "),a("h2",{attrs:{id:"解决显式冗余"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决显式冗余"}},[t._v("#")]),t._v(" 解决显式冗余")]),t._v(" "),a("p",[t._v("对同一具体类型的多个扩展不能遵循同一协议，即便这些扩展有不同的显式限制条件。这个限制的具体示例在下面的例子中。两个扩展声明都试图添加对 "),a("code",[t._v("Serializable")]),t._v(" 的条件遵循，一个为 "),a("code",[t._v("Int")]),t._v(" 类型元素的数组，另一个为 "),a("code",[t._v("String")]),t._v(" 类型元素的数组。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protocol")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Serializable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("serialize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Any")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extension")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Serializable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Element")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("serialize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Any")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// implementation")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extension")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Serializable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Element")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("serialize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Any")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// implementation")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错: redundant conformance of 'Array<Element>' to protocol 'Serializable'")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br")])]),a("p",[t._v("如果你需要基于多个具体类型来添加条件遵循，那么创建一个新的协议，然后让每个类型都遵循此协议，最后在声明条件遵循时使用此协议作为条件限制。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protocol")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SerializableInArray")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extension")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SerializableInArray")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extension")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SerializableInArray")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extension")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Serializable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Element")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SerializableInArray")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("serialize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Any")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 具体实现")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("h2",{attrs:{id:"解决隐式冗余"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决隐式冗余"}},[t._v("#")]),t._v(" 解决隐式冗余")]),t._v(" "),a("p",[t._v("当一个具体类型有条件地遵循某协议，此类型会隐式地使用相同的条件遵循任一父协议。")]),t._v(" "),a("p",[t._v("如果你需要让一个类型有条件地遵循两个继承自同一父协议的协议，请显式地声明对父协议的遵循。这可以避免使用不同的限制条件隐式遵循同一父协议两次。")]),t._v(" "),a("p",[t._v("下面的例子中显式地声明了 "),a("code",[t._v("Array")]),t._v(" 对 "),a("code",[t._v("Loggable")]),t._v(" 的条件遵循，避免了在声明对 "),a("code",[t._v("TitledLoggable")]),t._v(" 和 "),a("code",[t._v("TitledLoggable")]),t._v(" 声明条件遵循时发生冲突。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protocol")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MarkedLoggable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Loggable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("markAndLog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extension")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MarkedLoggable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("markAndLog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"----------"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extension")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Loggable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Element")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Loggable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extension")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TitledLoggable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Element")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TitledLoggable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" logTitle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"Array of '")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("\\(")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Element")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("logTitle")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\"")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extension")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MarkedLoggable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Element")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MarkedLoggable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br")])]),a("p",[t._v("如果不显式声明对 "),a("code",[t._v("Loggable")]),t._v(" 的条件遵循，"),a("code",[t._v("Array")]),t._v(" 其他的扩展会隐式地创建此声明，并引发错误：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extension")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Loggable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Element")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TitledLoggable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extension")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Loggable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Element")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MarkedLoggable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错: redundant conformance of 'Array<Element>' to protocol 'Loggable'")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h4",{attrs:{id:"grammer-of-an-extension-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grammer-of-an-extension-declaration"}},[t._v("#")]),t._v(" grammer-of-an-extension-declaration")]),t._v(" "),a("blockquote",[a("p",[t._v("扩展声明语法")]),t._v(" "),a("h4",{attrs:{id:"extension-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extension-declaration"}},[t._v("#")]),t._v(" extension-declaration")]),t._v(" "),a("p",[a("em",[t._v("扩展声明")]),t._v(" → "),a("RouterLink",{attrs:{to:"/pages/629202/"}},[t._v("特性")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("访问级别修饰符")]),t._v("可选 "),a("strong",[t._v("extension")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("类型标识符")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("类型-继承-子句")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("泛型 where 子句")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("扩展主体")])],1),t._v(" "),a("h4",{attrs:{id:"extension-body"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extension-body"}},[t._v("#")]),t._v(" extension-body")]),t._v(" "),a("p",[a("em",[t._v("扩展主体")]),t._v(" → "),a("strong",[t._v("{")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("多条声明")]),t._v("可选 "),a("strong",[t._v("}")])]),t._v(" "),a("p",[a("em",[t._v("多条声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("单条声明")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("多条声明")]),t._v(" 可选")]),t._v(" "),a("p",[a("em",[t._v("单条声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("声明语句")]),t._v(" | "),a("a",{attrs:{href:""}},[t._v("编译控制流语句")])])]),t._v(" "),a("h2",{attrs:{id:"下标声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#下标声明"}},[t._v("#")]),t._v(" 下标声明")]),t._v(" "),a("p",[a("em",[t._v("下标声明（subscript declaration）")]),t._v(" 用于为特定类型的对象添加下标支持，通常也用于为访问集合、列表和序列中的元素提供语法便利。下标声明使用关键字 "),a("code",[t._v("subscript")]),t._v("，形式如下：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("subscript")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("参数列表"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" 返回类型 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        语句\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("setter 名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        语句\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("下标声明只能出现在类、结构体、枚举、扩展和协议的声明中。")]),t._v(" "),a("p",[t._v("参数列表指定一个或多个用于在相关类型的下标表达式中访问元素的索引（例如，表达式 "),a("code",[t._v("object[i]")]),t._v(" 中的 "),a("code",[t._v("i")]),t._v("）。索引可以是任意类型，但是必须包含类型注解。返回类型指定了被访问的元素的类型。")]),t._v(" "),a("p",[t._v("和计算型属性一样，下标声明支持对元素的读写操作。getter 用于读取值，setter 用于写入值。setter 子句是可选的，当仅需要一个 getter 子句时，可以将二者都忽略，直接返回请求的值即可。但是，如果提供了 setter 子句，就必须提供 getter 子句。")]),t._v(" "),a("p",[t._v("圆括号以及其中的 setter 名称是可选的。如果提供了 setter 名称，它会作为 setter 的参数名称。如果不提供 setter 名称，那么 setter 的参数名称默认是 "),a("code",[t._v("value")]),t._v("。setter 的参数类型必须与返回类型相同。")]),t._v(" "),a("p",[t._v("可以重写下标，只要参数列表或返回类型不同即可。还可以重写继承自超类的下标，此时必须使用 "),a("code",[t._v("override")]),t._v(" 声明修饰符声明被重写的下标。")]),t._v(" "),a("p",[t._v("下标参数遵循与函数参数相同的规则，但有两个例外。默认情况下，下标中使用的参数不需要指定标签，这与函数，方法和构造器不同。但是你也可以同它们一样，显式地提供参数标签。此外，下标不能有 "),a("code",[t._v("In-out")]),t._v(" 参数。下标参数可以具有默认值，具体的语法请参考 "),a("a",{attrs:{href:""}},[t._v("特殊参数")]),t._v("。")]),t._v(" "),a("p",[t._v("同样可以在协议声明中声明下标，正如 "),a("a",{attrs:{href:""}},[t._v("协议下标声明")]),t._v(" 中所述。")]),t._v(" "),a("p",[t._v("更多关于下标的信息和例子，请参阅 "),a("RouterLink",{attrs:{to:"/pages/e35887/"}},[t._v("下标")]),t._v("。")],1),t._v(" "),a("h3",{attrs:{id:"类型下标声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型下标声明"}},[t._v("#")]),t._v(" 类型下标声明")]),t._v(" "),a("p",[t._v("声明一个由类型而不是类型实例公开的下标，请使用 "),a("code",[t._v("static")]),t._v(" 声明修饰符标记下标声明。类可以使用 "),a("code",[t._v("class")]),t._v(" 声明修饰符标记类型计算属性，以允许子类重写父类的实现。在类声明中，"),a("code",[t._v("static")]),t._v(" 关键字具有与用 "),a("code",[t._v("class")]),t._v(" 和 "),a("code",[t._v("final")]),t._v(" 声明修饰符标记声明相同的效果。")]),t._v(" "),a("h4",{attrs:{id:"grammer-of-a-subscript-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grammer-of-a-subscript-declaration"}},[t._v("#")]),t._v(" grammer-of-a-subscript-declaration")]),t._v(" "),a("blockquote",[a("p",[t._v("下标声明语法")]),t._v(" "),a("h4",{attrs:{id:"subscript-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#subscript-declaration"}},[t._v("#")]),t._v(" subscript-declaration")]),t._v(" "),a("p",[a("em",[t._v("下标声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("下标头")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("下标结果")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("泛型 where 子句")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("代码块")])]),t._v(" "),a("p",[a("em",[t._v("下标声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("下标头")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("下标结果")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("泛型 where 子句")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("getter-setter 代码块")])]),t._v(" "),a("p",[a("em",[t._v("下标声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("下标头")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("下标结果")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("泛型 where 子句")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("getter-setter 关键字代码块")])]),t._v(" "),a("h4",{attrs:{id:"subscript-head"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#subscript-head"}},[t._v("#")]),t._v(" subscript-head")]),t._v(" "),a("p",[a("em",[t._v("下标头")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("特性列表")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("声明修饰符列表")]),t._v("可选 "),a("strong",[t._v("subscript")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("泛型参数子句")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("参数子句")])]),t._v(" "),a("h4",{attrs:{id:"subscript-result"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#subscript-result"}},[t._v("#")]),t._v(" subscript-result")]),t._v(" "),a("p",[a("em",[t._v("下标结果")]),t._v(" → "),a("strong",[t._v("->")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("特性列表")]),t._v("可选 "),a("a",{attrs:{href:""}},[t._v("类型")])])]),t._v(" "),a("h2",{attrs:{id:"运算符声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算符声明"}},[t._v("#")]),t._v(" 运算符声明")]),t._v(" "),a("p",[a("em",[t._v("运算符声明（operator declaration）")]),t._v(" 会向程序中引入中缀、前缀或后缀运算符，使用关键字 "),a("code",[t._v("operator")]),t._v(" 来声明。")]),t._v(" "),a("p",[t._v("可以声明三种不同的缀性：中缀、前缀和后缀。运算符的缀性指定了运算符与其运算对象的相对位置。")]),t._v(" "),a("p",[t._v("运算符声明有三种基本形式，每种缀性各一种。运算符的缀性通过在 "),a("code",[t._v("operator")]),t._v(" 关键字之前添加声明修饰符 "),a("code",[t._v("infix")]),t._v("，"),a("code",[t._v("prefix")]),t._v(" 或 "),a("code",[t._v("postfix")]),t._v(" 来指定。每种形式中，运算符的名字只能包含 "),a("RouterLink",{attrs:{to:"/pages/4b779c/#运算符"}},[t._v("运算符")]),t._v(" 中定义的运算符字符。")],1),t._v(" "),a("p",[t._v("下面的形式声明了一个新的中缀运算符：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("infix")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" 运算符名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 优先级组\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("中缀运算符是二元运算符，置于两个运算对象之间，例如加法运算符（"),a("code",[t._v("+")]),t._v("）位于表达式 "),a("code",[t._v("1 + 2")]),t._v(" 的中间。")]),t._v(" "),a("p",[t._v("中缀运算符可以选择指定优先级组。如果没有为运算符设置优先级组，Swift 会设置默认优先级组 "),a("code",[t._v("DefaultPrecedence")]),t._v(",它的优先级比三目优先级 "),a("code",[t._v("TernaryPrecedence")]),t._v(" 要高，更多内容参考"),a("a",{attrs:{href:""}},[a("em",[t._v("优先级组声明")])])]),t._v(" "),a("p",[t._v("下面的形式声明了一个新的前缀运算符：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("prefix")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" 运算符名称 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("出现在运算对象前边的前缀运算符是一元运算符，例如表达式 "),a("code",[t._v("!a")]),t._v(" 中的前缀非运算符（"),a("code",[t._v("!")]),t._v("）。")]),t._v(" "),a("p",[t._v("前缀运算符的声明中不指定优先级，而且前缀运算符是非结合的。")]),t._v(" "),a("p",[t._v("下面的形式声明了一个新的后缀运算符：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("postfix")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" 运算符名称 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("紧跟在运算对象后边的后缀运算符是一元运算符，例如表达式 "),a("code",[t._v("a!")]),t._v(" 中的后缀强制解包运算符（"),a("code",[t._v("!")]),t._v("）。")]),t._v(" "),a("p",[t._v("和前缀运算符一样，后缀运算符的声明中不指定优先级，而且后缀运算符是非结合的。")]),t._v(" "),a("p",[t._v("声明了一个新的运算符以后，需要实现一个跟这个运算符同名的函数来实现这个运算符。如果是实现一个前缀或者后缀运算符，也必须使用相符的 "),a("code",[t._v("prefix")]),t._v(" 或者 "),a("code",[t._v("postfix")]),t._v(" 声明修饰符标记函数声明。如果是实现中缀运算符，则不需要使用 "),a("code",[t._v("infix")]),t._v(" 声明修饰符标记函数声明。关于如何实现一个新的运算符的例子，请参阅 "),a("a",{attrs:{href:""}},[t._v("自定义运算符")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"grammer-of-an-operator-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grammer-of-an-operator-declaration"}},[t._v("#")]),t._v(" grammer-of-an-operator-declaration")]),t._v(" "),a("blockquote",[a("p",[t._v("运算符声明语法")])]),t._v(" "),a("h4",{attrs:{id:"operator-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#operator-declaration"}},[t._v("#")]),t._v(" operator-declaration")]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("运算符声明")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("前缀运算符声明")]),t._v(" | "),a("a",{attrs:{href:""}},[t._v("后缀运算符声明")]),t._v(" | "),a("a",{attrs:{href:""}},[t._v("中缀运算符声明")])])]),t._v(" "),a("h4",{attrs:{id:"prefix-operator-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prefix-operator-declaration"}},[t._v("#")]),t._v(" prefix-operator-declaration")]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("前缀运算符声明")]),t._v(" → "),a("strong",[t._v("prefix")]),t._v(" "),a("strong",[t._v("运算符")]),t._v(" "),a("RouterLink",{attrs:{to:"/pages/4b779c/#运算符"}},[t._v("运算符")]),t._v(" "),a("strong",[t._v("{")]),t._v(" "),a("strong",[t._v("}")])],1),t._v(" "),a("h4",{attrs:{id:"postfix-operator-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#postfix-operator-declaration"}},[t._v("#")]),t._v(" postfix-operator-declaration")]),t._v(" "),a("p",[a("em",[t._v("后缀运算符声明")]),t._v(" → "),a("strong",[t._v("postfix")]),t._v(" "),a("strong",[t._v("运算符")]),t._v(" "),a("RouterLink",{attrs:{to:"/pages/4b779c/#运算符"}},[t._v("运算符")]),t._v(" "),a("strong",[t._v("{")]),t._v(" "),a("strong",[t._v("}")])],1),t._v(" "),a("h4",{attrs:{id:"infix-operator-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#infix-operator-declaration"}},[t._v("#")]),t._v(" infix-operator-declaration")]),t._v(" "),a("p",[a("em",[t._v("中缀运算符声明")]),t._v(" → "),a("strong",[t._v("infix")]),t._v(" "),a("strong",[t._v("运算符")]),t._v(" "),a("RouterLink",{attrs:{to:"/pages/4b779c/#运算符"}},[t._v("运算符")]),t._v(" "),a("strong",[t._v("{")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("中缀运算符属性")]),t._v("可选 "),a("strong",[t._v("}")])],1)]),t._v(" "),a("h4",{attrs:{id:"infix-operator-group"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#infix-operator-group"}},[t._v("#")]),t._v(" infix-operator-group")]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("中缀运算符组")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("优先级组名称")])])]),t._v(" "),a("h2",{attrs:{id:"优先级组声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优先级组声明"}},[t._v("#")]),t._v(" 优先级组声明")]),t._v(" "),a("p",[a("em",[t._v("优先级组声明（A precedence group declaration）")]),t._v(" 会向程序的中缀运算符引入一个全新的优先级组。当没有用圆括号分组时，运算符优先级反应了运算符与它的操作数的关系的紧密程度。 优先级组的声明如下所示:")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("precedencegroup")]),t._v(" 优先级组名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("higherThan")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 较低优先级组的名称\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("lowerThan")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 较高优先级组的名称\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("associativity")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 结合性\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assignment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 赋值性\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("较低优先级组和较高优先级组的名称说明了新建的优先级组是依赖于现存的优先级组的。"),a("code",[t._v("lowerThan")]),t._v(" 优先级组的属性只可以引用当前模块外的优先级组。当两个运算符为同一个操作数竞争时，比如表达式 "),a("code",[t._v("2 + 3 * 5")]),t._v(",优先级更高的运算符将优先参与运算。")]),t._v(" "),a("blockquote",[a("p",[t._v("注意")]),t._v(" "),a("p",[t._v("使用较低和较高优先级组相互联系的优先级组必须保持单一层次关系，但它们不必是线性关系。这意味着优先级组也许会有未定义的相关优先级。这些优先级组的运算符在没有用圆括号分组的情况下是不能紧邻着使用的。")])]),t._v(" "),a("p",[t._v("Swift 定义了大量的优先级组来与标准库的运算符配合使用，例如相加（"),a("code",[t._v("+")]),t._v("）和相减（"),a("code",[t._v("-")]),t._v("）属于 "),a("code",[t._v("AdditionPrecedence")]),t._v(" 组，相乘（"),a("code",[t._v("*")]),t._v("）和相除（"),a("code",[t._v("/")]),t._v("）属于 "),a("code",[t._v("MultiplicationPrecedence")]),t._v(" 组，详细关于 Swift 标准库中一系列运算符和优先级组内容，参阅 "),a("a",{attrs:{href:"https://developer.apple.com/documentation/swift/operator_declarations",target:"_blank",rel:"noopener noreferrer"}},[t._v("Swift 标准库操作符参考"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[t._v("运算符的结合性表示在没有圆括号分组的情况下，同样优先级的一系列运算符是如何被分组的。你可以指定运算符的结合性通过上下文关键字 "),a("code",[t._v("left")]),t._v("、"),a("code",[t._v("right")]),t._v(" 或者 "),a("code",[t._v("none")]),t._v(",如果没有指定结合性，默认是 "),a("code",[t._v("none")]),t._v(" 关键字。左关联性的运算符是从左至右分组的，例如，相减操作符（-）是左关联性的，所以表达式 "),a("code",[t._v("4 - 5 - 6")]),t._v(" 被分组为 "),a("code",[t._v("(4 - 5) - 6")]),t._v(",得出结果-7。右关联性的运算符是从右往左分组的，指定为 "),a("code",[t._v("none")]),t._v(" 结合性的运算符就没有结合性。同样优先级没有结合性的运算符不能相邻出现，例如 "),a("code",[t._v("<")]),t._v(" 运算符是 "),a("code",[t._v("none")]),t._v(" 结合性，那表示 "),a("code",[t._v("1 < 2 < 3")]),t._v(" 就不是一个有效表达式。")]),t._v(" "),a("p",[t._v("优先级组的赋值性表示在包含可选链操作时的运算符优先级。当设为 true 时，与优先级组对应的运算符在可选链操作中使用和标准库中赋值运算符同样的分组规则，当设为 false 或者不设置，该优先级组的运算符与不赋值的运算符遵循同样的可选链规则。")]),t._v(" "),a("h4",{attrs:{id:"grammer-of-a-precedence-group-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grammer-of-a-precedence-group-declaration"}},[t._v("#")]),t._v(" grammer-of-a-precedence-group-declaration")]),t._v(" "),a("blockquote",[a("p",[t._v("优先级组声明语法")])]),t._v(" "),a("h4",{attrs:{id:"precedence-group-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#precedence-group-declaration"}},[t._v("#")]),t._v(" precedence-group-declaration")]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("优先级组声明")]),t._v(" → "),a("strong",[t._v("precedence")]),a("a",{attrs:{href:""}},[t._v("优先级组名称")]),t._v("{"),a("a",{attrs:{href:""}},[t._v("多优先级组属性")]),t._v("可选 }")])]),t._v(" "),a("h4",{attrs:{id:"precedence-group-attributes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#precedence-group-attributes"}},[t._v("#")]),t._v(" precedence-group-attributes")]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("优先级组属性")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("优先级组属性")]),a("a",{attrs:{href:""}},[t._v("多优先级组属性")]),t._v("可选 "),a("strong",[t._v("{")]),t._v(" "),a("strong",[t._v("}")])])]),t._v(" "),a("h4",{attrs:{id:"precedence-group-attribute"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#precedence-group-attribute"}},[t._v("#")]),t._v(" precedence-group-attribute")]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("优先级组属性")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("优先级组关系")])]),t._v(" "),a("p",[a("em",[t._v("优先级组属性")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("优先级组赋值性")])]),t._v(" "),a("p",[a("em",[t._v("优先级组属性")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("优先级组相关性")])]),t._v(" "),a("h4",{attrs:{id:"precedence-group-relation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#precedence-group-relation"}},[t._v("#")]),t._v(" precedence-group-relation")]),t._v(" "),a("p",[a("em",[t._v("优先级组关系")]),t._v(" → "),a("strong",[t._v("higherThan:")]),a("a",{attrs:{href:""}},[t._v("多优先级组名称")])]),t._v(" "),a("p",[a("em",[t._v("优先级组关系")]),t._v(" → "),a("strong",[t._v("lowerThan:")]),a("a",{attrs:{href:""}},[t._v("多优先级组名称")])]),t._v(" "),a("h4",{attrs:{id:"precedence-group-assignment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#precedence-group-assignment"}},[t._v("#")]),t._v(" precedence-group-assignment")]),t._v(" "),a("p",[a("em",[t._v("优先级组赋值")]),t._v(" → "),a("strong",[t._v("assignment:")]),a("a",{attrs:{href:""}},[t._v("布尔字面值")])])]),t._v(" "),a("h4",{attrs:{id:"precedence-group-associativity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#precedence-group-associativity"}},[t._v("#")]),t._v(" precedence-group-associativity")]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("优先级组结合性")]),t._v(" → "),a("strong",[t._v("associativity:left")])]),t._v(" "),a("p",[a("em",[t._v("优先级组结合性")]),t._v(" → "),a("strong",[t._v("associativity:right")])]),t._v(" "),a("p",[a("em",[t._v("优先级组结合性")]),t._v(" → "),a("strong",[t._v("associativity:none")])])]),t._v(" "),a("h4",{attrs:{id:"precedence-group-names"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#precedence-group-names"}},[t._v("#")]),t._v(" precedence-group-names")]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("多优先级组名称")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("优先级组名称")]),t._v(" | "),a("a",{attrs:{href:""}},[t._v("优先级组名称")]),t._v(" | "),a("a",{attrs:{href:""}},[t._v("优先级组名称")])])]),t._v(" "),a("h4",{attrs:{id:"precedence-group-name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#precedence-group-name"}},[t._v("#")]),t._v(" precedence-group-name")]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("优先级组名称")]),t._v(" →"),a("a",{attrs:{href:""}},[t._v("标识符")])])]),t._v(" "),a("h2",{attrs:{id:"声明修饰符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明修饰符"}},[t._v("#")]),t._v(" 声明修饰符")]),t._v(" "),a("p",[t._v("声明修饰符都是关键字或上下文相关的关键字，可以修改一个声明的行为或者含义。可以在声明的特性（如果存在）和引入该声明的关键字之间，利用声明修饰符的关键字或上下文相关的关键字指定一个声明修饰符。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("该修饰符用于修饰任何类成员，表明是类自身的成员，而不是类实例的成员。父类中使用该修饰符标记或者未被 "),a("code",[t._v("final")]),t._v(" 修饰符标记的成员，都允许被子类重写。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("dynamic")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("该修饰符用于修饰任何兼容 Objective-C 的类的成员。访问被 "),a("code",[t._v("dynamic")]),t._v(" 修饰符标记的类成员将总是由 Objective-C 运行时系统进行动态派发，而不会由编译器进行内联或消虚拟化。")]),t._v(" "),a("p",[t._v("因为被标记 "),a("code",[t._v("dynamic")]),t._v(" 修饰符的类成员会由 Objective-C 运行时系统进行动态派发，所以它们会被隐式标记 "),a("code",[t._v("objc")]),t._v(" 特性。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("该修饰符用于修饰类或类中的属性、方法以及下标。如果用它修饰一个类，那么这个类不能被继承。如果用它修饰类中的属性、方法或下标，那么它们不能在子类中被重写。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("lazy")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("该修饰符用于修饰类或结构体中的存储型变量属性，表示该属性的初始值最多只被计算和存储一次，且发生在它被第一次访问时。关于如何使用 "),a("code",[t._v("lazy")]),t._v(" 修饰符的例子，请参阅 "),a("a",{attrs:{href:""}},[t._v("惰性存储型属性")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("optional")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("该修饰符用于修饰协议中的属性、方法以及下标成员，表示符合类型可以不实现这些成员要求。")]),t._v(" "),a("p",[t._v("只能将 "),a("code",[t._v("optional")]),t._v(" 修饰符用于被 "),a("code",[t._v("objc")]),t._v(" 特性标记的协议。这样一来，就只有类类型可以采纳并符合拥有可选成员要求的协议。关于如何使用 "),a("code",[t._v("optional")]),t._v(" 修饰符，以及如何访问可选协议成员（比如，不确定符合类型是否已经实现了这些可选成员）的信息，请参阅 "),a("a",{attrs:{href:""}},[t._v("可选协议要求")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("required")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("该修饰符用于修饰类的指定构造器或便利构造器，表示该类所有的子类都必须实现该构造器。在子类实现该构造器时，必须同样使用 "),a("code",[t._v("required")]),t._v(" 修饰符修饰该构造器。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("该修饰符用于修饰结构体、类、枚举或协议的成员，表明是类型成员，而不是类型实例的成员。在类声明的作用范围内，使用 "),a("code",[t._v("static")]),t._v(" 修饰符标记成员声明语句，同 "),a("code",[t._v("class")]),t._v(" 和 "),a("code",[t._v("final")]),t._v(" 修饰符具有相同的效果。但是类的常量类型属性是一个例外： "),a("code",[t._v("static")]),t._v(" 没有问题，但是你无法为常量声明使用 "),a("code",[t._v("class")]),t._v(" 或 "),a("code",[t._v("final")]),t._v(" 修饰符。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unowned")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("该修饰符用于修饰存储型变量、常量或者存储型变量属性，表示该变量或属性持有其存储对象的无主引用。如果在此存储对象释放后尝试访问该对象，会引发运行时错误。如同弱引用一样，该引用类型的变量或属性必须是类类型。与弱引用不同的是，这种类型的变量或属性是非可选的。关于 "),a("code",[t._v("unowned")]),t._v(" 更多的信息和例子，请参阅 "),a("a",{attrs:{href:""}},[t._v("无主引用")])]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unowned")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("safe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("code",[t._v("unowned")]),t._v(" 的显式写法")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unowned")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsafe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("该修饰符用于修饰存储型变量、常量或者存储型变量属性，表示该变量或属性持有其存储对象的无主引用。如果在此存储对象释放后尝试访问该对象，会直接访问该对象释放前存储的内存地址，因此这是非内存安全的操作。如同弱引用一样，该引用类型的变量或属性必须是类类型。与弱引用不同的是，这种类型的变量或属性是非可选的。关于 "),a("code",[t._v("unowned")]),t._v(" 更多的信息和例子，请参阅 "),a("a",{attrs:{href:""}},[t._v("无主引用")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("weak")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("该修饰符用于修饰变量或存储型变量属性，表示该变量或属性持有其存储的对象的弱引用。这种变量或属性的类型必须是可选的类类型。使用 "),a("code",[t._v("weak")]),t._v(" 修饰符可避免强引用循环。关于 "),a("code",[t._v("weak")]),t._v(" 修饰符的更多信息和例子，请参阅 "),a("a",{attrs:{href:""}},[t._v("弱引用")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"访问控制级别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问控制级别"}},[t._v("#")]),t._v(" 访问控制级别")]),t._v(" "),a("p",[t._v("Swift 提供了三个级别的访问控制："),a("code",[t._v("public")]),t._v("、"),a("code",[t._v("internal")]),t._v(" 和 "),a("code",[t._v("private")]),t._v("。可以使用以下任意一种访问级别修饰符来指定声明的访问级别。访问控制在 "),a("RouterLink",{attrs:{to:"/pages/6c25a0/"}},[t._v("访问控制")]),t._v(" 中有详细讨论。")],1),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("该修饰符表示声明可被同模块的代码访问，只要其他模块导入了声明所在的模块，也可以进行访问。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("internal")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("该修饰符表示声明只能被同模块的代码访问。默认情况下，绝大多数声明会被隐式标记 "),a("code",[t._v("internal")]),t._v(" 访问级别修饰符。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("该修饰符表示声明只能被所在源文件的代码访问。")]),t._v(" "),a("p",[t._v("以上访问级别修饰符都可以选择带上一个参数，该参数由一对圆括号和其中的 "),a("code",[t._v("set")]),t._v(" 关键字组成（例如，"),a("code",[t._v("private(set)")]),t._v("）。使用这种形式的访问级别修饰符来限制某个属性或下标的 setter 的访问级别低于其本身的访问级别，正如 "),a("a",{attrs:{href:""}},[t._v("Getter 和 Setter")]),t._v(" 中所讨论的。")]),t._v(" "),a("h4",{attrs:{id:"grammer-of-a-declaration-modifier"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grammer-of-a-declaration-modifier"}},[t._v("#")]),t._v(" grammer-of-a-declaration-modifier")]),t._v(" "),a("blockquote",[a("p",[t._v("声明修饰符的语法")])]),t._v(" "),a("h4",{attrs:{id:"declaration-modifier"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#declaration-modifier"}},[t._v("#")]),t._v(" declaration-modifier")]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("声明修饰符")]),t._v(" → "),a("strong",[t._v("class")]),t._v(" | "),a("strong",[t._v("convenience")]),t._v("| "),a("strong",[t._v("dynamic")]),t._v(" | "),a("strong",[t._v("final")]),t._v(" | "),a("strong",[t._v("infix")]),t._v(" | "),a("strong",[t._v("lazy")]),t._v(" | "),a("strong",[t._v("mutating")]),t._v(" | "),a("strong",[t._v("nonmutating")]),t._v(" | "),a("strong",[t._v("optional")]),t._v(" | "),a("strong",[t._v("override")]),t._v(" | "),a("strong",[t._v("postfix")]),t._v(" | "),a("strong",[t._v("prefix")]),t._v(" | "),a("strong",[t._v("required")]),t._v(" | "),a("strong",[t._v("static")]),t._v(" | "),a("strong",[t._v("unowned")]),t._v(" | "),a("strong",[t._v("unowned ( safe )")]),t._v(" | "),a("strong",[t._v("unowned ( unsafe )")]),t._v(" | "),a("strong",[t._v("weak")])]),t._v(" "),a("p",[t._v("声明修饰符 → "),a("a",{attrs:{href:""}},[t._v("访问级别修饰符")])]),t._v(" "),a("h4",{attrs:{id:"declaration-modifiers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#declaration-modifiers"}},[t._v("#")]),t._v(" declaration-modifiers")]),t._v(" "),a("p",[a("em",[t._v("声明修饰符列表")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("声明修饰符")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("声明修饰符列表")]),t._v("可选")])]),t._v(" "),a("h4",{attrs:{id:"access-level-modifier"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#access-level-modifier"}},[t._v("#")]),t._v(" access-level-modifier")]),t._v(" "),a("blockquote",[a("p",[t._v("访问级别修饰符 → "),a("strong",[t._v("internal")]),t._v(" | "),a("strong",[t._v("internal ( set )")])]),t._v(" "),a("p",[t._v("访问级别修饰符 → "),a("strong",[t._v("private")]),t._v(" | "),a("strong",[t._v("private ( set )")])]),t._v(" "),a("p",[t._v("访问级别修饰符 → "),a("strong",[t._v("public")]),t._v(" | "),a("strong",[t._v("public ( set )")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);