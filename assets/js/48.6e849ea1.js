(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{471:function(t,a,s){"use strict";s.r(a);var e=s(2),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("本节涉及泛型类型、泛型函数以及泛型构造器的参数，包括形参和实参。声明泛型类型、函数或构造器时，须指定相应的类型参数。类型参数相当于一个占位符，当实例化泛型类型、调用泛型函数或泛型构造器时，就用具体的类型实参替代之。")]),t._v(" "),a("p",[t._v("关于 Swift 语言的泛型概述，请参阅 "),a("a",{attrs:{href:""}},[t._v("泛型")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"泛型形参子句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型形参子句"}},[t._v("#")]),t._v(" 泛型形参子句")]),t._v(" "),a("p",[a("em",[t._v("泛型形参子句")]),t._v("指定泛型类型或函数的类型形参，以及这些参数相关的约束和要求。泛型形参子句用尖括号（"),a("code",[t._v("<>")]),t._v("）包住，形式如下：")]),t._v(" "),a("blockquote",[a("p",[t._v("<"),a("code",[t._v("泛型形参列表")]),t._v(">")])]),t._v(" "),a("p",[t._v("泛型形参列表中泛型形参用逗号分开，其中每一个采用以下形式：")]),t._v(" "),a("blockquote",[a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[t._v("类型形参` "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" `约束\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])])]),t._v(" "),a("p",[t._v("泛型形参由两部分组成：类型形参及其后的可选约束。类型形参只是占位符类型（如 "),a("code",[t._v("T")]),t._v("，"),a("code",[t._v("U")]),t._v("，"),a("code",[t._v("V")]),t._v("，"),a("code",[t._v("Key")]),t._v("，"),a("code",[t._v("Value")]),t._v(" 等）的名字而已。你可以在泛型类型、函数的其余部分或者构造器声明，包括函数或构造器的签名中使用它（以及它的关联类型）。")]),t._v(" "),a("p",[t._v("约束用于指明该类型形参继承自某个类或者符合某个协议或协议组合。例如，在下面的泛型函数中，泛型形参 "),a("code",[t._v("T: Comparable")]),t._v(" 表示任何用于替代类型形参 "),a("code",[t._v("T")]),t._v(" 的类型实参必须满足 "),a("code",[t._v("Comparable")]),t._v(" 协议。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("simpleMax")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comparable")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token omit keyword"}},[t._v("_")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token omit keyword"}},[t._v("_")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" y\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("例如，因为 "),a("code",[t._v("Int")]),t._v(" 和 "),a("code",[t._v("Double")]),t._v(" 均满足 "),a("code",[t._v("Comparable")]),t._v(" 协议，所以该函数可以接受这两种类型。与泛型类型相反，调用泛型函数或构造器时不需要指定泛型实参子句。类型实参由传递给函数或构造器的实参推断而出。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("simpleMax")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// T 被推断为 Int 类型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("simpleMax")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.14159")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.71828")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// T 被推断为 Double 类型")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h3",{attrs:{id:"where-子句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#where-子句"}},[t._v("#")]),t._v(" Where 子句")]),t._v(" "),a("p",[t._v("要想对类型形参及其关联类型指定额外要求，可以在函数体或者类型的大括号之前添加 "),a("code",[t._v("where")]),t._v(" 子句。"),a("code",[t._v("where")]),t._v(" 子句由关键字 "),a("code",[t._v("where")]),t._v(" 及其后的用逗号分隔的一个或多个要求组成。")]),t._v(" "),a("blockquote",[a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v("` "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" `类型要求\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])])]),t._v(" "),a("p",[a("code",[t._v("where")]),t._v(" 子句中的要求用于指明该类型形参继承自某个类或符合某个协议或协议组合。尽管 "),a("code",[t._v("where")]),t._v(" 子句提供了语法糖使其有助于表达类型形参上的简单约束（如 "),a("code",[t._v("<T: Comparable>")]),t._v(" 等同于 "),a("code",[t._v("<T> where T: Comparable")]),t._v("，等等），但是依然可以用来对类型形参及其关联类型提供更复杂的约束，例如你可以强制形参的关联类型遵守协议，如，"),a("code",[t._v("<S: Sequence> where S.Iterator.Element: Equatable")]),t._v(" 表示泛型类型 "),a("code",[t._v("S")]),t._v(" 遵守 "),a("code",[t._v("Sequence")]),t._v(" 协议并且关联类型 "),a("code",[t._v("S.Iterator.Element")]),t._v(" 遵守 "),a("code",[t._v("Equatable")]),t._v(" 协议，这个约束确保队列的每一个元素都是符合 "),a("code",[t._v("Equatable")]),t._v(" 协议的。")]),t._v(" "),a("blockquote"),t._v(" "),a("p",[t._v("也可以用操作符 "),a("code",[t._v("==")]),t._v(" 来指定两个类型必须相同。例如，泛型形参子句 "),a("code",[t._v("<S1: Sequence, S2: Sequence> where S1.Iterator.Element == S2.Iterator.Element")]),t._v(" 表示 "),a("code",[t._v("S1")]),t._v(" 和 "),a("code",[t._v("S2")]),t._v(" 必须都符合 "),a("code",[t._v("SequenceType")]),t._v(" 协议，而且两个序列中的元素类型必须相同。")]),t._v(" "),a("blockquote"),t._v(" "),a("p",[t._v("当然，替代类型形参的类型实参必须满足所有的约束和要求。")]),t._v(" "),a("p",[a("code",[t._v("where")]),t._v(" 子句可以存在于包含类型参数的声明中，或作为声明的一部分，被嵌套另一个在含有类型参数的声明中。被嵌套的 "),a("code",[t._v("where")]),t._v(" 子句依然可以指向包围它的声明中的类型参数，此时 "),a("code",[t._v("where")]),t._v(" 子句需要满足的条件仅用于它被声明的地方。")]),t._v(" "),a("p",[t._v("如果外层的声明也有一个 "),a("code",[t._v("where")]),t._v(" 子句，两个子句的条件都需要满足。下面的例子中，"),a("code",[t._v("startsWithZero()")]),t._v(" 只有在 "),a("code",[t._v("Element")]),t._v(" 同时满足 "),a("code",[t._v("SomeProtocol")]),t._v(" 和 "),a("code",[t._v("Numeric")]),t._v(" 才有效。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extension")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collection")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Element")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SomeProtocol")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("startsWithZero")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Element")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Numeric")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" first "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("zero\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("泛型函数或构造器可以重载，但在泛型形参子句中的类型形参必须有不同的约束或要求，抑或二者皆不同。当调用重载的泛型函数或构造器时，编译器会根据这些约束来决定调用哪个重载函数或构造器。")]),t._v(" "),a("p",[t._v("更多关于泛型 where 从句的信息和关于泛型函数声明的例子，可以看一看 "),a("a",{attrs:{href:""}},[t._v("泛型 where 子句")]),t._v("。")]),t._v(" "),a("blockquote",[a("p",[t._v("泛型形参子句语法")])]),t._v(" "),a("h4",{attrs:{id:"generic-parameter-clause"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#generic-parameter-clause"}},[t._v("#")]),t._v(" generic-parameter-clause")]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("泛型形参子句")]),t._v(" → "),a("strong",[t._v("<")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("泛型形参列表")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("约束子句")]),t._v("可选 "),a("strong",[t._v(">")])])]),t._v(" "),a("h4",{attrs:{id:"generic-parameter-list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#generic-parameter-list"}},[t._v("#")]),t._v(" generic-parameter-list")]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("泛型形参列表")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("泛形形参")]),t._v(" | "),a("a",{attrs:{href:""}},[t._v("泛形形参")]),t._v(" "),a("strong",[t._v(",")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("泛型形参列表")])])]),t._v(" "),a("h4",{attrs:{id:"generic-parameter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#generic-parameter"}},[t._v("#")]),t._v(" generic-parameter")]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("泛形形参")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("类型名称")])]),t._v(" "),a("p",[a("em",[t._v("泛形形参")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("类型名称")]),t._v(" "),a("strong",[t._v(":")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("类型标识符")])]),t._v(" "),a("p",[a("em",[t._v("泛形形参")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("类型名称")]),t._v(" "),a("strong",[t._v(":")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("协议合成类型")])]),t._v(" "),a("h4",{attrs:{id:"requirement-clause"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#requirement-clause"}},[t._v("#")]),t._v(" requirement-clause")]),t._v(" "),a("p",[a("em",[t._v("约束子句")]),t._v(" → "),a("strong",[t._v("where")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("约束列表")])])]),t._v(" "),a("h4",{attrs:{id:"requirement-list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#requirement-list"}},[t._v("#")]),t._v(" requirement-list")]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("约束列表")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("约束")]),t._v(" | "),a("a",{attrs:{href:""}},[t._v("约束")]),t._v(" "),a("strong",[t._v(",")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("约束列表")])])]),t._v(" "),a("h4",{attrs:{id:"requirement"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#requirement"}},[t._v("#")]),t._v(" requirement")]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("约束")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("一致性约束")]),t._v(" | "),a("a",{attrs:{href:""}},[t._v("同类型约束")])]),t._v(" "),a("h4",{attrs:{id:"conformance-requirement"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#conformance-requirement"}},[t._v("#")]),t._v(" conformance-requirement")]),t._v(" "),a("p",[a("em",[t._v("一致性约束")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("类型标识符")]),t._v(" "),a("strong",[t._v(":")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("类型标识符")])]),t._v(" "),a("p",[a("em",[t._v("一致性约束")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("类型标识符")]),t._v(" "),a("strong",[t._v(":")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("协议合成类型")])])]),t._v(" "),a("h4",{attrs:{id:"same-type-requirement"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#same-type-requirement"}},[t._v("#")]),t._v(" same-type-requirement")]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("同类型约束")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("类型标识符")]),t._v(" "),a("strong",[t._v("==")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("类型")])])]),t._v(" "),a("h2",{attrs:{id:"泛型实参子句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型实参子句"}},[t._v("#")]),t._v(" 泛型实参子句")]),t._v(" "),a("p",[a("em",[t._v("泛型实参子句")]),t._v("指定泛型类型的类型实参。泛型实参子句用尖括号（"),a("code",[t._v("<>")]),t._v("）包住，形式如下：")]),t._v(" "),a("blockquote",[a("p",[t._v("<"),a("code",[t._v("泛型实参列表")]),t._v(">")])]),t._v(" "),a("p",[t._v("泛型实参列表中类型实参用逗号分开。类型实参是实际具体类型的名字，用来替代泛型类型的泛型形参子句中的相应的类型形参。从而得到泛型类型的一个特化版本。例如，Swift 标准库中的泛型字典类型的的简化定义如下：")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dictionary")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Key")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Hashable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Value")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CollectionType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DictionaryLiteralConvertible")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* ... */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("泛型 "),a("code",[t._v("Dictionary")]),t._v(" 类型的特化版本，"),a("code",[t._v("Dictionary<String, Int>")]),t._v(" 就是用具体的 "),a("code",[t._v("String")]),t._v(" 和 "),a("code",[t._v("Int")]),t._v(" 类型替代泛型类型 "),a("code",[t._v("Key: Hashable")]),t._v(" 和 "),a("code",[t._v("Value")]),t._v(" 产生的。每一个类型实参必须满足它所替代的泛型形参的所有约束，包括任何 "),a("code",[t._v("where")]),t._v(" 子句所指定的额外的关联类型要求。上面的例子中，类型形参 "),a("code",[t._v("Key")]),t._v(" 的类型必须符合 "),a("code",[t._v("Hashable")]),t._v(" 协议，因此 "),a("code",[t._v("String")]),t._v(" 也必须满足 "),a("code",[t._v("Hashable")]),t._v(" 协议。")]),t._v(" "),a("p",[t._v("可以用本身就是泛型类型的特化版本的类型实参替代类型形参（假设已满足合适的约束和关联类型要求）。例如，为了生成一个元素类型是整型数组的数组，可以用数组的特化版本 "),a("code",[t._v("Array<Int>")]),t._v(" 替代泛型类型 "),a("code",[t._v("Array<T>")]),t._v(" 的类型形参 "),a("code",[t._v("T")]),t._v(" 来实现。")]),t._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arrayOfArrays"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("如 "),a("a",{attrs:{href:""}},[t._v("泛型形参子句")]),t._v(" 所述，不能用泛型实参子句来指定泛型函数或构造器的类型实参。")]),t._v(" "),a("blockquote",[a("p",[t._v("泛型实参子句语法")])]),t._v(" "),a("h4",{attrs:{id:"generic-argument-clause"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#generic-argument-clause"}},[t._v("#")]),t._v(" generic-argument-clause")]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("泛型实参子句")]),t._v(" → "),a("strong",[t._v("<")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("泛型实参列表")]),t._v(" "),a("strong",[t._v(">")])])]),t._v(" "),a("h4",{attrs:{id:"generic-argument-list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#generic-argument-list"}},[t._v("#")]),t._v(" generic-argument-list")]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("泛型实参列表")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("泛型实参")]),t._v(" | "),a("a",{attrs:{href:""}},[t._v("泛型实参")]),t._v(" "),a("strong",[t._v(",")]),t._v(" "),a("a",{attrs:{href:""}},[t._v("泛型实参列表")])])]),t._v(" "),a("h4",{attrs:{id:"generic-argument"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#generic-argument"}},[t._v("#")]),t._v(" generic-argument")]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("泛型实参")]),t._v(" → "),a("a",{attrs:{href:""}},[t._v("类型")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);