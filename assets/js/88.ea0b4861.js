(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{459:function(s,e,a){"use strict";a.r(e);var t=a(2),n=Object(t.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"常用命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[s._v("#")]),s._v(" 常用命令")]),s._v(" "),e("p",[s._v("查看日志")]),s._v(" "),e("p",[e("code",[s._v("git log")])]),s._v(" "),e("h2",{attrs:{id:"分支命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支命令"}},[s._v("#")]),s._v(" 分支命令")]),s._v(" "),e("p",[s._v("查看分支")]),s._v(" "),e("p",[e("code",[s._v("git branch")])]),s._v(" "),e("p",[s._v("切换分支")]),s._v(" "),e("p",[e("code",[s._v("git checkout master")])]),s._v(" "),e("p",[s._v("合并分支到master")]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git add.\ngit commit -m"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'dev'")]),s._v("\ngit push -u origin dev\ngit checkout master\ngit pull orgin master\ngit merge dev\ngit push orgin master\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("h2",{attrs:{id:"tag命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tag命令"}},[s._v("#")]),s._v(" tag命令")]),s._v(" "),e("p",[s._v("查看所有标签")]),s._v(" "),e("p",[e("code",[s._v("git tag")])]),s._v(" "),e("p",[s._v("添加标签")]),s._v(" "),e("p",[e("code",[s._v("git tag -a v1.0.0 -m'add 1.0.0'")])]),s._v(" "),e("p",[s._v("给tag标签重命名")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("git tag newtag oldtag\ngit tag -d oldtag\ngit push origin :refs/tags/oldtag\ngit push --tags\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("修改提交日志")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("git commit --amend\ngit push origin master --forece\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h2",{attrs:{id:"gitignore"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gitignore"}},[s._v("#")]),s._v(" gitignore")]),s._v(" "),e("p",[s._v("应该忽略哪些文件")]),s._v(" "),e("blockquote",[e("p",[s._v("被忽略的文件通常是特定于平台的文件或从构建系统自动创建的文件。一些常见的例子包括：运行时文件，例如日志，锁定文件，缓存或临时文件。具有敏感信息的文件，例如密码或API密钥。已编译的代码，例如.class或.o。依赖目录，例如/vendor或/node_modules。构建的输出目录，例如/public，/out或/dist。系统文件，例如.DS_Store或Thumbs.db。IDE或文本编辑器配置文件。")])]),s._v(" "),e("p",[s._v("注释")]),s._v(" "),e("blockquote",[e("p",[s._v("以井号（#）开头的行是注释，将被忽略。空行可以用来提高文件的可读性，并可以对相关的模式行进行分组。")])]),s._v(" "),e("p",[s._v("斜杠符")]),s._v(" "),e("blockquote",[e("p",[s._v("斜杠符号（/）是目录的分隔符。斜杠开头模式相对于.gitignore所在的目录。如果模式以斜杠开头，则仅从仓库的根目录中开始匹配文件和目录。如果模式不是以斜杠开头，则它将匹配任何目录或子目录中的文件和目录。\n如果模式以斜杠结尾，则仅匹配目录。当目录被忽略时，其所有文件和子目录也将被忽略。")])]),s._v(" "),e("p",[s._v("文件名")]),s._v(" "),e("blockquote",[e("p",[s._v("最直接的模式是没有任何特殊字符的文件名。例如/access.log仅匹配access.log。而access.log将会匹配当前目录与子目录 access.log，logs/access.log ，var/logs/access.log。当以/斜杠符号结束时则匹配目录。例如build/匹配build目录。")])]),s._v(" "),e("p",[s._v("通配符")]),s._v(" "),e("blockquote",[e("p",[e("em",[s._v("星号符号匹配零个或多个字符。例如")]),s._v(".log模式将匹配error.log，logs/debug.log，build/logs/error.log等所有目录下以.log作为扩展名的文件。")])]),s._v(" "),e("blockquote",[e("p",[s._v("**两个相邻的星号符号匹配任何文件或零个或多个目录。当后跟斜杠（/）时，它仅与目录匹配。例如，logs/将会匹配logs目录中所有文件与目录。/build将匹配所有目录中出现以build命名目录与文件var/build，pub/build。")])]),s._v(" "),e("blockquote",[e("p",[s._v("模式foo/**/bar将匹配foo/bar，foo/a/bar，foo/a/b/c/bar。")])]),s._v(" "),e("blockquote",[e("p",[s._v("?问号匹配单个任意字符。例如模式access?.log将会匹配access0.log，access1.log，accessA.log 。")])]),s._v(" "),e("p",[s._v("方括号")]),s._v(" "),e("blockquote",[e("p",[s._v("[...]方括号匹配方括号中包含的字符。当两个字符之间用连字符-隔开时，表示一个字符范围。该范围包括这两个字符之间的所有字符。范围可以是字母或数字。如果[之后的第一个字符是感叹号（!），则该模式匹配除指定集合中的字符以外的任何字符。")])]),s._v(" "),e("blockquote",[e("p",[s._v("例如模式*.[oa]将匹配文件file.o，file.a。模式*.[!oa]将匹配file.s，file.1但不匹配file.0与file.a。")])]),s._v(" "),e("p",[s._v("反模式")]),s._v(" "),e("blockquote",[e("p",[s._v("以感叹号（!）开头的模式将否定先前模式。此规则的例外是，如果排除了其父目录，则重新包含文件。例如模式 *.log与!error.log这将会匹配所有以.log作为扩展名文件，但不匹配error.log。")])]),s._v(" "),e("p",[s._v(".gitignore范例")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("# 忽略 node_modules 目录\nnode_modules/\n\n# 忽略Logs\nlogs\n*.log\n\n# 忽略/dist目录，相对.gitignore文件所在目录\n/dist\n\n# 忽略.nev文件\n.env\n\n# 忽略IDE的配置文件\n.idea/\n.vscode/\n*.sw*\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("p",[s._v("个人忽略规则")]),s._v(" "),e("blockquote",[e("p",[s._v("应在.git/info/exclude文件中配置特定于本地仓库且不应分发到其他仓库的模式。例如，你可以使用此文件忽略个人项目工具中生成的文件。")])]),s._v(" "),e("p",[s._v("全局.gitignore")]),s._v(" "),e("blockquote",[e("p",[s._v("Git还允许你创建全局.gitignore文件，你可以为本地系统上的每个Git仓库定义忽略规则。该文件可以命名为任意名称，并存储在任何位置。保存此文件的最常见位置是主目录。你必须手动创建文件并配置Git使用它。")])]),s._v(" "),e("p",[s._v("例如，要将~/.gitignore_global设置为全局Git忽略文件，你可以执行以下操作。首先创建文件：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("touch ~/.gitignore_global\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("将文件添加到Git配置：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("git config --global core.excludesfile ~/.gitignore_global\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("blockquote",[e("p",[s._v("使用文本编辑器打开文件并向其中添加规则。全局规则对于忽略你永远不想提交的特定文件（例如带有敏感信息或已编译的可执行文件的文件）特别有用。")])]),s._v(" "),e("p",[s._v("忽略以前提交的文件")]),s._v(" "),e("blockquote",[e("p",[s._v("你的工作副本中的文件可以被追踪，也可以不被追踪。要忽略先前提交的文件，你需要取消暂存并从索引中删除该文件，然后在.gitignore中添加该文件模式：")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("git rm --cached filename\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("blockquote",[e("p",[s._v("--cached选项告诉git不要从工作树中删除文件，而只是从索引中删除它。要递归删除目录，请使用-r选项：")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("git rm --cached filename\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("blockquote",[e("p",[s._v("如果要从索引和本地文件系统中删除文件，请忽略--cached选项。以递归方式删除文件时，使用-n选项将执行空运行并显示要删除的文件：")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("git rm -r -n diredtory\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("调试.gitignore文件")]),s._v(" "),e("blockquote",[e("p",[s._v("有时候，确定为什么要忽略特定文件可能会很困难，尤其是当你使用多个.gitignore文件或复杂格式时。这是git check-ignore命令的用处，告诉git显示匹配模式的详细信息。")])]),s._v(" "),e("blockquote",[e("p",[s._v("例如，要检查为什么忽略www/yarn.lock文件，可以运行：")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("git check-ignore -v www/yarn.lock\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("blockquote",[e("p",[s._v("输出显示gitignore文件的路径，匹配行的编号和实际模式。")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("www/.gitignore:31:/yarn.lock www/yarn.lock\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("blockquote",[e("p",[s._v("该命令还接受多个文件名作为参数，并且文件不必存在于你的工作树中。")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("git status --ignored\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])])])}),[],!1,null,null,null);e.default=n.exports}}]);